Project Path: store-laravel

Source Tree:

```
store-laravel
├── resources
│   ├── views
│   │   └── welcome.blade.php
│   ├── js
│   │   ├── app.js
│   │   └── bootstrap.js
│   └── css
│       └── app.css
├── php
│   └── laravel.ini
├── test.sql
├── database
│   ├── factories
│   │   ├── MenuFactory.php
│   │   ├── RoleFactory.php
│   │   └── UserFactory.php
│   ├── seeders
│   │   ├── RoleSeeder.php
│   │   ├── DatabaseSeeder.php
│   │   ├── MenuSeeder.php
│   │   └── UserSeeder.php
│   └── migrations
│       ├── 0001_01_01_000002_create_jobs_table.php
│       ├── 2021_07_27_202159_create_menus_table.php
│       ├── 2021_08_05_121623_alter_users_table_foreign_role.php
│       ├── 2024_09_14_175504_add_two_factor_columns_to_users_table.php
│       ├── 0001_01_01_000000_create_users_table.php
│       ├── 2021_08_01_127356_create_roles_table.php
│       ├── 2024_09_14_174055_create_personal_access_tokens_table.php
│       └── 0001_01_01_000001_create_cache_table.php
├── config
│   ├── cache.php
│   ├── fortify.php
│   ├── app.php
│   ├── mail.php
│   ├── session.php
│   ├── database.php
│   ├── sanctum.php
│   ├── cors.php
│   ├── auth.php
│   ├── logging.php
│   ├── queue.php
│   ├── filesystems.php
│   └── services.php
├── composer.lock
├── LICENSE
├── lang
│   └── en
│       ├── pagination.php
│       ├── passwords.php
│       ├── auth.php
│       └── validation.php
├── Dockerfile
├── docker-compose.yml
├── bootstrap
│   ├── app.php
│   ├── providers.php
│   └── cache
│       └── .gitignore
├── README.md
├── composer.json
├── apuntes
├── public
│   ├── index.php
│   ├── favicon.ico
│   └── robots.txt
├── app
│   ├── Exceptions
│   │   ├── Handler.php
│   │   ├── ExceptionInstance.php
│   │   └── CustomException.php
│   ├── Http
│   │   ├── Requests
│   │   │   ├── Menu
│   │   │   │   ├── StoreMenuRequest.php
│   │   │   │   ├── UpdateMenuRequest.php
│   │   │   │   ├── DestroyMenuRequest.php
│   │   │   │   └── ChildrenMenuRequest.php
│   │   │   └── User
│   │   │       ├── UpdateUserRequest.php
│   │   │       └── StoreUserRequest.php
│   │   ├── Controllers
│   │   │   ├── AuthMenuController.php
│   │   │   ├── AuthController.php
│   │   │   ├── MenuController.php
│   │   │   ├── UserController.php
│   │   │   ├── Controller.php
│   │   │   ├── TokenController.php
│   │   │   ├── AvatarController.php
│   │   │   └── RoleController.php
│   │   ├── Middleware
│   │   │   ├── Authenticate.php
│   │   │   └── RedirectIfAuthenticated.php
│   │   ├── Resources
│   │   │   ├── UserBasicResource.php
│   │   │   ├── UserResource.php
│   │   │   └── UserCollection.php
│   │   ├── Services
│   │   │   ├── Role
│   │   │   │   ├── ShowRoleService.php
│   │   │   │   ├── DestroyRoleService.php
│   │   │   │   ├── UpdateRoleService.php
│   │   │   │   ├── StoreRoleService.php
│   │   │   │   └── IndexRoleService.php
│   │   │   ├── Menu
│   │   │   │   ├── UpdateMenuService.php
│   │   │   │   ├── DestroyMenuService.php
│   │   │   │   ├── ChildreMenuService.php
│   │   │   │   ├── StoreMenuService.php
│   │   │   │   └── MenuService.php
│   │   │   └── User
│   │   │       ├── UpdateUserService.php
│   │   │       ├── IndexUserService.php
│   │   │       └── StoreUserService.php
│   │   └── Validator
│   │       └── Menu
│   │           ├── StoreMenuValidator.php
│   │           └── UpdateMenuValidator.php
│   ├── Providers
│   │   ├── AuthServiceProvider.php
│   │   ├── RouteServiceProvider.php
│   │   ├── FortifyServiceProvider.php
│   │   └── AppServiceProvider.php
│   ├── Repositories
│   │   └── Menu
│   │       ├── ListMenuRepository.php
│   │       └── RecursiveMenuRepository.php
│   ├── Actions
│   │   └── Fortify
│   │       ├── UpdateUserPassword.php
│   │       ├── PasswordValidationRules.php
│   │       ├── CreateNewUser.php
│   │       ├── UpdateUserProfileInformation.php
│   │       └── ResetUserPassword.php
│   └── Models
│       ├── Menu.php
│       ├── Role.php
│       ├── User.php
│       └── Model.php
├── Modules
│   ├── Store
│   │   ├── resources
│   │   │   ├── views
│   │   │   │   ├── index.blade.php
│   │   │   │   └── layouts
│   │   │   │       └── master.blade.php
│   │   │   └── assets
│   │   │       ├── sass
│   │   │       │   └── app.scss
│   │   │       └── js
│   │   │           └── app.js
│   │   ├── database
│   │   │   ├── factories
│   │   │   ├── seeders
│   │   │   │   ├── SubWarehouseSeeder.php
│   │   │   │   ├── MovementDetailTableSeeder.php
│   │   │   │   ├── MovementTableSeeder.php
│   │   │   │   ├── SupportTypesSeeder.php
│   │   │   │   └── StoreDatabaseSeeder.php
│   │   │   └── migrations
│   │   │       ├── 2024_11_14_141710_create_annual_closings.php
│   │   │       ├── 2020_12_15_181548_create_view_stock_movement.php
│   │   │       ├── 2020_12_17_001676_create_function_daily_closing_valid_dates.php
│   │   │       ├── 2020_12_07_202921_create_movements_generate_number_trigger.php
│   │   │       ├── 2020_12_15_232646_create_view_stock_close_day.php
│   │   │       ├── 2020_12_15_163624_create_view_article_quantity_reverse_output.php
│   │   │       ├── 2020_12_15_163549_create_view_article_quantity_reverse_input.php
│   │   │       ├── 2020_12_15_163439_create_view_article_quantity_input.php
│   │   │       ├── 2020_12_16_001676_create_view_existence_daily_closing.php
│   │   │       ├── 2020_12_15_163517_create_view_article_quantity_output.php
│   │   │       ├── 2020_12_16_001665_create_view_closure_pre_insert_aux.php
│   │   │       ├── 2020_12_07_195327_create_movements_table.php
│   │   │       ├── 2020_12_19_001676_create_function_daily_closing_register.php
│   │   │       ├── 2020_12_16_001676_create_view_closure_pre_insert.php
│   │   │       ├── 2024_12_12_754887_create_view_stocks_by_accumulated_plus_unclosed_movements.php
│   │   │       ├── 2024_09_16_184406_create_support_types_table.php
│   │   │       ├── 2024_12_12_151810_create_view_total_articles_by_daily_closing.php
│   │   │       ├── 2020_12_07_195353_create_movement_details_table.php
│   │   │       ├── 2020_12_16_001660_create_view_clousure_mov_date_time_article.php
│   │   │       ├── 2020_12_20_001676_create_function_daily_closing.php
│   │   │       ├── 2024_12_26_174239_create_sub_warehouses_table.php
│   │   │       ├── 2020_12_15_231004_create_close_days_table.php
│   │   │       ├── 2024_11_14_141514_create_monthly_closings.php
│   │   │       ├── 2020_12_16_001654_create_view_stock.php
│   │   │       ├── 2024_11_14_133356_create_daily_closings.php
│   │   │       ├── 2024_12_12_254880_create_view_articles_sum_by_unclosed_movements.php
│   │   │       └── 2020_12_18_001676_create_function_daily_closing_date_exists.php
│   │   ├── config
│   │   │   └── config.php
│   │   ├── composer.json
│   │   ├── app
│   │   │   ├── Enums
│   │   │   │   └── MovementTypeEnum.php
│   │   │   ├── Http
│   │   │   │   ├── Requests
│   │   │   │   │   ├── Movement
│   │   │   │   │   │   ├── UpdateMovementRequest.php
│   │   │   │   │   │   └── StoreMovementRequest.php
│   │   │   │   │   ├── SubWarehouse
│   │   │   │   │   │   ├── UpdateSubWarehouseRequest.php
│   │   │   │   │   │   └── StoreSubWarehouseRequest.php
│   │   │   │   │   └── MovementDetail
│   │   │   │   │       ├── UpdateMovementDetailRequest.php
│   │   │   │   │       └── StoreMovementDetailRequest.php
│   │   │   │   ├── Controllers
│   │   │   │   │   ├── StoreController.php
│   │   │   │   │   ├── SubWarehouseController.php
│   │   │   │   │   ├── MovementDetailController.php
│   │   │   │   │   ├── DailyClosingController.php
│   │   │   │   │   └── MovementController.php
│   │   │   │   ├── Resources
│   │   │   │   │   ├── MovementResource.php
│   │   │   │   │   ├── SubWarehouseResource.php
│   │   │   │   │   └── ArticleResource.php
│   │   │   │   └── Services
│   │   │   │       ├── Movement
│   │   │   │       │   ├── IndexMovementService.php
│   │   │   │       │   ├── StoreMovementService.php
│   │   │   │       │   └── UpdateMovementService.php
│   │   │   │       ├── SubWarehouse
│   │   │   │       │   ├── StoreSubWarehouseService.php
│   │   │   │       │   ├── IndexSubWarehouseService.php
│   │   │   │       │   └── UpdateSubWarehouseService.php
│   │   │   │       ├── MovementDetail
│   │   │   │       │   ├── UpdateMovementDetailService.php
│   │   │   │       │   └── StoreMovementDetailService.php
│   │   │   │       └── DailyClosing
│   │   │   │           └── IndexDailyClosingService.php
│   │   │   ├── Providers
│   │   │   │   ├── RouteServiceProvider.php
│   │   │   │   ├── EventServiceProvider.php
│   │   │   │   └── StoreServiceProvider.php
│   │   │   ├── Actions
│   │   │   │   └── ExistenceAction.php
│   │   │   ├── Entities
│   │   │   │   ├── DailyClosing.php
│   │   │   │   ├── SubWarehouse.php
│   │   │   │   ├── MovementDetail.php
│   │   │   │   ├── Movement.php
│   │   │   │   └── Existence.php
│   │   │   └── Models
│   │   │       ├── DailyClosing.php
│   │   │       ├── MonthlyClosing.php
│   │   │       └── AnnualClosing.php
│   │   ├── package.json
│   │   ├── routes
│   │   │   ├── apiold.php
│   │   │   ├── api.php
│   │   │   └── web.php
│   │   ├── vite.config.js
│   │   └── module.json
│   ├── Product
│   │   ├── resources
│   │   │   ├── views
│   │   │   │   ├── index.blade.php
│   │   │   │   └── layouts
│   │   │   │       └── master.blade.php
│   │   │   └── assets
│   │   │       ├── sass
│   │   │       │   └── app.scss
│   │   │       └── js
│   │   │           └── app.js
│   │   ├── database
│   │   │   ├── factories
│   │   │   ├── seeders
│   │   │   │   ├── ProductsTableSeeder.php
│   │   │   │   ├── ProductDatabaseSeeder.php
│   │   │   │   ├── CategoriesTableSeeder.php
│   │   │   │   ├── PresentationsTableSeeder.php
│   │   │   │   └── MarksTableSeeder.php
│   │   │   └── migrations
│   │   │       ├── 2020_08_31_145943_create_marks_table.php
│   │   │       ├── 2020_09_18_214754_create_presentation_register_pl.php
│   │   │       ├── 2020_09_01_160108_create_category_remove_pl.php
│   │   │       ├── 2020_08_31_204622_create_categories_view.php
│   │   │       ├── 2020_08_31_145847_create_categories_table.php
│   │   │       ├── 2020_09_22_002616_create_presentation_remove_pl.php
│   │   │       ├── 2020_08_31_150029_create_products_table.php
│   │   │       ├── 2020_09_18_015320_create_product_register_pl.php
│   │   │       ├── 2020_09_07_233850_create_marks_register_pl.php
│   │   │       ├── 2020_09_01_160047_create_category_register_pl.php
│   │   │       ├── 2020_09_11_011010_create_presentation_deploy_pl.php
│   │   │       ├── 2020_09_07_233912_create_marks_remove_pl.php
│   │   │       └── 2020_08_31_150104_create_presentations_table.php
│   │   ├── config
│   │   │   └── config.php
│   │   ├── composer.json
│   │   ├── app
│   │   │   ├── Http
│   │   │   │   ├── Requests
│   │   │   │   │   ├── Product
│   │   │   │   │   │   ├── UpdateProductRequest.php
│   │   │   │   │   │   └── StoreProductRequest.php
│   │   │   │   │   ├── Presentation
│   │   │   │   │   │   ├── UpdatePresentationRequest.php
│   │   │   │   │   │   └── StorePresentationRequest.php
│   │   │   │   │   └── Mark
│   │   │   │   │       ├── StoreMarkRequest.php
│   │   │   │   │       └── UpdateMarkRequest.php
│   │   │   │   ├── Controllers
│   │   │   │   │   ├── CategoryController.php
│   │   │   │   │   ├── PresentationController.php
│   │   │   │   │   ├── MarkController.php
│   │   │   │   │   └── ProductController.php
│   │   │   │   ├── Resources
│   │   │   │   │   └── MarkResource.php
│   │   │   │   └── Services
│   │   │   │       ├── Product
│   │   │   │       │   ├── UpdateProductService.php
│   │   │   │       │   ├── IndexProductService.php
│   │   │   │       │   └── StoreProductService.php
│   │   │   │       ├── Presentation
│   │   │   │       │   ├── StorePresentationService.php
│   │   │   │       │   └── UpdatePresentationService.php
│   │   │   │       └── Mark
│   │   │   │           ├── IndexMarkService.php
│   │   │   │           ├── UpdateMarkService.php
│   │   │   │           └── StoreMarkService.php
│   │   │   ├── Providers
│   │   │   │   ├── RouteServiceProvider.php
│   │   │   │   ├── EventServiceProvider.php
│   │   │   │   └── ProductServiceProvider.php
│   │   │   └── Entities
│   │   │       ├── Category.php
│   │   │       ├── Presentation.php
│   │   │       ├── Product.php
│   │   │       └── Mark.php
│   │   ├── package.json
│   │   ├── routes
│   │   │   ├── api.php
│   │   │   └── web.php
│   │   ├── vite.config.js
│   │   └── module.json
│   ├── Common
│   │   ├── resources
│   │   │   ├── views
│   │   │   │   ├── index.blade.php
│   │   │   │   └── layouts
│   │   │   │       └── master.blade.php
│   │   │   └── assets
│   │   │       ├── sass
│   │   │       │   └── app.scss
│   │   │       └── js
│   │   │           └── app.js
│   │   ├── database
│   │   │   ├── factories
│   │   │   ├── seeders
│   │   │   │   ├── MuContainerSeeder.php
│   │   │   │   ├── MunicipalitiesTableSeeder.php
│   │   │   │   ├── RouteTypesTableSeeder.php
│   │   │   │   ├── ParishesTableSeeder.php
│   │   │   │   ├── CommonDatabaseSeeder.php
│   │   │   │   ├── MuMeasureUnitSeeder.php
│   │   │   │   ├── CitiesTableSeeder.php
│   │   │   │   ├── MuMeasureUnitTypeSeeder.php
│   │   │   │   ├── ZoneTypesTableSeeder.php
│   │   │   │   ├── StatesTableSeeder.php
│   │   │   │   └── DomicileTypesTableSeeder.php
│   │   │   └── migrations
│   │   │       ├── 2020_10_19_181949_create_states_table.php
│   │   │       ├── 2020_11_10_210636_create_mu_measure_units_table.php
│   │   │       ├── 2020_10_19_211621_create_municipalities_table.php
│   │   │       ├── 2020_11_10_210517_create_mu_measure_unit_types_table.php
│   │   │       ├── 2020_10_20_165454_create_domicile_types_table.php
│   │   │       ├── 2020_10_20_165412_create_zone_types_table.php
│   │   │       ├── 2020_10_20_165432_create_route_types_table.php
│   │   │       ├── 2020_11_10_205407_create_mu_containers_table.php
│   │   │       ├── 2020_10_19_211743_create_parishes_table.php
│   │   │       └── 2020_10_20_163038_create_cities_table.php
│   │   ├── config
│   │   │   └── config.php
│   │   ├── zCommon
│   │   │   ├── Config
│   │   │   │   └── config.php
│   │   │   ├── Console
│   │   │   ├── Database
│   │   │   │   ├── Seeders
│   │   │   │   │   ├── MuContainerSeeder.php
│   │   │   │   │   ├── MunicipalitiesTableSeeder.php
│   │   │   │   │   ├── RouteTypesTableSeeder.php
│   │   │   │   │   ├── ParishesTableSeeder.php
│   │   │   │   │   ├── CommonDatabaseSeeder.php
│   │   │   │   │   ├── MuMeasureUnitSeeder.php
│   │   │   │   │   ├── CitiesTableSeeder.php
│   │   │   │   │   ├── MuMeasureUnitTypeSeeder.php
│   │   │   │   │   ├── ZoneTypesTableSeeder.php
│   │   │   │   │   ├── StatesTableSeeder.php
│   │   │   │   │   └── DomicileTypesTableSeeder.php
│   │   │   │   ├── factories
│   │   │   │   └── Migrations
│   │   │   │       ├── 2020_10_19_181949_create_states_table.php
│   │   │   │       ├── 2020_11_10_210636_create_mu_measure_units_table.php
│   │   │   │       ├── 2020_10_19_211621_create_municipalities_table.php
│   │   │   │       ├── 2020_11_10_210517_create_mu_measure_unit_types_table.php
│   │   │   │       ├── 2020_10_20_165454_create_domicile_types_table.php
│   │   │   │       ├── 2020_10_20_165412_create_zone_types_table.php
│   │   │   │       ├── 2020_10_20_165432_create_route_types_table.php
│   │   │   │       ├── 2020_11_10_205407_create_mu_containers_table.php
│   │   │   │       ├── 2020_10_19_211743_create_parishes_table.php
│   │   │   │       └── 2020_10_20_163038_create_cities_table.php
│   │   │   ├── Tests
│   │   │   │   ├── Feature
│   │   │   │   └── Unit
│   │   │   ├── Routes
│   │   │   │   ├── api.php
│   │   │   │   └── web.php
│   │   │   ├── composer.json
│   │   │   ├── package.json
│   │   │   ├── Http
│   │   │   │   ├── Requests
│   │   │   │   ├── Controllers
│   │   │   │   │   ├── MeasureUnit
│   │   │   │   │   │   ├── MuContainerController.php
│   │   │   │   │   │   ├── MuMeasureUnitController.php
│   │   │   │   │   │   └── MuMeasureUnitTypeController.php
│   │   │   │   │   ├── GeoLocation
│   │   │   │   │   │   ├── GeoLocationController.php
│   │   │   │   │   │   ├── ZoneTypeController.php
│   │   │   │   │   │   ├── ParishController.php
│   │   │   │   │   │   ├── MunicipalityController.php
│   │   │   │   │   │   ├── StateController.php
│   │   │   │   │   │   ├── DomicileTypeController.php
│   │   │   │   │   │   ├── CityController.php
│   │   │   │   │   │   └── RouteTypeController.php
│   │   │   │   │   └── CommonController.php
│   │   │   │   └── Middleware
│   │   │   ├── Providers
│   │   │   │   ├── RouteServiceProvider.php
│   │   │   │   └── CommonServiceProvider.php
│   │   │   ├── Entities
│   │   │   │   ├── MeasureUnit
│   │   │   │   │   ├── MuMeasureUnitType.php
│   │   │   │   │   ├── MuMeasureUnit.php
│   │   │   │   │   └── MuContainer.php
│   │   │   │   └── GeoLocation
│   │   │   │       ├── ZoneType.php
│   │   │   │       ├── DomicileType.php
│   │   │   │       ├── Municipality.php
│   │   │   │       ├── Parish.php
│   │   │   │       ├── City.php
│   │   │   │       ├── State.php
│   │   │   │       └── RouteType.php
│   │   │   ├── Resources
│   │   │   │   ├── views
│   │   │   │   │   ├── index.blade.php
│   │   │   │   │   └── layouts
│   │   │   │   │       └── master.blade.php
│   │   │   │   ├── lang
│   │   │   │   └── assets
│   │   │   │       ├── sass
│   │   │   │       │   └── app.scss
│   │   │   │       └── js
│   │   │   │           └── app.js
│   │   │   ├── vite.config.js
│   │   │   └── module.json
│   │   ├── composer.json
│   │   ├── app
│   │   │   ├── Http
│   │   │   │   └── Controllers
│   │   │   │       ├── MeasureUnit
│   │   │   │       │   ├── MuContainerController.php
│   │   │   │       │   ├── MuMeasureUnitController.php
│   │   │   │       │   └── MuMeasureUnitTypeController.php
│   │   │   │       ├── GeoLocation
│   │   │   │       │   ├── GeoLocationController.php
│   │   │   │       │   ├── ZoneTypeController.php
│   │   │   │       │   ├── ParishController.php
│   │   │   │       │   ├── MunicipalityController.php
│   │   │   │       │   ├── StateController.php
│   │   │   │       │   ├── DomicileTypeController.php
│   │   │   │       │   ├── CityController.php
│   │   │   │       │   └── RouteTypeController.php
│   │   │   │       └── CommonController.php
│   │   │   ├── Providers
│   │   │   │   ├── RouteServiceProvider.php
│   │   │   │   ├── EventServiceProvider.php
│   │   │   │   └── CommonServiceProvider.php
│   │   │   └── Entities
│   │   │       ├── MeasureUnit
│   │   │       │   ├── MuMeasureUnitType.php
│   │   │       │   ├── MuMeasureUnit.php
│   │   │       │   └── MuContainer.php
│   │   │       └── GeoLocation
│   │   │           ├── ZoneType.php
│   │   │           ├── DomicileType.php
│   │   │           ├── Municipality.php
│   │   │           ├── Parish.php
│   │   │           ├── City.php
│   │   │           ├── State.php
│   │   │           └── RouteType.php
│   │   ├── package.json
│   │   ├── routes
│   │   │   ├── api.php
│   │   │   └── web.php
│   │   ├── vite.config.js
│   │   └── module.json
│   └── Article
│       ├── resources
│       │   ├── views
│       │   │   ├── index.blade.php
│       │   │   └── layouts
│       │   │       └── master.blade.php
│       │   └── assets
│       │       ├── sass
│       │       │   └── app.scss
│       │       └── js
│       │           └── app.js
│       ├── database
│       │   ├── factories
│       │   │   ├── ArticleFactory.php
│       │   │   └── ArticleDetailFactory.php
│       │   ├── seeders
│       │   │   └── ArticleDatabaseSeeder.php
│       │   └── migrations
│       │       ├── 2021_01_06_204637_create_article_details_table.php
│       │       └── 2021_01_06_204553_create_articles_table.php
│       ├── config
│       │   └── config.php
│       ├── zArticleDelete
│       │   ├── Config
│       │   │   └── config.php
│       │   ├── Console
│       │   ├── Tests
│       │   │   ├── Feature
│       │   │   └── Unit
│       │   ├── Routes
│       │   │   ├── apiArticleDetail.php
│       │   │   ├── apiArticle.php
│       │   │   └── web.php
│       │   ├── composer.json
│       │   ├── package.json
│       │   ├── Providers
│       │   │   ├── RouteServiceProvider.php
│       │   │   └── ArticleServiceProvider.php
│       │   ├── Repositories
│       │   │   └── ArticleDetailRepository.php
│       │   ├── Resources
│       │   │   ├── views
│       │   │   │   ├── index.blade.php
│       │   │   │   └── layouts
│       │   │   │       └── master.blade.php
│       │   │   ├── lang
│       │   │   └── assets
│       │   │       ├── sass
│       │   │       │   └── app.scss
│       │   │       └── js
│       │   │           └── app.js
│       │   ├── vite.config.js
│       │   └── module.json
│       ├── composer.json
│       ├── app
│       │   ├── Http
│       │   │   ├── Requests
│       │   │   │   ├── ArticleDetail
│       │   │   │   │   ├── StoreArticleDetailRequest.php
│       │   │   │   │   └── UpdateArticleDetailRequest.php
│       │   │   │   └── Article
│       │   │   │       ├── UpdateArticleRequest.php
│       │   │   │       └── StoreArticleRequest.php
│       │   │   ├── Controllers
│       │   │   │   ├── ArticleDetailController.php
│       │   │   │   └── ArticleController.php
│       │   │   ├── Resources
│       │   │   │   └── ArticleResource.php
│       │   │   └── Services
│       │   │       ├── ArticleDetail
│       │   │       │   ├── UpdateArticleDetailService.php
│       │   │       │   └── StoreArticleDetailService.php
│       │   │       └── Article
│       │   │           ├── IndexArticleService.php
│       │   │           ├── StoreArticleService.php
│       │   │           └── UpdateArticleService.php
│       │   ├── Providers
│       │   │   ├── RouteServiceProvider.php
│       │   │   ├── EventServiceProvider.php
│       │   │   └── ArticleServiceProvider.php
│       │   ├── Repositories
│       │   │   └── ArticleDetailRepository.php
│       │   ├── Entities
│       │   │   ├── ArticleDetail.php
│       │   │   └── Article.php
│       │   └── Resources
│       │       ├── views
│       │       │   ├── index.blade.php
│       │       │   └── layouts
│       │       │       └── master.blade.php
│       │       ├── lang
│       │       └── assets
│       │           ├── sass
│       │           │   └── app.scss
│       │           └── js
│       │               └── app.js
│       ├── package.json
│       ├── routes
│       │   ├── apiold.php
│       │   ├── api.php
│       │   └── web.php
│       ├── vite.config.js
│       └── module.json
├── nginx
│   ├── default.conf
│   └── Dockerfile
├── package.json
├── routes
│   ├── console.php
│   ├── api.php
│   └── web.php
├── modules_statuses.json
├── artisan
├── docs
│   ├── closes.sql
│   └── uuid_store.sql
├── phpunit.xml
├── docker-compose.yml.back
├── storage
│   ├── framework
│   │   ├── views
│   │   │   └── .gitignore
│   │   ├── testing
│   │   │   └── .gitignore
│   │   ├── sessions
│   │   │   └── .gitignore
│   │   └── cache
│   │       ├── data
│   │       │   └── .gitignore
│   │       └── .gitignore
│   ├── logs
│   │   └── .gitignore
│   └── app
│       ├── .gitignore
│       ├── private
│       │   └── .gitignore
│       └── public
│           └── .gitignore
└── vite.config.js

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/resources/views/welcome.blade.php`:

```php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Laravel</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,600&display=swap" rel="stylesheet" />

        <!-- Styles -->
        <style>
            /* ! tailwindcss v3.4.1 | MIT License | https://tailwindcss.com */*,::after,::before{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}::after,::before{--tw-content:''}:host,html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:Figtree, ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;font-feature-settings:normal;font-variation-settings:normal;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}*, ::before, ::after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.absolute{position:absolute}.relative{position:relative}.-left-20{left:-5rem}.top-0{top:0px}.-bottom-16{bottom:-4rem}.-left-16{left:-4rem}.-mx-3{margin-left:-0.75rem;margin-right:-0.75rem}.mt-4{margin-top:1rem}.mt-6{margin-top:1.5rem}.flex{display:flex}.grid{display:grid}.hidden{display:none}.aspect-video{aspect-ratio:16 / 9}.size-12{width:3rem;height:3rem}.size-5{width:1.25rem;height:1.25rem}.size-6{width:1.5rem;height:1.5rem}.h-12{height:3rem}.h-40{height:10rem}.h-full{height:100%}.min-h-screen{min-height:100vh}.w-full{width:100%}.w-\[calc\(100\%\+8rem\)\]{width:calc(100% + 8rem)}.w-auto{width:auto}.max-w-\[877px\]{max-width:877px}.max-w-2xl{max-width:42rem}.flex-1{flex:1 1 0%}.shrink-0{flex-shrink:0}.grid-cols-2{grid-template-columns:repeat(2, minmax(0, 1fr))}.flex-col{flex-direction:column}.items-start{align-items:flex-start}.items-center{align-items:center}.items-stretch{align-items:stretch}.justify-end{justify-content:flex-end}.justify-center{justify-content:center}.gap-2{gap:0.5rem}.gap-4{gap:1rem}.gap-6{gap:1.5rem}.self-center{align-self:center}.overflow-hidden{overflow:hidden}.rounded-\[10px\]{border-radius:10px}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:0.5rem}.rounded-md{border-radius:0.375rem}.rounded-sm{border-radius:0.125rem}.bg-\[\#FF2D20\]\/10{background-color:rgb(255 45 32 / 0.1)}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity))}.bg-gradient-to-b{background-image:linear-gradient(to bottom, var(--tw-gradient-stops))}.from-transparent{--tw-gradient-from:transparent var(--tw-gradient-from-position);--tw-gradient-to:rgb(0 0 0 / 0) var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from), var(--tw-gradient-to)}.via-white{--tw-gradient-to:rgb(255 255 255 / 0)  var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from), #fff var(--tw-gradient-via-position), var(--tw-gradient-to)}.to-white{--tw-gradient-to:#fff var(--tw-gradient-to-position)}.stroke-\[\#FF2D20\]{stroke:#FF2D20}.object-cover{object-fit:cover}.object-top{object-position:top}.p-6{padding:1.5rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.py-10{padding-top:2.5rem;padding-bottom:2.5rem}.px-3{padding-left:0.75rem;padding-right:0.75rem}.py-16{padding-top:4rem;padding-bottom:4rem}.py-2{padding-top:0.5rem;padding-bottom:0.5rem}.pt-3{padding-top:0.75rem}.text-center{text-align:center}.font-sans{font-family:Figtree, ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji}.text-sm{font-size:0.875rem;line-height:1.25rem}.text-sm\/relaxed{font-size:0.875rem;line-height:1.625}.text-xl{font-size:1.25rem;line-height:1.75rem}.font-semibold{font-weight:600}.text-black{--tw-text-opacity:1;color:rgb(0 0 0 / var(--tw-text-opacity))}.text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.underline{-webkit-text-decoration-line:underline;text-decoration-line:underline}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.shadow-\[0px_14px_34px_0px_rgba\(0\2c 0\2c 0\2c 0\.08\)\]{--tw-shadow:0px 14px 34px 0px rgba(0,0,0,0.08);--tw-shadow-colored:0px 14px 34px 0px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.ring-1{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.ring-transparent{--tw-ring-color:transparent}.ring-white\/\[0\.05\]{--tw-ring-color:rgb(255 255 255 / 0.05)}.drop-shadow-\[0px_4px_34px_rgba\(0\2c 0\2c 0\2c 0\.06\)\]{--tw-drop-shadow:drop-shadow(0px 4px 34px rgba(0,0,0,0.06));filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.drop-shadow-\[0px_4px_34px_rgba\(0\2c 0\2c 0\2c 0\.25\)\]{--tw-drop-shadow:drop-shadow(0px 4px 34px rgba(0,0,0,0.25));filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow)}.transition{transition-property:color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.duration-300{transition-duration:300ms}.selection\:bg-\[\#FF2D20\] *::selection{--tw-bg-opacity:1;background-color:rgb(255 45 32 / var(--tw-bg-opacity))}.selection\:text-white *::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.selection\:bg-\[\#FF2D20\]::selection{--tw-bg-opacity:1;background-color:rgb(255 45 32 / var(--tw-bg-opacity))}.selection\:text-white::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.hover\:text-black:hover{--tw-text-opacity:1;color:rgb(0 0 0 / var(--tw-text-opacity))}.hover\:text-black\/70:hover{color:rgb(0 0 0 / 0.7)}.hover\:ring-black\/20:hover{--tw-ring-color:rgb(0 0 0 / 0.2)}.focus\:outline-none:focus{outline:2px solid transparent;outline-offset:2px}.focus-visible\:ring-1:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.focus-visible\:ring-\[\#FF2D20\]:focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgb(255 45 32 / var(--tw-ring-opacity))}@media (min-width: 640px){.sm\:size-16{width:4rem;height:4rem}.sm\:size-6{width:1.5rem;height:1.5rem}.sm\:pt-5{padding-top:1.25rem}}@media (min-width: 768px){.md\:row-span-3{grid-row:span 3 / span 3}}@media (min-width: 1024px){.lg\:col-start-2{grid-column-start:2}.lg\:h-16{height:4rem}.lg\:max-w-7xl{max-width:80rem}.lg\:grid-cols-3{grid-template-columns:repeat(3, minmax(0, 1fr))}.lg\:grid-cols-2{grid-template-columns:repeat(2, minmax(0, 1fr))}.lg\:flex-col{flex-direction:column}.lg\:items-end{align-items:flex-end}.lg\:justify-center{justify-content:center}.lg\:gap-8{gap:2rem}.lg\:p-10{padding:2.5rem}.lg\:pb-10{padding-bottom:2.5rem}.lg\:pt-0{padding-top:0px}.lg\:text-\[\#FF2D20\]{--tw-text-opacity:1;color:rgb(255 45 32 / var(--tw-text-opacity))}}@media (prefers-color-scheme: dark){.dark\:block{display:block}.dark\:hidden{display:none}.dark\:bg-black{--tw-bg-opacity:1;background-color:rgb(0 0 0 / var(--tw-bg-opacity))}.dark\:bg-zinc-900{--tw-bg-opacity:1;background-color:rgb(24 24 27 / var(--tw-bg-opacity))}.dark\:via-zinc-900{--tw-gradient-to:rgb(24 24 27 / 0)  var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from), #18181b var(--tw-gradient-via-position), var(--tw-gradient-to)}.dark\:to-zinc-900{--tw-gradient-to:#18181b var(--tw-gradient-to-position)}.dark\:text-white\/50{color:rgb(255 255 255 / 0.5)}.dark\:text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.dark\:text-white\/70{color:rgb(255 255 255 / 0.7)}.dark\:ring-zinc-800{--tw-ring-opacity:1;--tw-ring-color:rgb(39 39 42 / var(--tw-ring-opacity))}.dark\:hover\:text-white:hover{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.dark\:hover\:text-white\/70:hover{color:rgb(255 255 255 / 0.7)}.dark\:hover\:text-white\/80:hover{color:rgb(255 255 255 / 0.8)}.dark\:hover\:ring-zinc-700:hover{--tw-ring-opacity:1;--tw-ring-color:rgb(63 63 70 / var(--tw-ring-opacity))}.dark\:focus-visible\:ring-\[\#FF2D20\]:focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgb(255 45 32 / var(--tw-ring-opacity))}.dark\:focus-visible\:ring-white:focus-visible{--tw-ring-opacity:1;--tw-ring-color:rgb(255 255 255 / var(--tw-ring-opacity))}}
        </style>
    </head>
    <body class="font-sans antialiased dark:bg-black dark:text-white/50">
        <div class="bg-gray-50 text-black/50 dark:bg-black dark:text-white/50">
            <img id="background" class="absolute -left-20 top-0 max-w-[877px]" src="https://laravel.com/assets/img/welcome/background.svg" />
            <div class="relative min-h-screen flex flex-col items-center justify-center selection:bg-[#FF2D20] selection:text-white">
                <div class="relative w-full max-w-2xl px-6 lg:max-w-7xl">
                    <header class="grid grid-cols-2 items-center gap-2 py-10 lg:grid-cols-3">
                        <div class="flex lg:justify-center lg:col-start-2">
                            <svg class="h-12 w-auto text-white lg:h-16 lg:text-[#FF2D20]" viewBox="0 0 62 65" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M61.8548 14.6253C61.8778 14.7102 61.8895 14.7978 61.8897 14.8858V28.5615C61.8898 28.737 61.8434 28.9095 61.7554 29.0614C61.6675 29.2132 61.5409 29.3392 61.3887 29.4265L49.9104 36.0351V49.1337C49.9104 49.4902 49.7209 49.8192 49.4118 49.9987L25.4519 63.7916C25.3971 63.8227 25.3372 63.8427 25.2774 63.8639C25.255 63.8714 25.2338 63.8851 25.2101 63.8913C25.0426 63.9354 24.8666 63.9354 24.6991 63.8913C24.6716 63.8838 24.6467 63.8689 24.6205 63.8589C24.5657 63.8389 24.5084 63.8215 24.456 63.7916L0.501061 49.9987C0.348882 49.9113 0.222437 49.7853 0.134469 49.6334C0.0465019 49.4816 0.000120578 49.3092 0 49.1337L0 8.10652C0 8.01678 0.0124642 7.92953 0.0348998 7.84477C0.0423783 7.8161 0.0598282 7.78993 0.0697995 7.76126C0.0884958 7.70891 0.105946 7.65531 0.133367 7.6067C0.152063 7.5743 0.179485 7.54812 0.20192 7.51821C0.230588 7.47832 0.256763 7.43719 0.290416 7.40229C0.319084 7.37362 0.356476 7.35243 0.388883 7.32751C0.425029 7.29759 0.457436 7.26518 0.498568 7.2415L12.4779 0.345059C12.6296 0.257786 12.8015 0.211853 12.9765 0.211853C13.1515 0.211853 13.3234 0.257786 13.475 0.345059L25.4531 7.2415H25.4556C25.4955 7.26643 25.5292 7.29759 25.5653 7.32626C25.5977 7.35119 25.6339 7.37362 25.6625 7.40104C25.6974 7.43719 25.7224 7.47832 25.7523 7.51821C25.7735 7.54812 25.8021 7.5743 25.8196 7.6067C25.8483 7.65656 25.8645 7.70891 25.8844 7.76126C25.8944 7.78993 25.9118 7.8161 25.9193 7.84602C25.9423 7.93096 25.954 8.01853 25.9542 8.10652V33.7317L35.9355 27.9844V14.8846C35.9355 14.7973 35.948 14.7088 35.9704 14.6253C35.9792 14.5954 35.9954 14.5692 36.0053 14.5405C36.0253 14.4882 36.0427 14.4346 36.0702 14.386C36.0888 14.3536 36.1163 14.3274 36.1375 14.2975C36.1674 14.2576 36.1923 14.2165 36.2272 14.1816C36.2559 14.1529 36.292 14.1317 36.3244 14.1068C36.3618 14.0769 36.3942 14.0445 36.4341 14.0208L48.4147 7.12434C48.5663 7.03694 48.7383 6.99094 48.9133 6.99094C49.0883 6.99094 49.2602 7.03694 49.4118 7.12434L61.3899 14.0208C61.4323 14.0457 61.4647 14.0769 61.5021 14.1055C61.5333 14.1305 61.5694 14.1529 61.5981 14.1803C61.633 14.2165 61.6579 14.2576 61.6878 14.2975C61.7103 14.3274 61.7377 14.3536 61.7551 14.386C61.7838 14.4346 61.8 14.4882 61.8199 14.5405C61.8312 14.5692 61.8474 14.5954 61.8548 14.6253ZM59.893 27.9844V16.6121L55.7013 19.0252L49.9104 22.3593V33.7317L59.8942 27.9844H59.893ZM47.9149 48.5566V37.1768L42.2187 40.4299L25.953 49.7133V61.2003L47.9149 48.5566ZM1.99677 9.83281V48.5566L23.9562 61.199V49.7145L12.4841 43.2219L12.4804 43.2194L12.4754 43.2169C12.4368 43.1945 12.4044 43.1621 12.3682 43.1347C12.3371 43.1097 12.3009 43.0898 12.2735 43.0624L12.271 43.0586C12.2386 43.0275 12.2162 42.9888 12.1887 42.9539C12.1638 42.9203 12.1339 42.8916 12.114 42.8567L12.1127 42.853C12.0903 42.8156 12.0766 42.7707 12.0604 42.7283C12.0442 42.6909 12.023 42.656 12.013 42.6161C12.0005 42.5688 11.998 42.5177 11.9931 42.4691C11.9881 42.4317 11.9781 42.3943 11.9781 42.3569V15.5801L6.18848 12.2446L1.99677 9.83281ZM12.9777 2.36177L2.99764 8.10652L12.9752 13.8513L22.9541 8.10527L12.9752 2.36177H12.9777ZM18.1678 38.2138L23.9574 34.8809V9.83281L19.7657 12.2459L13.9749 15.5801V40.6281L18.1678 38.2138ZM48.9133 9.14105L38.9344 14.8858L48.9133 20.6305L58.8909 14.8846L48.9133 9.14105ZM47.9149 22.3593L42.124 19.0252L37.9323 16.6121V27.9844L43.7219 31.3174L47.9149 33.7317V22.3593ZM24.9533 47.987L39.59 39.631L46.9065 35.4555L36.9352 29.7145L25.4544 36.3242L14.9907 42.3482L24.9533 47.987Z" fill="currentColor"/></svg>
                        </div>
                        @if (Route::has('login'))
                            <nav class="-mx-3 flex flex-1 justify-end">
                                @auth
                                    <a
                                        href="{{ url('/dashboard') }}"
                                        class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
                                    >
                                        Dashboard
                                    </a>
                                @else
                                    <a
                                        href="{{ route('login') }}"
                                        class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
                                    >
                                        Log in
                                    </a>

                                    @if (Route::has('register'))
                                        <a
                                            href="{{ route('register') }}"
                                            class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
                                        >
                                            Register
                                        </a>
                                    @endif
                                @endauth
                            </nav>
                        @endif
                    </header>

                    <main class="mt-6">
                        <div class="grid gap-6 lg:grid-cols-2 lg:gap-8">
                            <a
                                href="https://laravel.com/docs"
                                id="docs-card"
                                class="flex flex-col items-start gap-6 overflow-hidden rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] md:row-span-3 lg:p-10 lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]"
                            >
                                <div id="screenshot-container" class="relative flex w-full flex-1 items-stretch">
                                    <img
                                        src="https://laravel.com/assets/img/welcome/docs-light.svg"
                                        alt="Laravel documentation screenshot"
                                        class="aspect-video h-full w-full flex-1 rounded-[10px] object-top object-cover drop-shadow-[0px_4px_34px_rgba(0,0,0,0.06)] dark:hidden"
                                        onerror="
                                            document.getElementById('screenshot-container').classList.add('!hidden');
                                            document.getElementById('docs-card').classList.add('!row-span-1');
                                            document.getElementById('docs-card-content').classList.add('!flex-row');
                                            document.getElementById('background').classList.add('!hidden');
                                        "
                                    />
                                    <img
                                        src="https://laravel.com/assets/img/welcome/docs-dark.svg"
                                        alt="Laravel documentation screenshot"
                                        class="hidden aspect-video h-full w-full flex-1 rounded-[10px] object-top object-cover drop-shadow-[0px_4px_34px_rgba(0,0,0,0.25)] dark:block"
                                    />
                                    <div
                                        class="absolute -bottom-16 -left-16 h-40 w-[calc(100%+8rem)] bg-gradient-to-b from-transparent via-white to-white dark:via-zinc-900 dark:to-zinc-900"
                                    ></div>
                                </div>

                                <div class="relative flex items-center gap-6 lg:items-end">
                                    <div id="docs-card-content" class="flex items-start gap-6 lg:flex-col">
                                        <div class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16">
                                            <svg class="size-5 sm:size-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path fill="#FF2D20" d="M23 4a1 1 0 0 0-1.447-.894L12.224 7.77a.5.5 0 0 1-.448 0L2.447 3.106A1 1 0 0 0 1 4v13.382a1.99 1.99 0 0 0 1.105 1.79l9.448 4.728c.14.065.293.1.447.1.154-.005.306-.04.447-.105l9.453-4.724a1.99 1.99 0 0 0 1.1-1.789V4ZM3 6.023a.25.25 0 0 1 .362-.223l7.5 3.75a.251.251 0 0 1 .138.223v11.2a.25.25 0 0 1-.362.224l-7.5-3.75a.25.25 0 0 1-.138-.22V6.023Zm18 11.2a.25.25 0 0 1-.138.224l-7.5 3.75a.249.249 0 0 1-.329-.099.249.249 0 0 1-.033-.12V9.772a.251.251 0 0 1 .138-.224l7.5-3.75a.25.25 0 0 1 .362.224v11.2Z"/><path fill="#FF2D20" d="m3.55 1.893 8 4.048a1.008 1.008 0 0 0 .9 0l8-4.048a1 1 0 0 0-.9-1.785l-7.322 3.706a.506.506 0 0 1-.452 0L4.454.108a1 1 0 0 0-.9 1.785H3.55Z"/></svg>
                                        </div>

                                        <div class="pt-3 sm:pt-5 lg:pt-0">
                                            <h2 class="text-xl font-semibold text-black dark:text-white">Documentation</h2>

                                            <p class="mt-4 text-sm/relaxed">
                                                Laravel has wonderful documentation covering every aspect of the framework. Whether you are a newcomer or have prior experience with Laravel, we recommend reading our documentation from beginning to end.
                                            </p>
                                        </div>
                                    </div>

                                    <svg class="size-6 shrink-0 stroke-[#FF2D20]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"/></svg>
                                </div>
                            </a>

                            <a
                                href="https://laracasts.com"
                                class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]"
                            >
                                <div class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16">
                                    <svg class="size-5 sm:size-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><g fill="#FF2D20"><path d="M24 8.25a.5.5 0 0 0-.5-.5H.5a.5.5 0 0 0-.5.5v12a2.5 2.5 0 0 0 2.5 2.5h19a2.5 2.5 0 0 0 2.5-2.5v-12Zm-7.765 5.868a1.221 1.221 0 0 1 0 2.264l-6.626 2.776A1.153 1.153 0 0 1 8 18.123v-5.746a1.151 1.151 0 0 1 1.609-1.035l6.626 2.776ZM19.564 1.677a.25.25 0 0 0-.177-.427H15.6a.106.106 0 0 0-.072.03l-4.54 4.543a.25.25 0 0 0 .177.427h3.783c.027 0 .054-.01.073-.03l4.543-4.543ZM22.071 1.318a.047.047 0 0 0-.045.013l-4.492 4.492a.249.249 0 0 0 .038.385.25.25 0 0 0 .14.042h5.784a.5.5 0 0 0 .5-.5v-2a2.5 2.5 0 0 0-1.925-2.432ZM13.014 1.677a.25.25 0 0 0-.178-.427H9.101a.106.106 0 0 0-.073.03l-4.54 4.543a.25.25 0 0 0 .177.427H8.4a.106.106 0 0 0 .073-.03l4.54-4.543ZM6.513 1.677a.25.25 0 0 0-.177-.427H2.5A2.5 2.5 0 0 0 0 3.75v2a.5.5 0 0 0 .5.5h1.4a.106.106 0 0 0 .073-.03l4.54-4.543Z"/></g></svg>
                                </div>

                                <div class="pt-3 sm:pt-5">
                                    <h2 class="text-xl font-semibold text-black dark:text-white">Laracasts</h2>

                                    <p class="mt-4 text-sm/relaxed">
                                        Laracasts offers thousands of video tutorials on Laravel, PHP, and JavaScript development. Check them out, see for yourself, and massively level up your development skills in the process.
                                    </p>
                                </div>

                                <svg class="size-6 shrink-0 self-center stroke-[#FF2D20]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"/></svg>
                            </a>

                            <a
                                href="https://laravel-news.com"
                                class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]"
                            >
                                <div class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16">
                                    <svg class="size-5 sm:size-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><g fill="#FF2D20"><path d="M8.75 4.5H5.5c-.69 0-1.25.56-1.25 1.25v4.75c0 .69.56 1.25 1.25 1.25h3.25c.69 0 1.25-.56 1.25-1.25V5.75c0-.69-.56-1.25-1.25-1.25Z"/><path d="M24 10a3 3 0 0 0-3-3h-2V2.5a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2V20a3.5 3.5 0 0 0 3.5 3.5h17A3.5 3.5 0 0 0 24 20V10ZM3.5 21.5A1.5 1.5 0 0 1 2 20V3a.5.5 0 0 1 .5-.5h14a.5.5 0 0 1 .5.5v17c0 .295.037.588.11.874a.5.5 0 0 1-.484.625L3.5 21.5ZM22 20a1.5 1.5 0 1 1-3 0V9.5a.5.5 0 0 1 .5-.5H21a1 1 0 0 1 1 1v10Z"/><path d="M12.751 6.047h2a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-2A.75.75 0 0 1 12 7.3v-.5a.75.75 0 0 1 .751-.753ZM12.751 10.047h2a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-2A.75.75 0 0 1 12 11.3v-.5a.75.75 0 0 1 .751-.753ZM4.751 14.047h10a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-10A.75.75 0 0 1 4 15.3v-.5a.75.75 0 0 1 .751-.753ZM4.75 18.047h7.5a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-7.5A.75.75 0 0 1 4 19.3v-.5a.75.75 0 0 1 .75-.753Z"/></g></svg>
                                </div>

                                <div class="pt-3 sm:pt-5">
                                    <h2 class="text-xl font-semibold text-black dark:text-white">Laravel News</h2>

                                    <p class="mt-4 text-sm/relaxed">
                                        Laravel News is a community driven portal and newsletter aggregating all of the latest and most important news in the Laravel ecosystem, including new package releases and tutorials.
                                    </p>
                                </div>

                                <svg class="size-6 shrink-0 self-center stroke-[#FF2D20]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"><path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"/></svg>
                            </a>

                            <div class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]">
                                <div class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16">
                                    <svg class="size-5 sm:size-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <g fill="#FF2D20">
                                            <path
                                                d="M16.597 12.635a.247.247 0 0 0-.08-.237 2.234 2.234 0 0 1-.769-1.68c.001-.195.03-.39.084-.578a.25.25 0 0 0-.09-.267 8.8 8.8 0 0 0-4.826-1.66.25.25 0 0 0-.268.181 2.5 2.5 0 0 1-2.4 1.824.045.045 0 0 0-.045.037 12.255 12.255 0 0 0-.093 3.86.251.251 0 0 0 .208.214c2.22.366 4.367 1.08 6.362 2.118a.252.252 0 0 0 .32-.079 10.09 10.09 0 0 0 1.597-3.733ZM13.616 17.968a.25.25 0 0 0-.063-.407A19.697 19.697 0 0 0 8.91 15.98a.25.25 0 0 0-.287.325c.151.455.334.898.548 1.328.437.827.981 1.594 1.619 2.28a.249.249 0 0 0 .32.044 29.13 29.13 0 0 0 2.506-1.99ZM6.303 14.105a.25.25 0 0 0 .265-.274 13.048 13.048 0 0 1 .205-4.045.062.062 0 0 0-.022-.07 2.5 2.5 0 0 1-.777-.982.25.25 0 0 0-.271-.149 11 11 0 0 0-5.6 2.815.255.255 0 0 0-.075.163c-.008.135-.02.27-.02.406.002.8.084 1.598.246 2.381a.25.25 0 0 0 .303.193 19.924 19.924 0 0 1 5.746-.438ZM9.228 20.914a.25.25 0 0 0 .1-.393 11.53 11.53 0 0 1-1.5-2.22 12.238 12.238 0 0 1-.91-2.465.248.248 0 0 0-.22-.187 18.876 18.876 0 0 0-5.69.33.249.249 0 0 0-.179.336c.838 2.142 2.272 4 4.132 5.353a.254.254 0 0 0 .15.048c1.41-.01 2.807-.282 4.117-.802ZM18.93 12.957l-.005-.008a.25.25 0 0 0-.268-.082 2.21 2.21 0 0 1-.41.081.25.25 0 0 0-.217.2c-.582 2.66-2.127 5.35-5.75 7.843a.248.248 0 0 0-.09.299.25.25 0 0 0 .065.091 28.703 28.703 0 0 0 2.662 2.12.246.246 0 0 0 .209.037c2.579-.701 4.85-2.242 6.456-4.378a.25.25 0 0 0 .048-.189 13.51 13.51 0 0 0-2.7-6.014ZM5.702 7.058a.254.254 0 0 0 .2-.165A2.488 2.488 0 0 1 7.98 5.245a.093.093 0 0 0 .078-.062 19.734 19.734 0 0 1 3.055-4.74.25.25 0 0 0-.21-.41 12.009 12.009 0 0 0-10.4 8.558.25.25 0 0 0 .373.281 12.912 12.912 0 0 1 4.826-1.814ZM10.773 22.052a.25.25 0 0 0-.28-.046c-.758.356-1.55.635-2.365.833a.25.25 0 0 0-.022.48c1.252.43 2.568.65 3.893.65.1 0 .2 0 .3-.008a.25.25 0 0 0 .147-.444c-.526-.424-1.1-.917-1.673-1.465ZM18.744 8.436a.249.249 0 0 0 .15.228 2.246 2.246 0 0 1 1.352 2.054c0 .337-.08.67-.23.972a.25.25 0 0 0 .042.28l.007.009a15.016 15.016 0 0 1 2.52 4.6.25.25 0 0 0 .37.132.25.25 0 0 0 .096-.114c.623-1.464.944-3.039.945-4.63a12.005 12.005 0 0 0-5.78-10.258.25.25 0 0 0-.373.274c.547 2.109.85 4.274.901 6.453ZM9.61 5.38a.25.25 0 0 0 .08.31c.34.24.616.561.8.935a.25.25 0 0 0 .3.127.631.631 0 0 1 .206-.034c2.054.078 4.036.772 5.69 1.991a.251.251 0 0 0 .267.024c.046-.024.093-.047.141-.067a.25.25 0 0 0 .151-.23A29.98 29.98 0 0 0 15.957.764a.25.25 0 0 0-.16-.164 11.924 11.924 0 0 0-2.21-.518.252.252 0 0 0-.215.076A22.456 22.456 0 0 0 9.61 5.38Z"
                                            />
                                        </g>
                                    </svg>
                                </div>

                                <div class="pt-3 sm:pt-5">
                                    <h2 class="text-xl font-semibold text-black dark:text-white">Vibrant Ecosystem</h2>

                                    <p class="mt-4 text-sm/relaxed">
                                        Laravel's robust library of first-party tools and libraries, such as <a href="https://forge.laravel.com" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white dark:focus-visible:ring-[#FF2D20]">Forge</a>, <a href="https://vapor.laravel.com" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Vapor</a>, <a href="https://nova.laravel.com" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Nova</a>, <a href="https://envoyer.io" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Envoyer</a>, and <a href="https://herd.laravel.com" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Herd</a> help you take your projects to the next level. Pair them with powerful open source libraries like <a href="https://laravel.com/docs/billing" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Cashier</a>, <a href="https://laravel.com/docs/dusk" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Dusk</a>, <a href="https://laravel.com/docs/broadcasting" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Echo</a>, <a href="https://laravel.com/docs/horizon" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Horizon</a>, <a href="https://laravel.com/docs/sanctum" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Sanctum</a>, <a href="https://laravel.com/docs/telescope" class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white">Telescope</a>, and more.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </main>

                    <footer class="py-16 text-center text-sm text-black dark:text-white/70">
                        Laravel v{{ Illuminate\Foundation\Application::VERSION }} (PHP v{{ PHP_VERSION }})
                    </footer>
                </div>
            </div>
        </div>
    </body>
</html>

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/resources/js/app.js`:

```js
import './bootstrap';

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/resources/js/bootstrap.js`:

```js
import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/test.sql`:

```sql
INSERT INTO public.movements(
	type_id,
	date_time,
	subject,
	description,
	observation, 
	support_type_id,
	support_number,
	support_date,
	user_insert_id, 
	user_update_id,
	user_edit_id,
	editing,
	created_at,
	updated_at
) VALUES (
    1,
    now()::timestamp(0) without time zone,
    'FULANO', 
	'AAAAAAA AAAAAA AAA',
	'N/O',
	1,
	'0000000001',
	now()::timestamp(0) without time zone,
	1,
	1,
	1,
	false,
	now()::timestamp(0) without time zone,
	now()::timestamp(0) without time zone
);

INSERT INTO public.movement_details(
   	movement_id,
   	article_id,
    quantity,
    user_insert_id,
    user_update_id, 
    created_at,
    updated_at
) VALUES (
    1,
    1,
    10,
    1,
    1,
    now()::timestamp(0) without time zone,
	now()::timestamp(0) without time zone
);

INSERT INTO public.movement_details(
   	movement_id,
   	article_id,
    quantity,
    user_insert_id,
    user_update_id, 
    created_at,
    updated_at
) VALUES (
    1,
    2,
    5,
    1,
    1,
    now()::timestamp(0) without time zone,
	now()::timestamp(0) without time zone
);

INSERT INTO public.movement_details(
   	movement_id,
   	article_id,
    quantity,
    user_insert_id,
    user_update_id, 
    created_at,
    updated_at
) VALUES (
    1,
    3,
    8,
    1,
    1,
    now()::timestamp(0) without time zone,
	now()::timestamp(0) without time zone
);

------------------------

INSERT INTO public.movements(
	type_id,
	date_time,
	subject,
	description,
	observation, 
	support_type_id,
	support_number,
	support_date,
	user_insert_id, 
	user_update_id,
	user_edit_id,
	editing,
	created_at,
	updated_at
) VALUES (
    2,
    now()::timestamp(0) without time zone,
    'V111111 - Cliente Uno', 
	'Email: cliente@cliente.com; Tlf: 1111111111; Edo: ANZOATEGUI; Mpio: FERNANDO DE PEÑALVER; Pqa: SAN MIGUEL;',
	'N/O',
	1,
	'0000000001',
	now()::timestamp(0) without time zone,
	1,
	1,1,
	false,
	now()::timestamp(0) without time zone,
	now()::timestamp(0) without time zone
);

INSERT INTO public.movement_details(
   	movement_id,
   	article_id,
    quantity,
    user_insert_id,
    user_update_id, 
    created_at,
    updated_at
) VALUES (
    2,
    1,
    1,
    1,
    1,
    now()::timestamp(0) without time zone,
	now()::timestamp(0) without time zone
);

INSERT INTO public.movement_details(
   	movement_id,
   	article_id,
    quantity,
    user_insert_id,
    user_update_id, 
    created_at,
    updated_at
) VALUES (
    2,
    2,
    2,
    1,
    1,
    now()::timestamp(0) without time zone,
	now()::timestamp(0) without time zone
);

INSERT INTO public.movement_details(
   	movement_id,
   	article_id,
    quantity,
    user_insert_id,
    user_update_id, 
    created_at,
    updated_at
) VALUES (
    2,
    3,
    3,
    1,
    1,
    now()::timestamp(0) without time zone,
	now()::timestamp(0) without time zone
);


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/factories/MenuFactory.php`:

```php
<?php

namespace Database\Factories;

use App\Models\Menu;
use Illuminate\Database\Eloquent\Factories\Factory;

class MenuFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = Menu::class;

    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            //
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/factories/RoleFactory.php`:

```php
<?php

namespace Database\Factories;

use App\Models\Role;
use Illuminate\Database\Eloquent\Factories\Factory;

class RoleFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = Role::class;

    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            "name" => "admin",
            "description" => "Administrator",
            "menu_ids" => [ 1, 4, 5, 6, 7, 8, 9, 11, 12, 13 ],
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/factories/UserFactory.php`:

```php
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/seeders/RoleSeeder.php`:

```php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Role;

class RoleSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {        
        Role::create([
            "name" => "admin",
            "description" => "Administrator",
            "menu_ids" => [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19 ],
        ]);
        
        Role::create([
            "name" => "user",
            "description" => "User",
            "menu_ids" => [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19 ],
        ]);
        
        Role::create([
            "name" => "superadmin",
            "description" => "Super administrator",
            "menu_ids" => [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19 ],
        ]);
        
        Role::create([
            "name" => "webuser",
            "description" => "Web user",
            "menu_ids" => [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19 ],
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/seeders/DatabaseSeeder.php`:

```php
<?php

namespace Database\Seeders;

// use App\Models\User;
// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // User::factory(10)->create();

        //User::factory()->create([
        //    'name' => 'Test User',
        //    'email' => 'test@example.com',
        //]);        
        $this->call([
            RoleSeeder::class,
            UserSeeder::class,
            MenuSeeder::class            
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/seeders/MenuSeeder.php`:

```php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Menu;

class MenuSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
    
         Menu::create([ // id 1
            "title" => "Panel de control",
            "menu_id" => null,
            "path" => "dashboard",
            "icon" => "dashboard.svg",
            "sort" => 1
        ]);

        Menu::create([ // id 2
            "title" => "Movimientos",
            "menu_id" => null,
            "path" => "#",
            "icon" => "printer",
            "sort" => 2
        ]);

        Menu::create([ // id 3
            "title" => "Entradas",
            "menu_id" => 2,
            "path" => "inputs",
            "icon" => "inputs.svg",
            "sort" => 1
        ]);

        Menu::create([ // id 4
            "title" => "Salidas",
            "menu_id" => 2,
            "path" => "outputs",
            "icon" => "outputs.svg",
            "sort" => 2
        ]);
        
        Menu::create([ // id 5
            "title" => "Reverso de Entradas",
            "menu_id" => 2,
            "path" => "input-reverses",
            "icon" => "input-reverses.svg",
            "sort" => 3
        ]);

        Menu::create([ // id 6
            "title" => "Reverso de Salidas",
            "menu_id" => 2,
            "path" => "output-reverses",
            "icon" => "output-reverses.svg",
            "sort" => 4
        ]);

        Menu::create([ // id 7
            "title" => "Inventario",
            "menu_id" => null,
            "path" => "#",
            "icon" => "printer",
            "sort" => 3
        ]);

        Menu::create([ // id 8
            "title" => "Cierres Diarios",
            "menu_id" => 7,
            "path" => "daily-closings",
            "icon" => "movements.svg",
            "sort" => 1
        ]);

        Menu::create([ // id 9
            "title" => "Stock",
            "menu_id" => 7,
            "path" => "summary",
            "icon" => "summary.svg",
            "sort" => 2
        ]);

        Menu::create([ // id 10
            "title" => "Historial",
            "menu_id" => 7,
            "path" => "movements",
            "icon" => "history.svg",
            "sort" => 1
        ]);

       Menu::create([ // id 11
            "title" => "Admin",
            "menu_id" => null,
            "path" => "#",
            "icon" => "printer",
            "sort" => 4
        ]);
        
        Menu::create([ // id 12
            "title" => "Artículos",
            "menu_id" => 11,
            "path" => "articles",
            "icon" => "articles.svg",
            "sort" => 2
        ]);
        
        Menu::create([ // id 13
            "title" => "Categorías",
            "menu_id" => 11,
            "path" => "categories",
            "icon" => "categories.svg",
            "sort" => 3
        ]);

        Menu::create([ // id 14
            "title" => "Marcas",
            "menu_id" => 11,
            "path" => "marks",
            "icon" => "mark.svg",
            "sort" => 4
        ]);

        Menu::create([ // id 15
            "title" => "Productos",
            "menu_id" => 11,
            "path" => "products",
            "icon" => "products.svg",
            "sort" => 5
        ]);
        
        Menu::create([ // id 16
            "title" => "Usuarios",
            "menu_id" => 11,
            "path" => "users",
            "icon" => "user.svg",
            "sort" => 7
        ]);

        Menu::create([ // id 17
            "title" => "Roles",
            "menu_id" => 11,
            "path" => "roles",
            "icon" => "users.svg",
            "sort" => 6
        ]);

        Menu::create([ // id 18
            "title" => "Menus",
            "menu_id" => 11,
            "path" => "menus",
            "icon" => "menus.svg",
            "sort" => 1
        ]);

        Menu::create([ // id 19
            "title" => "Sub Almacenes",
            "menu_id" => 11,
            "path" => "sub_warehouses",
            "icon" => "menus.svg",
            "sort" => 1
        ]);

    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/seeders/UserSeeder.php`:

```php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;
use App\Models\User;

class UserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
    
        \App\Models\User::factory(1)->create([
            'name' => 'John Doe',
            'email' => 'user@email.ext',
            'email_verified_at' => null,
            'is_admin' => true,
            'role_id' => 1       
          ]
        );
        \App\Models\User::factory(20)->create();
    
    
        /*User::factory()->create([
            "email" => "admin@admin.com",
            "password" => Hash::make("asdf"),
            //"role" => "admin",
            "role_id" => 1,
        ]);

        User::factory()->create([
            "email" => "user@user.com",
            "password" => Hash::make("asdf"),
            //"role" => "user",
            "role_id" => 2,
        ]);
        
        User::factory(14)->create();      */
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/migrations/0001_01_01_000002_create_jobs_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/migrations/2021_07_27_202159_create_menus_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('menus', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->string('path');
            $table->string('icon')
                ->default('dashboard');
            $table->integer('sort');
            $table->foreignId('menu_id')
                ->nullable()
                ->references('id')
                ->on('menus');
            $table->unique(['title', 'menu_id']);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('menus');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/migrations/2021_08_05_121623_alter_users_table_foreign_role.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

//class AlterUsersTableForeignRole extends Migration
return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('users', function (Blueprint $table) {
            //$table->integer('role_id')->default(2);
            $table->foreignId('role_id')->default(2)->references('id')->on('roles');            
            $table->boolean('is_admin')->default(false);
            $table->string('avatar')->nullable();
            $table->softDeletes();           
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('users', function (Blueprint $table) {
               $table->dropColumn('role_id');
               $table->dropColumn('is_admin');
               $table->dropColumn('avatar');
               $table->dropSoftDeletes();              
        });
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/migrations/2024_09_14_175504_add_two_factor_columns_to_users_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Laravel\Fortify\Fortify;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->text('two_factor_secret')
                ->after('password')
                ->nullable();

            $table->text('two_factor_recovery_codes')
                ->after('two_factor_secret')
                ->nullable();

            if (Fortify::confirmsTwoFactorAuthentication()) {
                $table->timestamp('two_factor_confirmed_at')
                    ->after('two_factor_recovery_codes')
                    ->nullable();
            }
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn(array_merge([
                'two_factor_secret',
                'two_factor_recovery_codes',
            ], Fortify::confirmsTwoFactorAuthentication() ? [
                'two_factor_confirmed_at',
            ] : []));
        });
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/migrations/0001_01_01_000000_create_users_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/migrations/2021_08_01_127356_create_roles_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('roles', function (Blueprint $table) {
            $table->id();
            $table->string('name', 30)->unique();
            $table->string('description', 100);
            $table->json('menu_ids');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('roles');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/migrations/2024_09_14_174055_create_personal_access_tokens_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/database/migrations/0001_01_01_000001_create_cache_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/cache.php`:

```php
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/fortify.php`:

```php
<?php

use Laravel\Fortify\Features;

return [

    /*
    |--------------------------------------------------------------------------
    | Fortify Guard
    |--------------------------------------------------------------------------
    |
    | Here you may specify which authentication guard Fortify will use while
    | authenticating users. This value should correspond with one of your
    | guards that is already present in your "auth" configuration file.
    |
    */

    'guard' => 'web',

    /*
    |--------------------------------------------------------------------------
    | Fortify Password Broker
    |--------------------------------------------------------------------------
    |
    | Here you may specify which password broker Fortify can use when a user
    | is resetting their password. This configured value should match one
    | of your password brokers setup in your "auth" configuration file.
    |
    */

    'passwords' => 'users',

    /*
    |--------------------------------------------------------------------------
    | Username / Email
    |--------------------------------------------------------------------------
    |
    | This value defines which model attribute should be considered as your
    | application's "username" field. Typically, this might be the email
    | address of the users but you are free to change this value here.
    |
    | Out of the box, Fortify expects forgot password and reset password
    | requests to have a field named 'email'. If the application uses
    | another name for the field you may define it below as needed.
    |
    */

    'username' => 'email',

    'email' => 'email',

    /*
    |--------------------------------------------------------------------------
    | Lowercase Usernames
    |--------------------------------------------------------------------------
    |
    | This value defines whether usernames should be lowercased before saving
    | them in the database, as some database system string fields are case
    | sensitive. You may disable this for your application if necessary.
    |
    */

    'lowercase_usernames' => true,

    /*
    |--------------------------------------------------------------------------
    | Home Path
    |--------------------------------------------------------------------------
    |
    | Here you may configure the path where users will get redirected during
    | authentication or password reset when the operations are successful
    | and the user is authenticated. You are free to change this value.
    |
    */

    // 'home' => '/home',
    'home' => env('SPA_URL') . '/dashboard',

    /*
    |--------------------------------------------------------------------------
    | Fortify Routes Prefix / Subdomain
    |--------------------------------------------------------------------------
    |
    | Here you may specify which prefix Fortify will assign to all the routes
    | that it registers with the application. If necessary, you may change
    | subdomain under which all of the Fortify routes will be available.
    |
    */

    'prefix' => '',

    'domain' => null,

    /*
    |--------------------------------------------------------------------------
    | Fortify Routes Middleware
    |--------------------------------------------------------------------------
    |
    | Here you may specify which middleware Fortify will assign to the routes
    | that it registers with the application. If necessary, you may change
    | these middleware but typically this provided default is preferred.
    |
    */

    'middleware' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Rate Limiting
    |--------------------------------------------------------------------------
    |
    | By default, Fortify will throttle logins to five requests per minute for
    | every email and IP address combination. However, if you would like to
    | specify a custom rate limiter to call then you may specify it here.
    |
    */

    'limiters' => [
        'login' => 'login',
        'two-factor' => 'two-factor',
    ],

    /*
    |--------------------------------------------------------------------------
    | Register View Routes
    |--------------------------------------------------------------------------
    |
    | Here you may specify if the routes returning views should be disabled as
    | you may not need them when building your own application. This may be
    | especially true if you're writing a custom single-page application.
    |
    */

    'views' => false,

    /*
    |--------------------------------------------------------------------------
    | Features
    |--------------------------------------------------------------------------
    |
    | Some of the Fortify features are optional. You may disable the features
    | by removing them from this array. You're free to only remove some of
    | these features or you can even remove all of these if you need to.
    |
    */

    'features' => [
        Features::registration(),
        Features::resetPasswords(),
        Features::emailVerification(),
        Features::updateProfileInformation(),
        Features::updatePasswords(),
        Features::twoFactorAuthentication([
            'confirm' => true,
            'confirmPassword' => true,
            // 'window' => 0,
        ]),
    ],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/app.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => env('APP_TIMEZONE', 'UTC'),

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/mail.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'encryption' => env('MAIL_ENCRYPTION', 'tls'),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/session.php`:

```php
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/database.php`:

```php
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'pgsql_common' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST_COMMON', '127.0.0.1'),
            'port' => env('DB_PORT_COMMON', '5432'),
            'database' => env('DB_DATABASE_COMMON', 'forge'),
            'username' => env('DB_USERNAME_COMMON', 'forge'),
            'password' => env('DB_PASSWORD_COMMON', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'pgsql_product' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST_PRODUCT', '127.0.0.1'),
            'port' => env('DB_PORT_PRODUCT', '5432'),
            'database' => env('DB_DATABASE_PRODUCT', 'forge'),
            'username' => env('DB_USERNAME_PRODUCT', 'forge'),
            'password' => env('DB_PASSWORD_PRODUCT', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/sanctum.php`:

```php
<?php

use Laravel\Sanctum\Sanctum;

return [

    /*
    |--------------------------------------------------------------------------
    | Stateful Domains
    |--------------------------------------------------------------------------
    |
    | Requests from the following domains / hosts will receive stateful API
    | authentication cookies. Typically, these should include your local
    | and production domains which access your API via a frontend SPA.
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        Sanctum::currentApplicationUrlWithPort()
    ))),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Guards
    |--------------------------------------------------------------------------
    |
    | This array contains the authentication guards that will be checked when
    | Sanctum is trying to authenticate a request. If none of these guards
    | are able to authenticate the request, Sanctum will use the bearer
    | token that's present on an incoming request for authentication.
    |
    */

    'guard' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Expiration Minutes
    |--------------------------------------------------------------------------
    |
    | This value controls the number of minutes until an issued token will be
    | considered expired. This will override any values set in the token's
    | "expires_at" attribute, but first-party sessions are not affected.
    |
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | Token Prefix
    |--------------------------------------------------------------------------
    |
    | Sanctum can prefix new tokens in order to take advantage of numerous
    | security scanning initiatives maintained by open source platforms
    | that notify developers if they commit tokens into repositories.
    |
    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning
    |
    */

    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Middleware
    |--------------------------------------------------------------------------
    |
    | When authenticating your first-party SPA with Sanctum you may need to
    | customize some of the middleware Sanctum uses while processing the
    | request. You may change the middleware listed below as required.
    |
    */

    'middleware' => [
        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
        'encrypt_cookies' => Illuminate\Cookie\Middleware\EncryptCookies::class,
        'validate_csrf_token' => Illuminate\Foundation\Http\Middleware\ValidateCsrfToken::class,
    ],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/cors.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Cross-Origin Resource Sharing (CORS) Configuration
    |--------------------------------------------------------------------------
    |
    | Here you may configure your settings for cross-origin resource sharing
    | or "CORS". This determines what cross-origin operations may execute
    | in web browsers. You are free to adjust these settings as needed.
    |
    | To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    |
    */

    'paths' => [
        //'*',
        'api/*',
        'sanctum/csrf-cookie',
        'login',
        'logout',
        'register',
        'user/password',
        'forgot-password',
        'reset-password',        
        'user/profile-information',
        'email/verification-notification'
    ],
    'allowed_methods' => ['*'],
    'allowed_origins' => ['*'],
    'allowed_origins_patterns' => [],
    'allowed_headers' => ['*'],
    'exposed_headers' => [],
    'max_age' => 0,
    'supports_credentials' => true
];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/auth.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/logging.php`:

```php
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/queue.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/filesystems.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            // 'root' => storage_path('app/private'),
            'root' => storage_path('app/public'),
            'serve' => true,
            'throw' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/config/services.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/composer.lock`:

```lock
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "d8c068f9dda8e2de052321faaf07d353",
    "packages": [
        {
            "name": "bacon/bacon-qr-code",
            "version": "v3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/Bacon/BaconQrCode.git",
                "reference": "510de6eca6248d77d31b339d62437cc995e2fb41"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Bacon/BaconQrCode/zipball/510de6eca6248d77d31b339d62437cc995e2fb41",
                "reference": "510de6eca6248d77d31b339d62437cc995e2fb41",
                "shasum": ""
            },
            "require": {
                "dasprid/enum": "^1.0.3",
                "ext-iconv": "*",
                "php": "^8.1"
            },
            "require-dev": {
                "phly/keep-a-changelog": "^2.12",
                "phpunit/phpunit": "^10.5.11 || 11.0.4",
                "spatie/phpunit-snapshot-assertions": "^5.1.5",
                "squizlabs/php_codesniffer": "^3.9"
            },
            "suggest": {
                "ext-imagick": "to generate QR code images"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "BaconQrCode\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Ben Scholzen 'DASPRiD'",
                    "email": "mail@dasprids.de",
                    "homepage": "https://dasprids.de/",
                    "role": "Developer"
                }
            ],
            "description": "BaconQrCode is a QR code generator for PHP.",
            "homepage": "https://github.com/Bacon/BaconQrCode",
            "support": {
                "issues": "https://github.com/Bacon/BaconQrCode/issues",
                "source": "https://github.com/Bacon/BaconQrCode/tree/v3.0.0"
            },
            "time": "2024-04-18T11:16:25+00:00"
        },
        {
            "name": "brick/math",
            "version": "0.12.1",
            "source": {
                "type": "git",
                "url": "https://github.com/brick/math.git",
                "reference": "f510c0a40911935b77b86859eb5223d58d660df1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/brick/math/zipball/f510c0a40911935b77b86859eb5223d58d660df1",
                "reference": "f510c0a40911935b77b86859eb5223d58d660df1",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "php-coveralls/php-coveralls": "^2.2",
                "phpunit/phpunit": "^10.1",
                "vimeo/psalm": "5.16.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Brick\\Math\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Arbitrary-precision arithmetic library",
            "keywords": [
                "Arbitrary-precision",
                "BigInteger",
                "BigRational",
                "arithmetic",
                "bigdecimal",
                "bignum",
                "bignumber",
                "brick",
                "decimal",
                "integer",
                "math",
                "mathematics",
                "rational"
            ],
            "support": {
                "issues": "https://github.com/brick/math/issues",
                "source": "https://github.com/brick/math/tree/0.12.1"
            },
            "funding": [
                {
                    "url": "https://github.com/BenMorel",
                    "type": "github"
                }
            ],
            "time": "2023-11-29T23:19:16+00:00"
        },
        {
            "name": "carbonphp/carbon-doctrine-types",
            "version": "3.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/CarbonPHP/carbon-doctrine-types.git",
                "reference": "18ba5ddfec8976260ead6e866180bd5d2f71aa1d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/CarbonPHP/carbon-doctrine-types/zipball/18ba5ddfec8976260ead6e866180bd5d2f71aa1d",
                "reference": "18ba5ddfec8976260ead6e866180bd5d2f71aa1d",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "conflict": {
                "doctrine/dbal": "<4.0.0 || >=5.0.0"
            },
            "require-dev": {
                "doctrine/dbal": "^4.0.0",
                "nesbot/carbon": "^2.71.0 || ^3.0.0",
                "phpunit/phpunit": "^10.3"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Carbon\\Doctrine\\": "src/Carbon/Doctrine/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "KyleKatarn",
                    "email": "kylekatarnls@gmail.com"
                }
            ],
            "description": "Types to use Carbon in Doctrine",
            "keywords": [
                "carbon",
                "date",
                "datetime",
                "doctrine",
                "time"
            ],
            "support": {
                "issues": "https://github.com/CarbonPHP/carbon-doctrine-types/issues",
                "source": "https://github.com/CarbonPHP/carbon-doctrine-types/tree/3.2.0"
            },
            "funding": [
                {
                    "url": "https://github.com/kylekatarnls",
                    "type": "github"
                },
                {
                    "url": "https://opencollective.com/Carbon",
                    "type": "open_collective"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/nesbot/carbon",
                    "type": "tidelift"
                }
            ],
            "time": "2024-02-09T16:56:22+00:00"
        },
        {
            "name": "dasprid/enum",
            "version": "1.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/DASPRiD/Enum.git",
                "reference": "8dfd07c6d2cf31c8da90c53b83c026c7696dda90"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/DASPRiD/Enum/zipball/8dfd07c6d2cf31c8da90c53b83c026c7696dda90",
                "reference": "8dfd07c6d2cf31c8da90c53b83c026c7696dda90",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1 <9.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^7 || ^8 || ^9 || ^10 || ^11",
                "squizlabs/php_codesniffer": "*"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "DASPRiD\\Enum\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Ben Scholzen 'DASPRiD'",
                    "email": "mail@dasprids.de",
                    "homepage": "https://dasprids.de/",
                    "role": "Developer"
                }
            ],
            "description": "PHP 7.1 enum implementation",
            "keywords": [
                "enum",
                "map"
            ],
            "support": {
                "issues": "https://github.com/DASPRiD/Enum/issues",
                "source": "https://github.com/DASPRiD/Enum/tree/1.0.6"
            },
            "time": "2024-08-09T14:30:48+00:00"
        },
        {
            "name": "dflydev/dot-access-data",
            "version": "v3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/dflydev/dflydev-dot-access-data.git",
                "reference": "a23a2bf4f31d3518f3ecb38660c95715dfead60f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/dflydev/dflydev-dot-access-data/zipball/a23a2bf4f31d3518f3ecb38660c95715dfead60f",
                "reference": "a23a2bf4f31d3518f3ecb38660c95715dfead60f",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "require-dev": {
                "phpstan/phpstan": "^0.12.42",
                "phpunit/phpunit": "^7.5 || ^8.5 || ^9.3",
                "scrutinizer/ocular": "1.6.0",
                "squizlabs/php_codesniffer": "^3.5",
                "vimeo/psalm": "^4.0.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Dflydev\\DotAccessData\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Dragonfly Development Inc.",
                    "email": "info@dflydev.com",
                    "homepage": "http://dflydev.com"
                },
                {
                    "name": "Beau Simensen",
                    "email": "beau@dflydev.com",
                    "homepage": "http://beausimensen.com"
                },
                {
                    "name": "Carlos Frutos",
                    "email": "carlos@kiwing.it",
                    "homepage": "https://github.com/cfrutos"
                },
                {
                    "name": "Colin O'Dell",
                    "email": "colinodell@gmail.com",
                    "homepage": "https://www.colinodell.com"
                }
            ],
            "description": "Given a deep data structure, access data by dot notation.",
            "homepage": "https://github.com/dflydev/dflydev-dot-access-data",
            "keywords": [
                "access",
                "data",
                "dot",
                "notation"
            ],
            "support": {
                "issues": "https://github.com/dflydev/dflydev-dot-access-data/issues",
                "source": "https://github.com/dflydev/dflydev-dot-access-data/tree/v3.0.3"
            },
            "time": "2024-07-08T12:26:09+00:00"
        },
        {
            "name": "doctrine/inflector",
            "version": "2.0.10",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/inflector.git",
                "reference": "5817d0659c5b50c9b950feb9af7b9668e2c436bc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/inflector/zipball/5817d0659c5b50c9b950feb9af7b9668e2c436bc",
                "reference": "5817d0659c5b50c9b950feb9af7b9668e2c436bc",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "require-dev": {
                "doctrine/coding-standard": "^11.0",
                "phpstan/phpstan": "^1.8",
                "phpstan/phpstan-phpunit": "^1.1",
                "phpstan/phpstan-strict-rules": "^1.3",
                "phpunit/phpunit": "^8.5 || ^9.5",
                "vimeo/psalm": "^4.25 || ^5.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Inflector\\": "lib/Doctrine/Inflector"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Guilherme Blanco",
                    "email": "guilhermeblanco@gmail.com"
                },
                {
                    "name": "Roman Borschel",
                    "email": "roman@code-factory.org"
                },
                {
                    "name": "Benjamin Eberlei",
                    "email": "kontakt@beberlei.de"
                },
                {
                    "name": "Jonathan Wage",
                    "email": "jonwage@gmail.com"
                },
                {
                    "name": "Johannes Schmitt",
                    "email": "schmittjoh@gmail.com"
                }
            ],
            "description": "PHP Doctrine Inflector is a small library that can perform string manipulations with regard to upper/lowercase and singular/plural forms of words.",
            "homepage": "https://www.doctrine-project.org/projects/inflector.html",
            "keywords": [
                "inflection",
                "inflector",
                "lowercase",
                "manipulation",
                "php",
                "plural",
                "singular",
                "strings",
                "uppercase",
                "words"
            ],
            "support": {
                "issues": "https://github.com/doctrine/inflector/issues",
                "source": "https://github.com/doctrine/inflector/tree/2.0.10"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finflector",
                    "type": "tidelift"
                }
            ],
            "time": "2024-02-18T20:23:39+00:00"
        },
        {
            "name": "doctrine/lexer",
            "version": "3.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/lexer.git",
                "reference": "31ad66abc0fc9e1a1f2d9bc6a42668d2fbbcd6dd"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/lexer/zipball/31ad66abc0fc9e1a1f2d9bc6a42668d2fbbcd6dd",
                "reference": "31ad66abc0fc9e1a1f2d9bc6a42668d2fbbcd6dd",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "doctrine/coding-standard": "^12",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^10.5",
                "psalm/plugin-phpunit": "^0.18.3",
                "vimeo/psalm": "^5.21"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Common\\Lexer\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Guilherme Blanco",
                    "email": "guilhermeblanco@gmail.com"
                },
                {
                    "name": "Roman Borschel",
                    "email": "roman@code-factory.org"
                },
                {
                    "name": "Johannes Schmitt",
                    "email": "schmittjoh@gmail.com"
                }
            ],
            "description": "PHP Doctrine Lexer parser library that can be used in Top-Down, Recursive Descent Parsers.",
            "homepage": "https://www.doctrine-project.org/projects/lexer.html",
            "keywords": [
                "annotations",
                "docblock",
                "lexer",
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/doctrine/lexer/issues",
                "source": "https://github.com/doctrine/lexer/tree/3.0.1"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Flexer",
                    "type": "tidelift"
                }
            ],
            "time": "2024-02-05T11:56:58+00:00"
        },
        {
            "name": "dragonmantank/cron-expression",
            "version": "v3.3.3",
            "source": {
                "type": "git",
                "url": "https://github.com/dragonmantank/cron-expression.git",
                "reference": "adfb1f505deb6384dc8b39804c5065dd3c8c8c0a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/dragonmantank/cron-expression/zipball/adfb1f505deb6384dc8b39804c5065dd3c8c8c0a",
                "reference": "adfb1f505deb6384dc8b39804c5065dd3c8c8c0a",
                "shasum": ""
            },
            "require": {
                "php": "^7.2|^8.0",
                "webmozart/assert": "^1.0"
            },
            "replace": {
                "mtdowling/cron-expression": "^1.0"
            },
            "require-dev": {
                "phpstan/extension-installer": "^1.0",
                "phpstan/phpstan": "^1.0",
                "phpstan/phpstan-webmozart-assert": "^1.0",
                "phpunit/phpunit": "^7.0|^8.0|^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Cron\\": "src/Cron/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Chris Tankersley",
                    "email": "chris@ctankersley.com",
                    "homepage": "https://github.com/dragonmantank"
                }
            ],
            "description": "CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due",
            "keywords": [
                "cron",
                "schedule"
            ],
            "support": {
                "issues": "https://github.com/dragonmantank/cron-expression/issues",
                "source": "https://github.com/dragonmantank/cron-expression/tree/v3.3.3"
            },
            "funding": [
                {
                    "url": "https://github.com/dragonmantank",
                    "type": "github"
                }
            ],
            "time": "2023-08-10T19:36:49+00:00"
        },
        {
            "name": "egulias/email-validator",
            "version": "4.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/egulias/EmailValidator.git",
                "reference": "ebaaf5be6c0286928352e054f2d5125608e5405e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/egulias/EmailValidator/zipball/ebaaf5be6c0286928352e054f2d5125608e5405e",
                "reference": "ebaaf5be6c0286928352e054f2d5125608e5405e",
                "shasum": ""
            },
            "require": {
                "doctrine/lexer": "^2.0 || ^3.0",
                "php": ">=8.1",
                "symfony/polyfill-intl-idn": "^1.26"
            },
            "require-dev": {
                "phpunit/phpunit": "^10.2",
                "vimeo/psalm": "^5.12"
            },
            "suggest": {
                "ext-intl": "PHP Internationalization Libraries are required to use the SpoofChecking validation"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Egulias\\EmailValidator\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Eduardo Gulias Davis"
                }
            ],
            "description": "A library for validating emails against several RFCs",
            "homepage": "https://github.com/egulias/EmailValidator",
            "keywords": [
                "email",
                "emailvalidation",
                "emailvalidator",
                "validation",
                "validator"
            ],
            "support": {
                "issues": "https://github.com/egulias/EmailValidator/issues",
                "source": "https://github.com/egulias/EmailValidator/tree/4.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/egulias",
                    "type": "github"
                }
            ],
            "time": "2023-10-06T06:47:41+00:00"
        },
        {
            "name": "fruitcake/php-cors",
            "version": "v1.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/fruitcake/php-cors.git",
                "reference": "3d158f36e7875e2f040f37bc0573956240a5a38b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/fruitcake/php-cors/zipball/3d158f36e7875e2f040f37bc0573956240a5a38b",
                "reference": "3d158f36e7875e2f040f37bc0573956240a5a38b",
                "shasum": ""
            },
            "require": {
                "php": "^7.4|^8.0",
                "symfony/http-foundation": "^4.4|^5.4|^6|^7"
            },
            "require-dev": {
                "phpstan/phpstan": "^1.4",
                "phpunit/phpunit": "^9",
                "squizlabs/php_codesniffer": "^3.5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.2-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Fruitcake\\Cors\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fruitcake",
                    "homepage": "https://fruitcake.nl"
                },
                {
                    "name": "Barryvdh",
                    "email": "barryvdh@gmail.com"
                }
            ],
            "description": "Cross-origin resource sharing library for the Symfony HttpFoundation",
            "homepage": "https://github.com/fruitcake/php-cors",
            "keywords": [
                "cors",
                "laravel",
                "symfony"
            ],
            "support": {
                "issues": "https://github.com/fruitcake/php-cors/issues",
                "source": "https://github.com/fruitcake/php-cors/tree/v1.3.0"
            },
            "funding": [
                {
                    "url": "https://fruitcake.nl",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/barryvdh",
                    "type": "github"
                }
            ],
            "time": "2023-10-12T05:21:21+00:00"
        },
        {
            "name": "graham-campbell/result-type",
            "version": "v1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/GrahamCampbell/Result-Type.git",
                "reference": "3ba905c11371512af9d9bdd27d99b782216b6945"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/GrahamCampbell/Result-Type/zipball/3ba905c11371512af9d9bdd27d99b782216b6945",
                "reference": "3ba905c11371512af9d9bdd27d99b782216b6945",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0",
                "phpoption/phpoption": "^1.9.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^8.5.39 || ^9.6.20 || ^10.5.28"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "GrahamCampbell\\ResultType\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                }
            ],
            "description": "An Implementation Of The Result Type",
            "keywords": [
                "Graham Campbell",
                "GrahamCampbell",
                "Result Type",
                "Result-Type",
                "result"
            ],
            "support": {
                "issues": "https://github.com/GrahamCampbell/Result-Type/issues",
                "source": "https://github.com/GrahamCampbell/Result-Type/tree/v1.1.3"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/graham-campbell/result-type",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-20T21:45:45+00:00"
        },
        {
            "name": "guzzlehttp/guzzle",
            "version": "7.9.2",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/guzzle.git",
                "reference": "d281ed313b989f213357e3be1a179f02196ac99b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/d281ed313b989f213357e3be1a179f02196ac99b",
                "reference": "d281ed313b989f213357e3be1a179f02196ac99b",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "guzzlehttp/promises": "^1.5.3 || ^2.0.3",
                "guzzlehttp/psr7": "^2.7.0",
                "php": "^7.2.5 || ^8.0",
                "psr/http-client": "^1.0",
                "symfony/deprecation-contracts": "^2.2 || ^3.0"
            },
            "provide": {
                "psr/http-client-implementation": "1.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "ext-curl": "*",
                "guzzle/client-integration-tests": "3.0.2",
                "php-http/message-factory": "^1.1",
                "phpunit/phpunit": "^8.5.39 || ^9.6.20",
                "psr/log": "^1.1 || ^2.0 || ^3.0"
            },
            "suggest": {
                "ext-curl": "Required for CURL handler support",
                "ext-intl": "Required for Internationalized Domain Name (IDN) support",
                "psr/log": "Required for using the Log middleware"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                }
            },
            "autoload": {
                "files": [
                    "src/functions_include.php"
                ],
                "psr-4": {
                    "GuzzleHttp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Jeremy Lindblom",
                    "email": "jeremeamia@gmail.com",
                    "homepage": "https://github.com/jeremeamia"
                },
                {
                    "name": "George Mponos",
                    "email": "gmponos@gmail.com",
                    "homepage": "https://github.com/gmponos"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://github.com/sagikazarmark"
                },
                {
                    "name": "Tobias Schultze",
                    "email": "webmaster@tubo-world.de",
                    "homepage": "https://github.com/Tobion"
                }
            ],
            "description": "Guzzle is a PHP HTTP client library",
            "keywords": [
                "client",
                "curl",
                "framework",
                "http",
                "http client",
                "psr-18",
                "psr-7",
                "rest",
                "web service"
            ],
            "support": {
                "issues": "https://github.com/guzzle/guzzle/issues",
                "source": "https://github.com/guzzle/guzzle/tree/7.9.2"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/guzzle",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-24T11:22:20+00:00"
        },
        {
            "name": "guzzlehttp/promises",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/promises.git",
                "reference": "6ea8dd08867a2a42619d65c3deb2c0fcbf81c8f8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/promises/zipball/6ea8dd08867a2a42619d65c3deb2c0fcbf81c8f8",
                "reference": "6ea8dd08867a2a42619d65c3deb2c0fcbf81c8f8",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "phpunit/phpunit": "^8.5.39 || ^9.6.20"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Promise\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                },
                {
                    "name": "Tobias Schultze",
                    "email": "webmaster@tubo-world.de",
                    "homepage": "https://github.com/Tobion"
                }
            ],
            "description": "Guzzle promises library",
            "keywords": [
                "promise"
            ],
            "support": {
                "issues": "https://github.com/guzzle/promises/issues",
                "source": "https://github.com/guzzle/promises/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/promises",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-18T10:29:17+00:00"
        },
        {
            "name": "guzzlehttp/psr7",
            "version": "2.7.0",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/psr7.git",
                "reference": "a70f5c95fb43bc83f07c9c948baa0dc1829bf201"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/psr7/zipball/a70f5c95fb43bc83f07c9c948baa0dc1829bf201",
                "reference": "a70f5c95fb43bc83f07c9c948baa0dc1829bf201",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0",
                "psr/http-factory": "^1.0",
                "psr/http-message": "^1.1 || ^2.0",
                "ralouphie/getallheaders": "^3.0"
            },
            "provide": {
                "psr/http-factory-implementation": "1.0",
                "psr/http-message-implementation": "1.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "http-interop/http-factory-tests": "0.9.0",
                "phpunit/phpunit": "^8.5.39 || ^9.6.20"
            },
            "suggest": {
                "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Psr7\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "George Mponos",
                    "email": "gmponos@gmail.com",
                    "homepage": "https://github.com/gmponos"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://github.com/sagikazarmark"
                },
                {
                    "name": "Tobias Schultze",
                    "email": "webmaster@tubo-world.de",
                    "homepage": "https://github.com/Tobion"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://sagikazarmark.hu"
                }
            ],
            "description": "PSR-7 message implementation that also provides common utility methods",
            "keywords": [
                "http",
                "message",
                "psr-7",
                "request",
                "response",
                "stream",
                "uri",
                "url"
            ],
            "support": {
                "issues": "https://github.com/guzzle/psr7/issues",
                "source": "https://github.com/guzzle/psr7/tree/2.7.0"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/psr7",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-18T11:15:46+00:00"
        },
        {
            "name": "guzzlehttp/uri-template",
            "version": "v1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/uri-template.git",
                "reference": "ecea8feef63bd4fef1f037ecb288386999ecc11c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/uri-template/zipball/ecea8feef63bd4fef1f037ecb288386999ecc11c",
                "reference": "ecea8feef63bd4fef1f037ecb288386999ecc11c",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0",
                "symfony/polyfill-php80": "^1.24"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "phpunit/phpunit": "^8.5.36 || ^9.6.15",
                "uri-template/tests": "1.0.0"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\UriTemplate\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "George Mponos",
                    "email": "gmponos@gmail.com",
                    "homepage": "https://github.com/gmponos"
                },
                {
                    "name": "Tobias Nyholm",
                    "email": "tobias.nyholm@gmail.com",
                    "homepage": "https://github.com/Nyholm"
                }
            ],
            "description": "A polyfill class for uri_template of PHP",
            "keywords": [
                "guzzlehttp",
                "uri-template"
            ],
            "support": {
                "issues": "https://github.com/guzzle/uri-template/issues",
                "source": "https://github.com/guzzle/uri-template/tree/v1.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/guzzlehttp/uri-template",
                    "type": "tidelift"
                }
            ],
            "time": "2023-12-03T19:50:20+00:00"
        },
        {
            "name": "laravel/fortify",
            "version": "v1.24.1",
            "source": {
                "type": "git",
                "url": "https://github.com/laravel/fortify.git",
                "reference": "8158ba0960bb5f4aae509d01d74a95e16e30de20"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/laravel/fortify/zipball/8158ba0960bb5f4aae509d01d74a95e16e30de20",
                "reference": "8158ba0960bb5f4aae509d01d74a95e16e30de20",
                "shasum": ""
            },
            "require": {
                "bacon/bacon-qr-code": "^3.0",
                "ext-json": "*",
                "illuminate/support": "^10.0|^11.0",
                "php": "^8.1",
                "pragmarx/google2fa": "^8.0",
                "symfony/console": "^6.0|^7.0"
            },
            "require-dev": {
                "mockery/mockery": "^1.0",
                "orchestra/testbench": "^8.16|^9.0",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^10.4"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.x-dev"
                },
                "laravel": {
                    "providers": [
                        "Laravel\\Fortify\\FortifyServiceProvider"
                    ]
                }
            },
            "autoload": {
                "psr-4": {
                    "Laravel\\Fortify\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Taylor Otwell",
                    "email": "taylor@laravel.com"
                }
            ],
            "description": "Backend controllers and scaffolding for Laravel authentication.",
            "keywords": [
                "auth",
                "laravel"
            ],
            "support": {
                "issues": "https://github.com/laravel/fortify/issues",
                "source": "https://github.com/laravel/fortify"
            },
            "time": "2024-09-03T10:02:14+00:00"
        },
        {
            "name": "laravel/framework",
            "version": "v11.23.5",
            "source": {
                "type": "git",
                "url": "https://github.com/laravel/framework.git",
                "reference": "16b31ab0e1dad5cb2ed6dcc1818c02f02fc48453"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/laravel/framework/zipball/16b31ab0e1dad5cb2ed6dcc1818c02f02fc48453",
                "reference": "16b31ab0e1dad5cb2ed6dcc1818c02f02fc48453",
                "shasum": ""
            },
            "require": {
                "brick/math": "^0.9.3|^0.10.2|^0.11|^0.12",
                "composer-runtime-api": "^2.2",
                "doctrine/inflector": "^2.0.5",
                "dragonmantank/cron-expression": "^3.3.2",
                "egulias/email-validator": "^3.2.1|^4.0",
                "ext-ctype": "*",
                "ext-filter": "*",
                "ext-hash": "*",
                "ext-mbstring": "*",
                "ext-openssl": "*",
                "ext-session": "*",
                "ext-tokenizer": "*",
                "fruitcake/php-cors": "^1.3",
                "guzzlehttp/guzzle": "^7.8",
                "guzzlehttp/uri-template": "^1.0",
                "laravel/prompts": "^0.1.18",
                "laravel/serializable-closure": "^1.3",
                "league/commonmark": "^2.2.1",
                "league/flysystem": "^3.8.0",
                "monolog/monolog": "^3.0",
                "nesbot/carbon": "^2.72.2|^3.0",
                "nunomaduro/termwind": "^2.0",
                "php": "^8.2",
                "psr/container": "^1.1.1|^2.0.1",
                "psr/log": "^1.0|^2.0|^3.0",
                "psr/simple-cache": "^1.0|^2.0|^3.0",
                "ramsey/uuid": "^4.7",
                "symfony/console": "^7.0",
                "symfony/error-handler": "^7.0",
                "symfony/finder": "^7.0",
                "symfony/http-foundation": "^7.0",
                "symfony/http-kernel": "^7.0",
                "symfony/mailer": "^7.0",
                "symfony/mime": "^7.0",
                "symfony/polyfill-php83": "^1.28",
                "symfony/process": "^7.0",
                "symfony/routing": "^7.0",
                "symfony/uid": "^7.0",
                "symfony/var-dumper": "^7.0",
                "tijsverkoyen/css-to-inline-styles": "^2.2.5",
                "vlucas/phpdotenv": "^5.4.1",
                "voku/portable-ascii": "^2.0"
            },
            "conflict": {
                "mockery/mockery": "1.6.8",
                "tightenco/collect": "<5.5.33"
            },
            "provide": {
                "psr/container-implementation": "1.1|2.0",
                "psr/log-implementation": "1.0|2.0|3.0",
                "psr/simple-cache-implementation": "1.0|2.0|3.0"
            },
            "replace": {
                "illuminate/auth": "self.version",
                "illuminate/broadcasting": "self.version",
                "illuminate/bus": "self.version",
                "illuminate/cache": "self.version",
                "illuminate/collections": "self.version",
                "illuminate/concurrency": "self.version",
                "illuminate/conditionable": "self.version",
                "illuminate/config": "self.version",
                "illuminate/console": "self.version",
                "illuminate/container": "self.version",
                "illuminate/contracts": "self.version",
                "illuminate/cookie": "self.version",
                "illuminate/database": "self.version",
                "illuminate/encryption": "self.version",
                "illuminate/events": "self.version",
                "illuminate/filesystem": "self.version",
                "illuminate/hashing": "self.version",
                "illuminate/http": "self.version",
                "illuminate/log": "self.version",
                "illuminate/macroable": "self.version",
                "illuminate/mail": "self.version",
                "illuminate/notifications": "self.version",
                "illuminate/pagination": "self.version",
                "illuminate/pipeline": "self.version",
                "illuminate/process": "self.version",
                "illuminate/queue": "self.version",
                "illuminate/redis": "self.version",
                "illuminate/routing": "self.version",
                "illuminate/session": "self.version",
                "illuminate/support": "self.version",
                "illuminate/testing": "self.version",
                "illuminate/translation": "self.version",
                "illuminate/validation": "self.version",
                "illuminate/view": "self.version",
                "spatie/once": "*"
            },
            "require-dev": {
                "ably/ably-php": "^1.0",
                "aws/aws-sdk-php": "^3.235.5",
                "ext-gmp": "*",
                "fakerphp/faker": "^1.23",
                "league/flysystem-aws-s3-v3": "^3.0",
                "league/flysystem-ftp": "^3.0",
                "league/flysystem-path-prefixing": "^3.3",
                "league/flysystem-read-only": "^3.3",
                "league/flysystem-sftp-v3": "^3.0",
                "mockery/mockery": "^1.6",
                "nyholm/psr7": "^1.2",
                "orchestra/testbench-core": "^9.4.0",
                "pda/pheanstalk": "^5.0",
                "phpstan/phpstan": "^1.11.5",
                "phpunit/phpunit": "^10.5|^11.0",
                "predis/predis": "^2.0.2",
                "resend/resend-php": "^0.10.0",
                "symfony/cache": "^7.0",
                "symfony/http-client": "^7.0",
                "symfony/psr-http-message-bridge": "^7.0"
            },
            "suggest": {
                "ably/ably-php": "Required to use the Ably broadcast driver (^1.0).",
                "aws/aws-sdk-php": "Required to use the SQS queue driver, DynamoDb failed job storage, and SES mail driver (^3.235.5).",
                "brianium/paratest": "Required to run tests in parallel (^7.0|^8.0).",
                "ext-apcu": "Required to use the APC cache driver.",
                "ext-fileinfo": "Required to use the Filesystem class.",
                "ext-ftp": "Required to use the Flysystem FTP driver.",
                "ext-gd": "Required to use Illuminate\\Http\\Testing\\FileFactory::image().",
                "ext-memcached": "Required to use the memcache cache driver.",
                "ext-pcntl": "Required to use all features of the queue worker and console signal trapping.",
                "ext-pdo": "Required to use all database features.",
                "ext-posix": "Required to use all features of the queue worker.",
                "ext-redis": "Required to use the Redis cache and queue drivers (^4.0|^5.0|^6.0).",
                "fakerphp/faker": "Required to use the eloquent factory builder (^1.9.1).",
                "filp/whoops": "Required for friendly error pages in development (^2.14.3).",
                "laravel/tinker": "Required to use the tinker console command (^2.0).",
                "league/flysystem-aws-s3-v3": "Required to use the Flysystem S3 driver (^3.0).",
                "league/flysystem-ftp": "Required to use the Flysystem FTP driver (^3.0).",
                "league/flysystem-path-prefixing": "Required to use the scoped driver (^3.3).",
                "league/flysystem-read-only": "Required to use read-only disks (^3.3)",
                "league/flysystem-sftp-v3": "Required to use the Flysystem SFTP driver (^3.0).",
                "mockery/mockery": "Required to use mocking (^1.6).",
                "nyholm/psr7": "Required to use PSR-7 bridging features (^1.2).",
                "pda/pheanstalk": "Required to use the beanstalk queue driver (^5.0).",
                "phpunit/phpunit": "Required to use assertions and run tests (^10.5|^11.0).",
                "predis/predis": "Required to use the predis connector (^2.0.2).",
                "psr/http-message": "Required to allow Storage::put to accept a StreamInterface (^1.0).",
                "pusher/pusher-php-server": "Required to use the Pusher broadcast driver (^6.0|^7.0).",
                "resend/resend-php": "Required to enable support for the Resend mail transport (^0.10.0).",
                "symfony/cache": "Required to PSR-6 cache bridge (^7.0).",
                "symfony/filesystem": "Required to enable support for relative symbolic links (^7.0).",
                "symfony/http-client": "Required to enable support for the Symfony API mail transports (^7.0).",
                "symfony/mailgun-mailer": "Required to enable support for the Mailgun mail transport (^7.0).",
                "symfony/postmark-mailer": "Required to enable support for the Postmark mail transport (^7.0).",
                "symfony/psr-http-message-bridge": "Required to use PSR-7 bridging features (^7.0)."
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "11.x-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/Illuminate/Collections/helpers.php",
                    "src/Illuminate/Events/functions.php",
                    "src/Illuminate/Filesystem/functions.php",
                    "src/Illuminate/Foundation/helpers.php",
                    "src/Illuminate/Log/functions.php",
                    "src/Illuminate/Support/helpers.php"
                ],
                "psr-4": {
                    "Illuminate\\": "src/Illuminate/",
                    "Illuminate\\Support\\": [
                        "src/Illuminate/Macroable/",
                        "src/Illuminate/Collections/",
                        "src/Illuminate/Conditionable/"
                    ]
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Taylor Otwell",
                    "email": "taylor@laravel.com"
                }
            ],
            "description": "The Laravel Framework.",
            "homepage": "https://laravel.com",
            "keywords": [
                "framework",
                "laravel"
            ],
            "support": {
                "issues": "https://github.com/laravel/framework/issues",
                "source": "https://github.com/laravel/framework"
            },
            "time": "2024-09-13T13:36:30+00:00"
        },
        {
            "name": "laravel/prompts",
            "version": "v0.1.25",
            "source": {
                "type": "git",
                "url": "https://github.com/laravel/prompts.git",
                "reference": "7b4029a84c37cb2725fc7f011586e2997040bc95"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/laravel/prompts/zipball/7b4029a84c37cb2725fc7f011586e2997040bc95",
                "reference": "7b4029a84c37cb2725fc7f011586e2997040bc95",
                "shasum": ""
            },
            "require": {
                "ext-mbstring": "*",
                "illuminate/collections": "^10.0|^11.0",
                "php": "^8.1",
                "symfony/console": "^6.2|^7.0"
            },
            "conflict": {
                "illuminate/console": ">=10.17.0 <10.25.0",
                "laravel/framework": ">=10.17.0 <10.25.0"
            },
            "require-dev": {
                "mockery/mockery": "^1.5",
                "pestphp/pest": "^2.3",
                "phpstan/phpstan": "^1.11",
                "phpstan/phpstan-mockery": "^1.1"
            },
            "suggest": {
                "ext-pcntl": "Required for the spinner to be animated."
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "0.1.x-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/helpers.php"
                ],
                "psr-4": {
                    "Laravel\\Prompts\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Add beautiful and user-friendly forms to your command-line applications.",
            "support": {
                "issues": "https://github.com/laravel/prompts/issues",
                "source": "https://github.com/laravel/prompts/tree/v0.1.25"
            },
            "time": "2024-08-12T22:06:33+00:00"
        },
        {
            "name": "laravel/sanctum",
            "version": "v4.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/laravel/sanctum.git",
                "reference": "9cfc0ce80cabad5334efff73ec856339e8ec1ac1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/laravel/sanctum/zipball/9cfc0ce80cabad5334efff73ec856339e8ec1ac1",
                "reference": "9cfc0ce80cabad5334efff73ec856339e8ec1ac1",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "illuminate/console": "^11.0",
                "illuminate/contracts": "^11.0",
                "illuminate/database": "^11.0",
                "illuminate/support": "^11.0",
                "php": "^8.2",
                "symfony/console": "^7.0"
            },
            "require-dev": {
                "mockery/mockery": "^1.6",
                "orchestra/testbench": "^9.0",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^10.5"
            },
            "type": "library",
            "extra": {
                "laravel": {
                    "providers": [
                        "Laravel\\Sanctum\\SanctumServiceProvider"
                    ]
                }
            },
            "autoload": {
                "psr-4": {
                    "Laravel\\Sanctum\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Taylor Otwell",
                    "email": "taylor@laravel.com"
                }
            ],
            "description": "Laravel Sanctum provides a featherweight authentication system for SPAs and simple APIs.",
            "keywords": [
                "auth",
                "laravel",
                "sanctum"
            ],
            "support": {
                "issues": "https://github.com/laravel/sanctum/issues",
                "source": "https://github.com/laravel/sanctum"
            },
            "time": "2024-04-10T19:39:58+00:00"
        },
        {
            "name": "laravel/serializable-closure",
            "version": "v1.3.4",
            "source": {
                "type": "git",
                "url": "https://github.com/laravel/serializable-closure.git",
                "reference": "61b87392d986dc49ad5ef64e75b1ff5fee24ef81"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/laravel/serializable-closure/zipball/61b87392d986dc49ad5ef64e75b1ff5fee24ef81",
                "reference": "61b87392d986dc49ad5ef64e75b1ff5fee24ef81",
                "shasum": ""
            },
            "require": {
                "php": "^7.3|^8.0"
            },
            "require-dev": {
                "illuminate/support": "^8.0|^9.0|^10.0|^11.0",
                "nesbot/carbon": "^2.61|^3.0",
                "pestphp/pest": "^1.21.3",
                "phpstan/phpstan": "^1.8.2",
                "symfony/var-dumper": "^5.4.11|^6.2.0|^7.0.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Laravel\\SerializableClosure\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Taylor Otwell",
                    "email": "taylor@laravel.com"
                },
                {
                    "name": "Nuno Maduro",
                    "email": "nuno@laravel.com"
                }
            ],
            "description": "Laravel Serializable Closure provides an easy and secure way to serialize closures in PHP.",
            "keywords": [
                "closure",
                "laravel",
                "serializable"
            ],
            "support": {
                "issues": "https://github.com/laravel/serializable-closure/issues",
                "source": "https://github.com/laravel/serializable-closure"
            },
            "time": "2024-08-02T07:48:17+00:00"
        },
        {
            "name": "laravel/tinker",
            "version": "v2.9.0",
            "source": {
                "type": "git",
                "url": "https://github.com/laravel/tinker.git",
                "reference": "502e0fe3f0415d06d5db1f83a472f0f3b754bafe"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/laravel/tinker/zipball/502e0fe3f0415d06d5db1f83a472f0f3b754bafe",
                "reference": "502e0fe3f0415d06d5db1f83a472f0f3b754bafe",
                "shasum": ""
            },
            "require": {
                "illuminate/console": "^6.0|^7.0|^8.0|^9.0|^10.0|^11.0",
                "illuminate/contracts": "^6.0|^7.0|^8.0|^9.0|^10.0|^11.0",
                "illuminate/support": "^6.0|^7.0|^8.0|^9.0|^10.0|^11.0",
                "php": "^7.2.5|^8.0",
                "psy/psysh": "^0.11.1|^0.12.0",
                "symfony/var-dumper": "^4.3.4|^5.0|^6.0|^7.0"
            },
            "require-dev": {
                "mockery/mockery": "~1.3.3|^1.4.2",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^8.5.8|^9.3.3"
            },
            "suggest": {
                "illuminate/database": "The Illuminate Database package (^6.0|^7.0|^8.0|^9.0|^10.0|^11.0)."
            },
            "type": "library",
            "extra": {
                "laravel": {
                    "providers": [
                        "Laravel\\Tinker\\TinkerServiceProvider"
                    ]
                }
            },
            "autoload": {
                "psr-4": {
                    "Laravel\\Tinker\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Taylor Otwell",
                    "email": "taylor@laravel.com"
                }
            ],
            "description": "Powerful REPL for the Laravel framework.",
            "keywords": [
                "REPL",
                "Tinker",
                "laravel",
                "psysh"
            ],
            "support": {
                "issues": "https://github.com/laravel/tinker/issues",
                "source": "https://github.com/laravel/tinker/tree/v2.9.0"
            },
            "time": "2024-01-04T16:10:04+00:00"
        },
        {
            "name": "league/commonmark",
            "version": "2.5.3",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/commonmark.git",
                "reference": "b650144166dfa7703e62a22e493b853b58d874b0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/commonmark/zipball/b650144166dfa7703e62a22e493b853b58d874b0",
                "reference": "b650144166dfa7703e62a22e493b853b58d874b0",
                "shasum": ""
            },
            "require": {
                "ext-mbstring": "*",
                "league/config": "^1.1.1",
                "php": "^7.4 || ^8.0",
                "psr/event-dispatcher": "^1.0",
                "symfony/deprecation-contracts": "^2.1 || ^3.0",
                "symfony/polyfill-php80": "^1.16"
            },
            "require-dev": {
                "cebe/markdown": "^1.0",
                "commonmark/cmark": "0.31.1",
                "commonmark/commonmark.js": "0.31.1",
                "composer/package-versions-deprecated": "^1.8",
                "embed/embed": "^4.4",
                "erusev/parsedown": "^1.0",
                "ext-json": "*",
                "github/gfm": "0.29.0",
                "michelf/php-markdown": "^1.4 || ^2.0",
                "nyholm/psr7": "^1.5",
                "phpstan/phpstan": "^1.8.2",
                "phpunit/phpunit": "^9.5.21 || ^10.5.9 || ^11.0.0",
                "scrutinizer/ocular": "^1.8.1",
                "symfony/finder": "^5.3 | ^6.0 || ^7.0",
                "symfony/yaml": "^2.3 | ^3.0 | ^4.0 | ^5.0 | ^6.0 || ^7.0",
                "unleashedtech/php-coding-standard": "^3.1.1",
                "vimeo/psalm": "^4.24.0 || ^5.0.0"
            },
            "suggest": {
                "symfony/yaml": "v2.3+ required if using the Front Matter extension"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "2.6-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "League\\CommonMark\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Colin O'Dell",
                    "email": "colinodell@gmail.com",
                    "homepage": "https://www.colinodell.com",
                    "role": "Lead Developer"
                }
            ],
            "description": "Highly-extensible PHP Markdown parser which fully supports the CommonMark spec and GitHub-Flavored Markdown (GFM)",
            "homepage": "https://commonmark.thephpleague.com",
            "keywords": [
                "commonmark",
                "flavored",
                "gfm",
                "github",
                "github-flavored",
                "markdown",
                "md",
                "parser"
            ],
            "support": {
                "docs": "https://commonmark.thephpleague.com/",
                "forum": "https://github.com/thephpleague/commonmark/discussions",
                "issues": "https://github.com/thephpleague/commonmark/issues",
                "rss": "https://github.com/thephpleague/commonmark/releases.atom",
                "source": "https://github.com/thephpleague/commonmark"
            },
            "funding": [
                {
                    "url": "https://www.colinodell.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://www.paypal.me/colinpodell/10.00",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/colinodell",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/league/commonmark",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-16T11:46:16+00:00"
        },
        {
            "name": "league/config",
            "version": "v1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/config.git",
                "reference": "754b3604fb2984c71f4af4a9cbe7b57f346ec1f3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/config/zipball/754b3604fb2984c71f4af4a9cbe7b57f346ec1f3",
                "reference": "754b3604fb2984c71f4af4a9cbe7b57f346ec1f3",
                "shasum": ""
            },
            "require": {
                "dflydev/dot-access-data": "^3.0.1",
                "nette/schema": "^1.2",
                "php": "^7.4 || ^8.0"
            },
            "require-dev": {
                "phpstan/phpstan": "^1.8.2",
                "phpunit/phpunit": "^9.5.5",
                "scrutinizer/ocular": "^1.8.1",
                "unleashedtech/php-coding-standard": "^3.1",
                "vimeo/psalm": "^4.7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.2-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "League\\Config\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Colin O'Dell",
                    "email": "colinodell@gmail.com",
                    "homepage": "https://www.colinodell.com",
                    "role": "Lead Developer"
                }
            ],
            "description": "Define configuration arrays with strict schemas and access values with dot notation",
            "homepage": "https://config.thephpleague.com",
            "keywords": [
                "array",
                "config",
                "configuration",
                "dot",
                "dot-access",
                "nested",
                "schema"
            ],
            "support": {
                "docs": "https://config.thephpleague.com/",
                "issues": "https://github.com/thephpleague/config/issues",
                "rss": "https://github.com/thephpleague/config/releases.atom",
                "source": "https://github.com/thephpleague/config"
            },
            "funding": [
                {
                    "url": "https://www.colinodell.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://www.paypal.me/colinpodell/10.00",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/colinodell",
                    "type": "github"
                }
            ],
            "time": "2022-12-11T20:36:23+00:00"
        },
        {
            "name": "league/flysystem",
            "version": "3.28.0",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/flysystem.git",
                "reference": "e611adab2b1ae2e3072fa72d62c62f52c2bf1f0c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/flysystem/zipball/e611adab2b1ae2e3072fa72d62c62f52c2bf1f0c",
                "reference": "e611adab2b1ae2e3072fa72d62c62f52c2bf1f0c",
                "shasum": ""
            },
            "require": {
                "league/flysystem-local": "^3.0.0",
                "league/mime-type-detection": "^1.0.0",
                "php": "^8.0.2"
            },
            "conflict": {
                "async-aws/core": "<1.19.0",
                "async-aws/s3": "<1.14.0",
                "aws/aws-sdk-php": "3.209.31 || 3.210.0",
                "guzzlehttp/guzzle": "<7.0",
                "guzzlehttp/ringphp": "<1.1.1",
                "phpseclib/phpseclib": "3.0.15",
                "symfony/http-client": "<5.2"
            },
            "require-dev": {
                "async-aws/s3": "^1.5 || ^2.0",
                "async-aws/simple-s3": "^1.1 || ^2.0",
                "aws/aws-sdk-php": "^3.295.10",
                "composer/semver": "^3.0",
                "ext-fileinfo": "*",
                "ext-ftp": "*",
                "ext-mongodb": "^1.3",
                "ext-zip": "*",
                "friendsofphp/php-cs-fixer": "^3.5",
                "google/cloud-storage": "^1.23",
                "guzzlehttp/psr7": "^2.6",
                "microsoft/azure-storage-blob": "^1.1",
                "mongodb/mongodb": "^1.2",
                "phpseclib/phpseclib": "^3.0.36",
                "phpstan/phpstan": "^1.10",
                "phpunit/phpunit": "^9.5.11|^10.0",
                "sabre/dav": "^4.6.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "League\\Flysystem\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Frank de Jonge",
                    "email": "info@frankdejonge.nl"
                }
            ],
            "description": "File storage abstraction for PHP",
            "keywords": [
                "WebDAV",
                "aws",
                "cloud",
                "file",
                "files",
                "filesystem",
                "filesystems",
                "ftp",
                "s3",
                "sftp",
                "storage"
            ],
            "support": {
                "issues": "https://github.com/thephpleague/flysystem/issues",
                "source": "https://github.com/thephpleague/flysystem/tree/3.28.0"
            },
            "time": "2024-05-22T10:09:12+00:00"
        },
        {
            "name": "league/flysystem-local",
            "version": "3.28.0",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/flysystem-local.git",
                "reference": "13f22ea8be526ea58c2ddff9e158ef7c296e4f40"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/flysystem-local/zipball/13f22ea8be526ea58c2ddff9e158ef7c296e4f40",
                "reference": "13f22ea8be526ea58c2ddff9e158ef7c296e4f40",
                "shasum": ""
            },
            "require": {
                "ext-fileinfo": "*",
                "league/flysystem": "^3.0.0",
                "league/mime-type-detection": "^1.0.0",
                "php": "^8.0.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "League\\Flysystem\\Local\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Frank de Jonge",
                    "email": "info@frankdejonge.nl"
                }
            ],
            "description": "Local filesystem adapter for Flysystem.",
            "keywords": [
                "Flysystem",
                "file",
                "files",
                "filesystem",
                "local"
            ],
            "support": {
                "source": "https://github.com/thephpleague/flysystem-local/tree/3.28.0"
            },
            "time": "2024-05-06T20:05:52+00:00"
        },
        {
            "name": "league/mime-type-detection",
            "version": "1.15.0",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/mime-type-detection.git",
                "reference": "ce0f4d1e8a6f4eb0ddff33f57c69c50fd09f4301"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/mime-type-detection/zipball/ce0f4d1e8a6f4eb0ddff33f57c69c50fd09f4301",
                "reference": "ce0f4d1e8a6f4eb0ddff33f57c69c50fd09f4301",
                "shasum": ""
            },
            "require": {
                "ext-fileinfo": "*",
                "php": "^7.4 || ^8.0"
            },
            "require-dev": {
                "friendsofphp/php-cs-fixer": "^3.2",
                "phpstan/phpstan": "^0.12.68",
                "phpunit/phpunit": "^8.5.8 || ^9.3 || ^10.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "League\\MimeTypeDetection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Frank de Jonge",
                    "email": "info@frankdejonge.nl"
                }
            ],
            "description": "Mime-type detection for Flysystem",
            "support": {
                "issues": "https://github.com/thephpleague/mime-type-detection/issues",
                "source": "https://github.com/thephpleague/mime-type-detection/tree/1.15.0"
            },
            "funding": [
                {
                    "url": "https://github.com/frankdejonge",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/league/flysystem",
                    "type": "tidelift"
                }
            ],
            "time": "2024-01-28T23:22:08+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "3.7.0",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "f4393b648b78a5408747de94fca38beb5f7e9ef8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/f4393b648b78a5408747de94fca38beb5f7e9ef8",
                "reference": "f4393b648b78a5408747de94fca38beb5f7e9ef8",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "psr/log": "^2.0 || ^3.0"
            },
            "provide": {
                "psr/log-implementation": "3.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^7 || ^8",
                "ext-json": "*",
                "graylog2/gelf-php": "^1.4.2 || ^2.0",
                "guzzlehttp/guzzle": "^7.4.5",
                "guzzlehttp/psr7": "^2.2",
                "mongodb/mongodb": "^1.8",
                "php-amqplib/php-amqplib": "~2.4 || ^3",
                "phpstan/phpstan": "^1.9",
                "phpstan/phpstan-deprecation-rules": "^1.0",
                "phpstan/phpstan-strict-rules": "^1.4",
                "phpunit/phpunit": "^10.5.17",
                "predis/predis": "^1.1 || ^2",
                "ruflin/elastica": "^7",
                "symfony/mailer": "^5.4 || ^6",
                "symfony/mime": "^5.4 || ^6"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-curl": "Required to send log messages using the IFTTTHandler, the LogglyHandler, the SendGridHandler, the SlackWebhookHandler or the TelegramBotHandler",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "ext-openssl": "Required to send log messages using SSL",
                "ext-sockets": "Allow sending log messages to a Syslog server (via UDP driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "https://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "https://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/3.7.0"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-28T09:40:51+00:00"
        },
        {
            "name": "nesbot/carbon",
            "version": "3.8.0",
            "source": {
                "type": "git",
                "url": "https://github.com/briannesbitt/Carbon.git",
                "reference": "bbd3eef89af8ba66a3aa7952b5439168fbcc529f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/briannesbitt/Carbon/zipball/bbd3eef89af8ba66a3aa7952b5439168fbcc529f",
                "reference": "bbd3eef89af8ba66a3aa7952b5439168fbcc529f",
                "shasum": ""
            },
            "require": {
                "carbonphp/carbon-doctrine-types": "*",
                "ext-json": "*",
                "php": "^8.1",
                "psr/clock": "^1.0",
                "symfony/clock": "^6.3 || ^7.0",
                "symfony/polyfill-mbstring": "^1.0",
                "symfony/translation": "^4.4.18 || ^5.2.1|| ^6.0 || ^7.0"
            },
            "provide": {
                "psr/clock-implementation": "1.0"
            },
            "require-dev": {
                "doctrine/dbal": "^3.6.3 || ^4.0",
                "doctrine/orm": "^2.15.2 || ^3.0",
                "friendsofphp/php-cs-fixer": "^3.57.2",
                "kylekatarnls/multi-tester": "^2.5.3",
                "ondrejmirtes/better-reflection": "^6.25.0.4",
                "phpmd/phpmd": "^2.15.0",
                "phpstan/extension-installer": "^1.3.1",
                "phpstan/phpstan": "^1.11.2",
                "phpunit/phpunit": "^10.5.20",
                "squizlabs/php_codesniffer": "^3.9.0"
            },
            "bin": [
                "bin/carbon"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev",
                    "dev-2.x": "2.x-dev"
                },
                "laravel": {
                    "providers": [
                        "Carbon\\Laravel\\ServiceProvider"
                    ]
                },
                "phpstan": {
                    "includes": [
                        "extension.neon"
                    ]
                }
            },
            "autoload": {
                "psr-4": {
                    "Carbon\\": "src/Carbon/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Brian Nesbitt",
                    "email": "brian@nesbot.com",
                    "homepage": "https://markido.com"
                },
                {
                    "name": "kylekatarnls",
                    "homepage": "https://github.com/kylekatarnls"
                }
            ],
            "description": "An API extension for DateTime that supports 281 different languages.",
            "homepage": "https://carbon.nesbot.com",
            "keywords": [
                "date",
                "datetime",
                "time"
            ],
            "support": {
                "docs": "https://carbon.nesbot.com/docs",
                "issues": "https://github.com/briannesbitt/Carbon/issues",
                "source": "https://github.com/briannesbitt/Carbon"
            },
            "funding": [
                {
                    "url": "https://github.com/sponsors/kylekatarnls",
                    "type": "github"
                },
                {
                    "url": "https://opencollective.com/Carbon#sponsor",
                    "type": "opencollective"
                },
                {
                    "url": "https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&utm_medium=referral&utm_campaign=readme",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-19T06:22:39+00:00"
        },
        {
            "name": "nette/schema",
            "version": "v1.3.0",
            "source": {
                "type": "git",
                "url": "https://github.com/nette/schema.git",
                "reference": "a6d3a6d1f545f01ef38e60f375d1cf1f4de98188"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nette/schema/zipball/a6d3a6d1f545f01ef38e60f375d1cf1f4de98188",
                "reference": "a6d3a6d1f545f01ef38e60f375d1cf1f4de98188",
                "shasum": ""
            },
            "require": {
                "nette/utils": "^4.0",
                "php": "8.1 - 8.3"
            },
            "require-dev": {
                "nette/tester": "^2.4",
                "phpstan/phpstan-nette": "^1.0",
                "tracy/tracy": "^2.8"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.3-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause",
                "GPL-2.0-only",
                "GPL-3.0-only"
            ],
            "authors": [
                {
                    "name": "David Grudl",
                    "homepage": "https://davidgrudl.com"
                },
                {
                    "name": "Nette Community",
                    "homepage": "https://nette.org/contributors"
                }
            ],
            "description": "📐 Nette Schema: validating data structures against a given Schema.",
            "homepage": "https://nette.org",
            "keywords": [
                "config",
                "nette"
            ],
            "support": {
                "issues": "https://github.com/nette/schema/issues",
                "source": "https://github.com/nette/schema/tree/v1.3.0"
            },
            "time": "2023-12-11T11:54:22+00:00"
        },
        {
            "name": "nette/utils",
            "version": "v4.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/nette/utils.git",
                "reference": "736c567e257dbe0fcf6ce81b4d6dbe05c6899f96"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nette/utils/zipball/736c567e257dbe0fcf6ce81b4d6dbe05c6899f96",
                "reference": "736c567e257dbe0fcf6ce81b4d6dbe05c6899f96",
                "shasum": ""
            },
            "require": {
                "php": "8.0 - 8.4"
            },
            "conflict": {
                "nette/finder": "<3",
                "nette/schema": "<1.2.2"
            },
            "require-dev": {
                "jetbrains/phpstorm-attributes": "dev-master",
                "nette/tester": "^2.5",
                "phpstan/phpstan": "^1.0",
                "tracy/tracy": "^2.9"
            },
            "suggest": {
                "ext-gd": "to use Image",
                "ext-iconv": "to use Strings::webalize(), toAscii(), chr() and reverse()",
                "ext-intl": "to use Strings::webalize(), toAscii(), normalize() and compare()",
                "ext-json": "to use Nette\\Utils\\Json",
                "ext-mbstring": "to use Strings::lower() etc...",
                "ext-tokenizer": "to use Nette\\Utils\\Reflection::getUseStatements()"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause",
                "GPL-2.0-only",
                "GPL-3.0-only"
            ],
            "authors": [
                {
                    "name": "David Grudl",
                    "homepage": "https://davidgrudl.com"
                },
                {
                    "name": "Nette Community",
                    "homepage": "https://nette.org/contributors"
                }
            ],
            "description": "🛠  Nette Utils: lightweight utilities for string & array manipulation, image handling, safe JSON encoding/decoding, validation, slug or strong password generating etc.",
            "homepage": "https://nette.org",
            "keywords": [
                "array",
                "core",
                "datetime",
                "images",
                "json",
                "nette",
                "paginator",
                "password",
                "slugify",
                "string",
                "unicode",
                "utf-8",
                "utility",
                "validation"
            ],
            "support": {
                "issues": "https://github.com/nette/utils/issues",
                "source": "https://github.com/nette/utils/tree/v4.0.5"
            },
            "time": "2024-08-07T15:39:19+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v5.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "23c79fbbfb725fb92af9bcf41065c8e9a0d49ddb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/23c79fbbfb725fb92af9bcf41065c8e9a0d49ddb",
                "reference": "23c79fbbfb725fb92af9bcf41065c8e9a0d49ddb",
                "shasum": ""
            },
            "require": {
                "ext-ctype": "*",
                "ext-json": "*",
                "ext-tokenizer": "*",
                "php": ">=7.4"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v5.2.0"
            },
            "time": "2024-09-15T16:40:33+00:00"
        },
        {
            "name": "nunomaduro/termwind",
            "version": "v2.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/nunomaduro/termwind.git",
                "reference": "e5f21eade88689536c0cdad4c3cd75f3ed26e01a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nunomaduro/termwind/zipball/e5f21eade88689536c0cdad4c3cd75f3ed26e01a",
                "reference": "e5f21eade88689536c0cdad4c3cd75f3ed26e01a",
                "shasum": ""
            },
            "require": {
                "ext-mbstring": "*",
                "php": "^8.2",
                "symfony/console": "^7.0.4"
            },
            "require-dev": {
                "ergebnis/phpstan-rules": "^2.2.0",
                "illuminate/console": "^11.1.1",
                "laravel/pint": "^1.15.0",
                "mockery/mockery": "^1.6.11",
                "pestphp/pest": "^2.34.6",
                "phpstan/phpstan": "^1.10.66",
                "phpstan/phpstan-strict-rules": "^1.5.2",
                "symfony/var-dumper": "^7.0.4",
                "thecodingmachine/phpstan-strict-rules": "^1.0.0"
            },
            "type": "library",
            "extra": {
                "laravel": {
                    "providers": [
                        "Termwind\\Laravel\\TermwindServiceProvider"
                    ]
                },
                "branch-alias": {
                    "dev-2.x": "2.x-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/Functions.php"
                ],
                "psr-4": {
                    "Termwind\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nuno Maduro",
                    "email": "enunomaduro@gmail.com"
                }
            ],
            "description": "Its like Tailwind CSS, but for the console.",
            "keywords": [
                "cli",
                "console",
                "css",
                "package",
                "php",
                "style"
            ],
            "support": {
                "issues": "https://github.com/nunomaduro/termwind/issues",
                "source": "https://github.com/nunomaduro/termwind/tree/v2.1.0"
            },
            "funding": [
                {
                    "url": "https://www.paypal.com/paypalme/enunomaduro",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/nunomaduro",
                    "type": "github"
                },
                {
                    "url": "https://github.com/xiCO2k",
                    "type": "github"
                }
            ],
            "time": "2024-09-05T15:25:50+00:00"
        },
        {
            "name": "nwidart/laravel-modules",
            "version": "v11.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/nWidart/laravel-modules.git",
                "reference": "2ae13812f055a85d7063e90366884cd327877821"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nWidart/laravel-modules/zipball/2ae13812f055a85d7063e90366884cd327877821",
                "reference": "2ae13812f055a85d7063e90366884cd327877821",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "php": ">=8.2",
                "wikimedia/composer-merge-plugin": "^2.1"
            },
            "require-dev": {
                "friendsofphp/php-cs-fixer": "^v3.52",
                "laravel/framework": "^v11.0",
                "laravel/pint": "^1.16",
                "mockery/mockery": "^1.6",
                "orchestra/testbench": "^v9.0",
                "phpstan/phpstan": "^1.4",
                "phpunit/phpunit": "^11.0",
                "spatie/phpunit-snapshot-assertions": "^5.0"
            },
            "type": "library",
            "extra": {
                "laravel": {
                    "providers": [
                        "Nwidart\\Modules\\LaravelModulesServiceProvider"
                    ],
                    "aliases": {
                        "Module": "Nwidart\\Modules\\Facades\\Module"
                    }
                },
                "branch-alias": {
                    "dev-master": "11.0-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/helpers.php"
                ],
                "psr-4": {
                    "Nwidart\\Modules\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Widart",
                    "email": "n.widart@gmail.com",
                    "homepage": "https://nicolaswidart.com",
                    "role": "Developer"
                }
            ],
            "description": "Laravel Module management",
            "keywords": [
                "laravel",
                "module",
                "modules",
                "nwidart",
                "rad"
            ],
            "support": {
                "issues": "https://github.com/nWidart/laravel-modules/issues",
                "source": "https://github.com/nWidart/laravel-modules/tree/v11.1.0"
            },
            "funding": [
                {
                    "url": "https://github.com/dcblogdev",
                    "type": "github"
                },
                {
                    "url": "https://github.com/nwidart",
                    "type": "github"
                }
            ],
            "time": "2024-09-13T19:24:08+00:00"
        },
        {
            "name": "paragonie/constant_time_encoding",
            "version": "v3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/paragonie/constant_time_encoding.git",
                "reference": "df1e7fde177501eee2037dd159cf04f5f301a512"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/paragonie/constant_time_encoding/zipball/df1e7fde177501eee2037dd159cf04f5f301a512",
                "reference": "df1e7fde177501eee2037dd159cf04f5f301a512",
                "shasum": ""
            },
            "require": {
                "php": "^8"
            },
            "require-dev": {
                "phpunit/phpunit": "^9",
                "vimeo/psalm": "^4|^5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "ParagonIE\\ConstantTime\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Paragon Initiative Enterprises",
                    "email": "security@paragonie.com",
                    "homepage": "https://paragonie.com",
                    "role": "Maintainer"
                },
                {
                    "name": "Steve 'Sc00bz' Thomas",
                    "email": "steve@tobtu.com",
                    "homepage": "https://www.tobtu.com",
                    "role": "Original Developer"
                }
            ],
            "description": "Constant-time Implementations of RFC 4648 Encoding (Base-64, Base-32, Base-16)",
            "keywords": [
                "base16",
                "base32",
                "base32_decode",
                "base32_encode",
                "base64",
                "base64_decode",
                "base64_encode",
                "bin2hex",
                "encoding",
                "hex",
                "hex2bin",
                "rfc4648"
            ],
            "support": {
                "email": "info@paragonie.com",
                "issues": "https://github.com/paragonie/constant_time_encoding/issues",
                "source": "https://github.com/paragonie/constant_time_encoding"
            },
            "time": "2024-05-08T12:36:18+00:00"
        },
        {
            "name": "phpoption/phpoption",
            "version": "1.9.3",
            "source": {
                "type": "git",
                "url": "https://github.com/schmittjoh/php-option.git",
                "reference": "e3fac8b24f56113f7cb96af14958c0dd16330f54"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/schmittjoh/php-option/zipball/e3fac8b24f56113f7cb96af14958c0dd16330f54",
                "reference": "e3fac8b24f56113f7cb96af14958c0dd16330f54",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "phpunit/phpunit": "^8.5.39 || ^9.6.20 || ^10.5.28"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                },
                "branch-alias": {
                    "dev-master": "1.9-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpOption\\": "src/PhpOption/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "authors": [
                {
                    "name": "Johannes M. Schmitt",
                    "email": "schmittjoh@gmail.com",
                    "homepage": "https://github.com/schmittjoh"
                },
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                }
            ],
            "description": "Option Type for PHP",
            "keywords": [
                "language",
                "option",
                "php",
                "type"
            ],
            "support": {
                "issues": "https://github.com/schmittjoh/php-option/issues",
                "source": "https://github.com/schmittjoh/php-option/tree/1.9.3"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpoption/phpoption",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-20T21:41:07+00:00"
        },
        {
            "name": "pragmarx/google2fa",
            "version": "v8.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/antonioribeiro/google2fa.git",
                "reference": "6f8d87ebd5afbf7790bde1ffc7579c7c705e0fad"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/antonioribeiro/google2fa/zipball/6f8d87ebd5afbf7790bde1ffc7579c7c705e0fad",
                "reference": "6f8d87ebd5afbf7790bde1ffc7579c7c705e0fad",
                "shasum": ""
            },
            "require": {
                "paragonie/constant_time_encoding": "^1.0|^2.0|^3.0",
                "php": "^7.1|^8.0"
            },
            "require-dev": {
                "phpstan/phpstan": "^1.9",
                "phpunit/phpunit": "^7.5.15|^8.5|^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "PragmaRX\\Google2FA\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Antonio Carlos Ribeiro",
                    "email": "acr@antoniocarlosribeiro.com",
                    "role": "Creator & Designer"
                }
            ],
            "description": "A One Time Password Authentication package, compatible with Google Authenticator.",
            "keywords": [
                "2fa",
                "Authentication",
                "Two Factor Authentication",
                "google2fa"
            ],
            "support": {
                "issues": "https://github.com/antonioribeiro/google2fa/issues",
                "source": "https://github.com/antonioribeiro/google2fa/tree/v8.0.3"
            },
            "time": "2024-09-05T11:56:40+00:00"
        },
        {
            "name": "psr/clock",
            "version": "1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/clock.git",
                "reference": "e41a24703d4560fd0acb709162f73b8adfc3aa0d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/clock/zipball/e41a24703d4560fd0acb709162f73b8adfc3aa0d",
                "reference": "e41a24703d4560fd0acb709162f73b8adfc3aa0d",
                "shasum": ""
            },
            "require": {
                "php": "^7.0 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Psr\\Clock\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for reading the clock.",
            "homepage": "https://github.com/php-fig/clock",
            "keywords": [
                "clock",
                "now",
                "psr",
                "psr-20",
                "time"
            ],
            "support": {
                "issues": "https://github.com/php-fig/clock/issues",
                "source": "https://github.com/php-fig/clock/tree/1.0.0"
            },
            "time": "2022-11-25T14:36:26+00:00"
        },
        {
            "name": "psr/container",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/container.git",
                "reference": "c71ecc56dfe541dbd90c5360474fbc405f8d5963"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/container/zipball/c71ecc56dfe541dbd90c5360474fbc405f8d5963",
                "reference": "c71ecc56dfe541dbd90c5360474fbc405f8d5963",
                "shasum": ""
            },
            "require": {
                "php": ">=7.4.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Container\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common Container Interface (PHP FIG PSR-11)",
            "homepage": "https://github.com/php-fig/container",
            "keywords": [
                "PSR-11",
                "container",
                "container-interface",
                "container-interop",
                "psr"
            ],
            "support": {
                "issues": "https://github.com/php-fig/container/issues",
                "source": "https://github.com/php-fig/container/tree/2.0.2"
            },
            "time": "2021-11-05T16:47:00+00:00"
        },
        {
            "name": "psr/event-dispatcher",
            "version": "1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/event-dispatcher.git",
                "reference": "dbefd12671e8a14ec7f180cab83036ed26714bb0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/event-dispatcher/zipball/dbefd12671e8a14ec7f180cab83036ed26714bb0",
                "reference": "dbefd12671e8a14ec7f180cab83036ed26714bb0",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\EventDispatcher\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Standard interfaces for event handling.",
            "keywords": [
                "events",
                "psr",
                "psr-14"
            ],
            "support": {
                "issues": "https://github.com/php-fig/event-dispatcher/issues",
                "source": "https://github.com/php-fig/event-dispatcher/tree/1.0.0"
            },
            "time": "2019-01-08T18:20:26+00:00"
        },
        {
            "name": "psr/http-client",
            "version": "1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-client.git",
                "reference": "bb5906edc1c324c9a05aa0873d40117941e5fa90"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-client/zipball/bb5906edc1c324c9a05aa0873d40117941e5fa90",
                "reference": "bb5906edc1c324c9a05aa0873d40117941e5fa90",
                "shasum": ""
            },
            "require": {
                "php": "^7.0 || ^8.0",
                "psr/http-message": "^1.0 || ^2.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Client\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP clients",
            "homepage": "https://github.com/php-fig/http-client",
            "keywords": [
                "http",
                "http-client",
                "psr",
                "psr-18"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-client"
            },
            "time": "2023-09-23T14:17:50+00:00"
        },
        {
            "name": "psr/http-factory",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-factory.git",
                "reference": "2b4765fddfe3b508ac62f829e852b1501d3f6e8a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-factory/zipball/2b4765fddfe3b508ac62f829e852b1501d3f6e8a",
                "reference": "2b4765fddfe3b508ac62f829e852b1501d3f6e8a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/http-message": "^1.0 || ^2.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "PSR-17: Common interfaces for PSR-7 HTTP message factories",
            "keywords": [
                "factory",
                "http",
                "message",
                "psr",
                "psr-17",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-factory"
            },
            "time": "2024-04-15T12:06:14+00:00"
        },
        {
            "name": "psr/http-message",
            "version": "2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-message.git",
                "reference": "402d35bcb92c70c026d1a6a9883f06b2ead23d71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-message/zipball/402d35bcb92c70c026d1a6a9883f06b2ead23d71",
                "reference": "402d35bcb92c70c026d1a6a9883f06b2ead23d71",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP messages",
            "homepage": "https://github.com/php-fig/http-message",
            "keywords": [
                "http",
                "http-message",
                "psr",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-message/tree/2.0"
            },
            "time": "2023-04-04T09:54:51+00:00"
        },
        {
            "name": "psr/log",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "f16e1d5863e37f8d8c2a01719f5b34baa2b714d3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/f16e1d5863e37f8d8c2a01719f5b34baa2b714d3",
                "reference": "f16e1d5863e37f8d8c2a01719f5b34baa2b714d3",
                "shasum": ""
            },
            "require": {
                "php": ">=8.0.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/3.0.2"
            },
            "time": "2024-09-11T13:17:53+00:00"
        },
        {
            "name": "psr/simple-cache",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/simple-cache.git",
                "reference": "764e0b3939f5ca87cb904f570ef9be2d78a07865"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/simple-cache/zipball/764e0b3939f5ca87cb904f570ef9be2d78a07865",
                "reference": "764e0b3939f5ca87cb904f570ef9be2d78a07865",
                "shasum": ""
            },
            "require": {
                "php": ">=8.0.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\SimpleCache\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interfaces for simple caching",
            "keywords": [
                "cache",
                "caching",
                "psr",
                "psr-16",
                "simple-cache"
            ],
            "support": {
                "source": "https://github.com/php-fig/simple-cache/tree/3.0.0"
            },
            "time": "2021-10-29T13:26:27+00:00"
        },
        {
            "name": "psy/psysh",
            "version": "v0.12.4",
            "source": {
                "type": "git",
                "url": "https://github.com/bobthecow/psysh.git",
                "reference": "2fd717afa05341b4f8152547f142cd2f130f6818"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/bobthecow/psysh/zipball/2fd717afa05341b4f8152547f142cd2f130f6818",
                "reference": "2fd717afa05341b4f8152547f142cd2f130f6818",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "ext-tokenizer": "*",
                "nikic/php-parser": "^5.0 || ^4.0",
                "php": "^8.0 || ^7.4",
                "symfony/console": "^7.0 || ^6.0 || ^5.0 || ^4.0 || ^3.4",
                "symfony/var-dumper": "^7.0 || ^6.0 || ^5.0 || ^4.0 || ^3.4"
            },
            "conflict": {
                "symfony/console": "4.4.37 || 5.3.14 || 5.3.15 || 5.4.3 || 5.4.4 || 6.0.3 || 6.0.4"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.2"
            },
            "suggest": {
                "ext-pcntl": "Enabling the PCNTL extension makes PsySH a lot happier :)",
                "ext-pdo-sqlite": "The doc command requires SQLite to work.",
                "ext-posix": "If you have PCNTL, you'll want the POSIX extension as well."
            },
            "bin": [
                "bin/psysh"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "0.12.x-dev"
                },
                "bamarni-bin": {
                    "bin-links": false,
                    "forward-command": false
                }
            },
            "autoload": {
                "files": [
                    "src/functions.php"
                ],
                "psr-4": {
                    "Psy\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Justin Hileman",
                    "email": "justin@justinhileman.info",
                    "homepage": "http://justinhileman.com"
                }
            ],
            "description": "An interactive shell for modern PHP.",
            "homepage": "http://psysh.org",
            "keywords": [
                "REPL",
                "console",
                "interactive",
                "shell"
            ],
            "support": {
                "issues": "https://github.com/bobthecow/psysh/issues",
                "source": "https://github.com/bobthecow/psysh/tree/v0.12.4"
            },
            "time": "2024-06-10T01:18:23+00:00"
        },
        {
            "name": "ralouphie/getallheaders",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/ralouphie/getallheaders.git",
                "reference": "120b605dfeb996808c31b6477290a714d356e822"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822",
                "reference": "120b605dfeb996808c31b6477290a714d356e822",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "php-coveralls/php-coveralls": "^2.1",
                "phpunit/phpunit": "^5 || ^6.5"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/getallheaders.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ralph Khattar",
                    "email": "ralph.khattar@gmail.com"
                }
            ],
            "description": "A polyfill for getallheaders.",
            "support": {
                "issues": "https://github.com/ralouphie/getallheaders/issues",
                "source": "https://github.com/ralouphie/getallheaders/tree/develop"
            },
            "time": "2019-03-08T08:55:37+00:00"
        },
        {
            "name": "ramsey/collection",
            "version": "2.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/ramsey/collection.git",
                "reference": "a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ramsey/collection/zipball/a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5",
                "reference": "a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "captainhook/plugin-composer": "^5.3",
                "ergebnis/composer-normalize": "^2.28.3",
                "fakerphp/faker": "^1.21",
                "hamcrest/hamcrest-php": "^2.0",
                "jangregor/phpstan-prophecy": "^1.0",
                "mockery/mockery": "^1.5",
                "php-parallel-lint/php-console-highlighter": "^1.0",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpcsstandards/phpcsutils": "^1.0.0-rc1",
                "phpspec/prophecy-phpunit": "^2.0",
                "phpstan/extension-installer": "^1.2",
                "phpstan/phpstan": "^1.9",
                "phpstan/phpstan-mockery": "^1.1",
                "phpstan/phpstan-phpunit": "^1.3",
                "phpunit/phpunit": "^9.5",
                "psalm/plugin-mockery": "^1.1",
                "psalm/plugin-phpunit": "^0.18.4",
                "ramsey/coding-standard": "^2.0.3",
                "ramsey/conventional-commits": "^1.3",
                "vimeo/psalm": "^5.4"
            },
            "type": "library",
            "extra": {
                "captainhook": {
                    "force-install": true
                },
                "ramsey/conventional-commits": {
                    "configFile": "conventional-commits.json"
                }
            },
            "autoload": {
                "psr-4": {
                    "Ramsey\\Collection\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ben Ramsey",
                    "email": "ben@benramsey.com",
                    "homepage": "https://benramsey.com"
                }
            ],
            "description": "A PHP library for representing and manipulating collections.",
            "keywords": [
                "array",
                "collection",
                "hash",
                "map",
                "queue",
                "set"
            ],
            "support": {
                "issues": "https://github.com/ramsey/collection/issues",
                "source": "https://github.com/ramsey/collection/tree/2.0.0"
            },
            "funding": [
                {
                    "url": "https://github.com/ramsey",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/ramsey/collection",
                    "type": "tidelift"
                }
            ],
            "time": "2022-12-31T21:50:55+00:00"
        },
        {
            "name": "ramsey/uuid",
            "version": "4.7.6",
            "source": {
                "type": "git",
                "url": "https://github.com/ramsey/uuid.git",
                "reference": "91039bc1faa45ba123c4328958e620d382ec7088"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ramsey/uuid/zipball/91039bc1faa45ba123c4328958e620d382ec7088",
                "reference": "91039bc1faa45ba123c4328958e620d382ec7088",
                "shasum": ""
            },
            "require": {
                "brick/math": "^0.8.8 || ^0.9 || ^0.10 || ^0.11 || ^0.12",
                "ext-json": "*",
                "php": "^8.0",
                "ramsey/collection": "^1.2 || ^2.0"
            },
            "replace": {
                "rhumsaa/uuid": "self.version"
            },
            "require-dev": {
                "captainhook/captainhook": "^5.10",
                "captainhook/plugin-composer": "^5.3",
                "dealerdirect/phpcodesniffer-composer-installer": "^0.7.0",
                "doctrine/annotations": "^1.8",
                "ergebnis/composer-normalize": "^2.15",
                "mockery/mockery": "^1.3",
                "paragonie/random-lib": "^2",
                "php-mock/php-mock": "^2.2",
                "php-mock/php-mock-mockery": "^1.3",
                "php-parallel-lint/php-parallel-lint": "^1.1",
                "phpbench/phpbench": "^1.0",
                "phpstan/extension-installer": "^1.1",
                "phpstan/phpstan": "^1.8",
                "phpstan/phpstan-mockery": "^1.1",
                "phpstan/phpstan-phpunit": "^1.1",
                "phpunit/phpunit": "^8.5 || ^9",
                "ramsey/composer-repl": "^1.4",
                "slevomat/coding-standard": "^8.4",
                "squizlabs/php_codesniffer": "^3.5",
                "vimeo/psalm": "^4.9"
            },
            "suggest": {
                "ext-bcmath": "Enables faster math with arbitrary-precision integers using BCMath.",
                "ext-gmp": "Enables faster math with arbitrary-precision integers using GMP.",
                "ext-uuid": "Enables the use of PeclUuidTimeGenerator and PeclUuidRandomGenerator.",
                "paragonie/random-lib": "Provides RandomLib for use with the RandomLibAdapter",
                "ramsey/uuid-doctrine": "Allows the use of Ramsey\\Uuid\\Uuid as Doctrine field type."
            },
            "type": "library",
            "extra": {
                "captainhook": {
                    "force-install": true
                }
            },
            "autoload": {
                "files": [
                    "src/functions.php"
                ],
                "psr-4": {
                    "Ramsey\\Uuid\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "A PHP library for generating and working with universally unique identifiers (UUIDs).",
            "keywords": [
                "guid",
                "identifier",
                "uuid"
            ],
            "support": {
                "issues": "https://github.com/ramsey/uuid/issues",
                "source": "https://github.com/ramsey/uuid/tree/4.7.6"
            },
            "funding": [
                {
                    "url": "https://github.com/ramsey",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/ramsey/uuid",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-27T21:32:50+00:00"
        },
        {
            "name": "symfony/clock",
            "version": "v7.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/clock.git",
                "reference": "3dfc8b084853586de51dd1441c6242c76a28cbe7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/clock/zipball/3dfc8b084853586de51dd1441c6242c76a28cbe7",
                "reference": "3dfc8b084853586de51dd1441c6242c76a28cbe7",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "psr/clock": "^1.0",
                "symfony/polyfill-php83": "^1.28"
            },
            "provide": {
                "psr/clock-implementation": "1.0"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "Resources/now.php"
                ],
                "psr-4": {
                    "Symfony\\Component\\Clock\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Decouples applications from the system clock",
            "homepage": "https://symfony.com",
            "keywords": [
                "clock",
                "psr20",
                "time"
            ],
            "support": {
                "source": "https://github.com/symfony/clock/tree/v7.1.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:57:53+00:00"
        },
        {
            "name": "symfony/console",
            "version": "v7.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/console.git",
                "reference": "1eed7af6961d763e7832e874d7f9b21c3ea9c111"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/console/zipball/1eed7af6961d763e7832e874d7f9b21c3ea9c111",
                "reference": "1eed7af6961d763e7832e874d7f9b21c3ea9c111",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-mbstring": "~1.0",
                "symfony/service-contracts": "^2.5|^3",
                "symfony/string": "^6.4|^7.0"
            },
            "conflict": {
                "symfony/dependency-injection": "<6.4",
                "symfony/dotenv": "<6.4",
                "symfony/event-dispatcher": "<6.4",
                "symfony/lock": "<6.4",
                "symfony/process": "<6.4"
            },
            "provide": {
                "psr/log-implementation": "1.0|2.0|3.0"
            },
            "require-dev": {
                "psr/log": "^1|^2|^3",
                "symfony/config": "^6.4|^7.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/event-dispatcher": "^6.4|^7.0",
                "symfony/http-foundation": "^6.4|^7.0",
                "symfony/http-kernel": "^6.4|^7.0",
                "symfony/lock": "^6.4|^7.0",
                "symfony/messenger": "^6.4|^7.0",
                "symfony/process": "^6.4|^7.0",
                "symfony/stopwatch": "^6.4|^7.0",
                "symfony/var-dumper": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Console\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Eases the creation of beautiful and testable command line interfaces",
            "homepage": "https://symfony.com",
            "keywords": [
                "cli",
                "command-line",
                "console",
                "terminal"
            ],
            "support": {
                "source": "https://github.com/symfony/console/tree/v7.1.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-15T22:48:53+00:00"
        },
        {
            "name": "symfony/css-selector",
            "version": "v7.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/css-selector.git",
                "reference": "1c7cee86c6f812896af54434f8ce29c8d94f9ff4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/css-selector/zipball/1c7cee86c6f812896af54434f8ce29c8d94f9ff4",
                "reference": "1c7cee86c6f812896af54434f8ce29c8d94f9ff4",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\CssSelector\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Jean-François Simon",
                    "email": "jeanfrancois.simon@sensiolabs.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Converts CSS selectors to XPath expressions",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/css-selector/tree/v7.1.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:57:53+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v3.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.5-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/v3.5.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-18T09:32:20+00:00"
        },
        {
            "name": "symfony/error-handler",
            "version": "v7.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/error-handler.git",
                "reference": "432bb369952795c61ca1def65e078c4a80dad13c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/error-handler/zipball/432bb369952795c61ca1def65e078c4a80dad13c",
                "reference": "432bb369952795c61ca1def65e078c4a80dad13c",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "psr/log": "^1|^2|^3",
                "symfony/var-dumper": "^6.4|^7.0"
            },
            "conflict": {
                "symfony/deprecation-contracts": "<2.5",
                "symfony/http-kernel": "<6.4"
            },
            "require-dev": {
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/http-kernel": "^6.4|^7.0",
                "symfony/serializer": "^6.4|^7.0"
            },
            "bin": [
                "Resources/bin/patch-type-declarations"
            ],
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\ErrorHandler\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides tools to manage errors and ease debugging PHP code",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/error-handler/tree/v7.1.3"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-26T13:02:51+00:00"
        },
        {
            "name": "symfony/event-dispatcher",
            "version": "v7.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/event-dispatcher.git",
                "reference": "9fa7f7a21beb22a39a8f3f28618b29e50d7a55a7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/9fa7f7a21beb22a39a8f3f28618b29e50d7a55a7",
                "reference": "9fa7f7a21beb22a39a8f3f28618b29e50d7a55a7",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/event-dispatcher-contracts": "^2.5|^3"
            },
            "conflict": {
                "symfony/dependency-injection": "<6.4",
                "symfony/service-contracts": "<2.5"
            },
            "provide": {
                "psr/event-dispatcher-implementation": "1.0",
                "symfony/event-dispatcher-implementation": "2.0|3.0"
            },
            "require-dev": {
                "psr/log": "^1|^2|^3",
                "symfony/config": "^6.4|^7.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/error-handler": "^6.4|^7.0",
                "symfony/expression-language": "^6.4|^7.0",
                "symfony/http-foundation": "^6.4|^7.0",
                "symfony/service-contracts": "^2.5|^3",
                "symfony/stopwatch": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\EventDispatcher\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides tools that allow your application components to communicate with each other by dispatching events and listening to them",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/event-dispatcher/tree/v7.1.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-05-31T14:57:53+00:00"
        },
        {
            "name": "symfony/event-dispatcher-contracts",
            "version": "v3.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/event-dispatcher-contracts.git",
                "reference": "8f93aec25d41b72493c6ddff14e916177c9efc50"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/event-dispatcher-contracts/zipball/8f93aec25d41b72493c6ddff14e916177c9efc50",
                "reference": "8f93aec25d41b72493c6ddff14e916177c9efc50",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "psr/event-dispatcher": "^1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.5-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Contracts\\EventDispatcher\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Generic abstractions related to dispatching event",
            "homepage": "https://symfony.com",
            "keywords": [
                "abstractions",
                "contracts",
                "decoupling",
                "interfaces",
                "interoperability",
                "standards"
            ],
            "support": {
                "source": "https://github.com/symfony/event-dispatcher-contracts/tree/v3.5.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-18T09:32:20+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v7.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "d95bbf319f7d052082fb7af147e0f835a695e823"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/d95bbf319f7d052082fb7af147e0f835a695e823",
                "reference": "d95bbf319f7d052082fb7af147e0f835a695e823",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "symfony/filesystem": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Finds files and directories via an intuitive fluent interface",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v7.1.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-13T14:28:19+00:00"
        },
        {
            "name": "symfony/http-foundation",
            "version": "v7.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/http-foundation.git",
                "reference": "f602d5c17d1fa02f8019ace2687d9d136b7f4a1a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/http-foundation/zipball/f602d5c17d1fa02f8019ace2687d9d136b7f4a1a",
                "reference": "f602d5c17d1fa02f8019ace2687d9d136b7f4a1a",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-mbstring": "~1.1",
                "symfony/polyfill-php83": "^1.27"
            },
            "conflict": {
                "doctrine/dbal": "<3.6",
                "symfony/cache": "<6.4"
            },
            "require-dev": {
                "doctrine/dbal": "^3.6|^4",
                "predis/predis": "^1.1|^2.0",
                "symfony/cache": "^6.4|^7.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/expression-language": "^6.4|^7.0",
                "symfony/http-kernel": "^6.4|^7.0",
                "symfony/mime": "^6.4|^7.0",
                "symfony/rate-limiter": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\HttpFoundation\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Defines an object-oriented layer for the HTTP specification",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/http-foundation/tree/v7.1.3"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-26T12:41:01+00:00"
        },
        {
            "name": "symfony/http-kernel",
            "version": "v7.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/http-kernel.git",
                "reference": "6efcbd1b3f444f631c386504fc83eeca25963747"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/http-kernel/zipball/6efcbd1b3f444f631c386504fc83eeca25963747",
                "reference": "6efcbd1b3f444f631c386504fc83eeca25963747",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "psr/log": "^1|^2|^3",
                "symfony/deprecation-contracts": "^2.5|^3",
                "symfony/error-handler": "^6.4|^7.0",
                "symfony/event-dispatcher": "^6.4|^7.0",
                "symfony/http-foundation": "^6.4|^7.0",
                "symfony/polyfill-ctype": "^1.8"
            },
            "conflict": {
                "symfony/browser-kit": "<6.4",
                "symfony/cache": "<6.4",
                "symfony/config": "<6.4",
                "symfony/console": "<6.4",
                "symfony/dependency-injection": "<6.4",
                "symfony/doctrine-bridge": "<6.4",
                "symfony/form": "<6.4",
                "symfony/http-client": "<6.4",
                "symfony/http-client-contracts": "<2.5",
                "symfony/mailer": "<6.4",
                "symfony/messenger": "<6.4",
                "symfony/translation": "<6.4",
                "symfony/translation-contracts": "<2.5",
                "symfony/twig-bridge": "<6.4",
                "symfony/validator": "<6.4",
                "symfony/var-dumper": "<6.4",
                "twig/twig": "<3.0.4"
            },
            "provide": {
                "psr/log-implementation": "1.0|2.0|3.0"
            },
            "require-dev": {
                "psr/cache": "^1.0|^2.0|^3.0",
                "symfony/browser-kit": "^6.4|^7.0",
                "symfony/clock": "^6.4|^7.0",
                "symfony/config": "^6.4|^7.0",
                "symfony/console": "^6.4|^7.0",
                "symfony/css-selector": "^6.4|^7.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/dom-crawler": "^6.4|^7.0",
                "symfony/expression-language": "^6.4|^7.0",
                "symfony/finder": "^6.4|^7.0",
                "symfony/http-client-contracts": "^2.5|^3",
                "symfony/process": "^6.4|^7.0",
                "symfony/property-access": "^7.1",
                "symfony/routing": "^6.4|^7.0",
                "symfony/serializer": "^7.1",
                "symfony/stopwatch": "^6.4|^7.0",
                "symfony/translation": "^6.4|^7.0",
                "symfony/translation-contracts": "^2.5|^3",
                "symfony/uid": "^6.4|^7.0",
                "symfony/validator": "^6.4|^7.0",
                "symfony/var-dumper": "^6.4|^7.0",
                "symfony/var-exporter": "^6.4|^7.0",
                "twig/twig": "^3.0.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\HttpKernel\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides a structured process for converting a Request into a Response",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/http-kernel/tree/v7.1.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-30T17:02:28+00:00"
        },
        {
            "name": "symfony/mailer",
            "version": "v7.1.2",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/mailer.git",
                "reference": "8fcff0af9043c8f8a8e229437cea363e282f9aee"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/mailer/zipball/8fcff0af9043c8f8a8e229437cea363e282f9aee",
                "reference": "8fcff0af9043c8f8a8e229437cea363e282f9aee",
                "shasum": ""
            },
            "require": {
                "egulias/email-validator": "^2.1.10|^3|^4",
                "php": ">=8.2",
                "psr/event-dispatcher": "^1",
                "psr/log": "^1|^2|^3",
                "symfony/event-dispatcher": "^6.4|^7.0",
                "symfony/mime": "^6.4|^7.0",
                "symfony/service-contracts": "^2.5|^3"
            },
            "conflict": {
                "symfony/http-client-contracts": "<2.5",
                "symfony/http-kernel": "<6.4",
                "symfony/messenger": "<6.4",
                "symfony/mime": "<6.4",
                "symfony/twig-bridge": "<6.4"
            },
            "require-dev": {
                "symfony/console": "^6.4|^7.0",
                "symfony/http-client": "^6.4|^7.0",
                "symfony/messenger": "^6.4|^7.0",
                "symfony/twig-bridge": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Mailer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Helps sending emails",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/mailer/tree/v7.1.2"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-28T08:00:31+00:00"
        },
        {
            "name": "symfony/mime",
            "version": "v7.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/mime.git",
                "reference": "ccaa6c2503db867f472a587291e764d6a1e58758"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/mime/zipball/ccaa6c2503db867f472a587291e764d6a1e58758",
                "reference": "ccaa6c2503db867f472a587291e764d6a1e58758",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-intl-idn": "^1.10",
                "symfony/polyfill-mbstring": "^1.0"
            },
            "conflict": {
                "egulias/email-validator": "~3.0.0",
                "phpdocumentor/reflection-docblock": "<3.2.2",
                "phpdocumentor/type-resolver": "<1.4.0",
                "symfony/mailer": "<6.4",
                "symfony/serializer": "<6.4.3|>7.0,<7.0.3"
            },
            "require-dev": {
                "egulias/email-validator": "^2.1.10|^3.1|^4",
                "league/html-to-markdown": "^5.0",
                "phpdocumentor/reflection-docblock": "^3.0|^4.0|^5.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/process": "^6.4|^7.0",
                "symfony/property-access": "^6.4|^7.0",
                "symfony/property-info": "^6.4|^7.0",
                "symfony/serializer": "^6.4.3|^7.0.3"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Mime\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Allows manipulating MIME messages",
            "homepage": "https://symfony.com",
            "keywords": [
                "mime",
                "mime-type"
            ],
            "support": {
                "source": "https://github.com/symfony/mime/tree/v7.1.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-13T14:28:19+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "a3cc8b044a6ea513310cbd48ef7333b384945638"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/a3cc8b044a6ea513310cbd48ef7333b384945638",
                "reference": "a3cc8b044a6ea513310cbd48ef7333b384945638",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "provide": {
                "ext-ctype": "*"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-intl-grapheme",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-grapheme.git",
                "reference": "b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe",
                "reference": "b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Grapheme\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's grapheme_* functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "grapheme",
                "intl",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-grapheme/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-intl-idn",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-idn.git",
                "reference": "c36586dcf89a12315939e00ec9b4474adcb1d773"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/c36586dcf89a12315939e00ec9b4474adcb1d773",
                "reference": "c36586dcf89a12315939e00ec9b4474adcb1d773",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "symfony/polyfill-intl-normalizer": "^1.10"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Idn\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Laurent Bassin",
                    "email": "laurent@bassin.info"
                },
                {
                    "name": "Trevor Rowbotham",
                    "email": "trevor.rowbotham@pm.me"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "idn",
                "intl",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-idn/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-intl-normalizer",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-intl-normalizer.git",
                "reference": "3833d7255cc303546435cb650316bff708a1c75c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/3833d7255cc303546435cb650316bff708a1c75c",
                "reference": "3833d7255cc303546435cb650316bff708a1c75c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "suggest": {
                "ext-intl": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Intl\\Normalizer\\": ""
                },
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for intl's Normalizer class and related functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "intl",
                "normalizer",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-mbstring",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-mbstring.git",
                "reference": "85181ba99b2345b0ef10ce42ecac37612d9fd341"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/85181ba99b2345b0ef10ce42ecac37612d9fd341",
                "reference": "85181ba99b2345b0ef10ce42ecac37612d9fd341",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "provide": {
                "ext-mbstring": "*"
            },
            "suggest": {
                "ext-mbstring": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Mbstring\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for the Mbstring extension",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "mbstring",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-php80",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php80.git",
                "reference": "60328e362d4c2c802a54fcbf04f9d3fb892b4cf8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/60328e362d4c2c802a54fcbf04f9d3fb892b4cf8",
                "reference": "60328e362d4c2c802a54fcbf04f9d3fb892b4cf8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Php80\\": ""
                },
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ion Bazan",
                    "email": "ion.bazan@gmail.com"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php80/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-php83",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php83.git",
                "reference": "2fb86d65e2d424369ad2905e83b236a8805ba491"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php83/zipball/2fb86d65e2d424369ad2905e83b236a8805ba491",
                "reference": "2fb86d65e2d424369ad2905e83b236a8805ba491",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Php83\\": ""
                },
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.3+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php83/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-uuid",
            "version": "v1.31.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-uuid.git",
                "reference": "21533be36c24be3f4b1669c4725c7d1d2bab4ae2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-uuid/zipball/21533be36c24be3f4b1669c4725c7d1d2bab4ae2",
                "reference": "21533be36c24be3f4b1669c4725c7d1d2bab4ae2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "provide": {
                "ext-uuid": "*"
            },
            "suggest": {
                "ext-uuid": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Uuid\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Grégoire Pineau",
                    "email": "lyrixx@lyrixx.info"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for uuid functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "uuid"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-uuid/tree/v1.31.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v7.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "7f2f542c668ad6c313dc4a5e9c3321f733197eca"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/7f2f542c668ad6c313dc4a5e9c3321f733197eca",
                "reference": "7f2f542c668ad6c313dc4a5e9c3321f733197eca",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Executes commands in sub-processes",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v7.1.3"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-26T12:44:47+00:00"
        },
        {
            "name": "symfony/routing",
            "version": "v7.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/routing.git",
                "reference": "1500aee0094a3ce1c92626ed8cf3c2037e86f5a7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/routing/zipball/1500aee0094a3ce1c92626ed8cf3c2037e86f5a7",
                "reference": "1500aee0094a3ce1c92626ed8cf3c2037e86f5a7",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/deprecation-contracts": "^2.5|^3"
            },
            "conflict": {
                "symfony/config": "<6.4",
                "symfony/dependency-injection": "<6.4",
                "symfony/yaml": "<6.4"
            },
            "require-dev": {
                "psr/log": "^1|^2|^3",
                "symfony/config": "^6.4|^7.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/expression-language": "^6.4|^7.0",
                "symfony/http-foundation": "^6.4|^7.0",
                "symfony/yaml": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Routing\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Maps an HTTP request to a set of configuration variables",
            "homepage": "https://symfony.com",
            "keywords": [
                "router",
                "routing",
                "uri",
                "url"
            ],
            "support": {
                "source": "https://github.com/symfony/routing/tree/v7.1.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-29T08:16:25+00:00"
        },
        {
            "name": "symfony/service-contracts",
            "version": "v3.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/service-contracts.git",
                "reference": "bd1d9e59a81d8fa4acdcea3f617c581f7475a80f"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/service-contracts/zipball/bd1d9e59a81d8fa4acdcea3f617c581f7475a80f",
                "reference": "bd1d9e59a81d8fa4acdcea3f617c581f7475a80f",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "psr/container": "^1.1|^2.0",
                "symfony/deprecation-contracts": "^2.5|^3"
            },
            "conflict": {
                "ext-psr": "<1.1|>=2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.5-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Contracts\\Service\\": ""
                },
                "exclude-from-classmap": [
                    "/Test/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Generic abstractions related to writing services",
            "homepage": "https://symfony.com",
            "keywords": [
                "abstractions",
                "contracts",
                "decoupling",
                "interfaces",
                "interoperability",
                "standards"
            ],
            "support": {
                "source": "https://github.com/symfony/service-contracts/tree/v3.5.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-18T09:32:20+00:00"
        },
        {
            "name": "symfony/string",
            "version": "v7.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/string.git",
                "reference": "6cd670a6d968eaeb1c77c2e76091c45c56bc367b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/string/zipball/6cd670a6d968eaeb1c77c2e76091c45c56bc367b",
                "reference": "6cd670a6d968eaeb1c77c2e76091c45c56bc367b",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-intl-grapheme": "~1.0",
                "symfony/polyfill-intl-normalizer": "~1.0",
                "symfony/polyfill-mbstring": "~1.0"
            },
            "conflict": {
                "symfony/translation-contracts": "<2.5"
            },
            "require-dev": {
                "symfony/emoji": "^7.1",
                "symfony/error-handler": "^6.4|^7.0",
                "symfony/http-client": "^6.4|^7.0",
                "symfony/intl": "^6.4|^7.0",
                "symfony/translation-contracts": "^2.5|^3.0",
                "symfony/var-exporter": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "Resources/functions.php"
                ],
                "psr-4": {
                    "Symfony\\Component\\String\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides an object-oriented API to strings and deals with bytes, UTF-8 code points and grapheme clusters in a unified way",
            "homepage": "https://symfony.com",
            "keywords": [
                "grapheme",
                "i18n",
                "string",
                "unicode",
                "utf-8",
                "utf8"
            ],
            "support": {
                "source": "https://github.com/symfony/string/tree/v7.1.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-12T09:59:40+00:00"
        },
        {
            "name": "symfony/translation",
            "version": "v7.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/translation.git",
                "reference": "8d5e50c813ba2859a6dfc99a0765c550507934a1"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/translation/zipball/8d5e50c813ba2859a6dfc99a0765c550507934a1",
                "reference": "8d5e50c813ba2859a6dfc99a0765c550507934a1",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-mbstring": "~1.0",
                "symfony/translation-contracts": "^2.5|^3.0"
            },
            "conflict": {
                "symfony/config": "<6.4",
                "symfony/console": "<6.4",
                "symfony/dependency-injection": "<6.4",
                "symfony/http-client-contracts": "<2.5",
                "symfony/http-kernel": "<6.4",
                "symfony/service-contracts": "<2.5",
                "symfony/twig-bundle": "<6.4",
                "symfony/yaml": "<6.4"
            },
            "provide": {
                "symfony/translation-implementation": "2.3|3.0"
            },
            "require-dev": {
                "nikic/php-parser": "^4.18|^5.0",
                "psr/log": "^1|^2|^3",
                "symfony/config": "^6.4|^7.0",
                "symfony/console": "^6.4|^7.0",
                "symfony/dependency-injection": "^6.4|^7.0",
                "symfony/finder": "^6.4|^7.0",
                "symfony/http-client-contracts": "^2.5|^3.0",
                "symfony/http-kernel": "^6.4|^7.0",
                "symfony/intl": "^6.4|^7.0",
                "symfony/polyfill-intl-icu": "^1.21",
                "symfony/routing": "^6.4|^7.0",
                "symfony/service-contracts": "^2.5|^3",
                "symfony/yaml": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "Resources/functions.php"
                ],
                "psr-4": {
                    "Symfony\\Component\\Translation\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides tools to internationalize your application",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/translation/tree/v7.1.3"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-26T12:41:01+00:00"
        },
        {
            "name": "symfony/translation-contracts",
            "version": "v3.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/translation-contracts.git",
                "reference": "b9d2189887bb6b2e0367a9fc7136c5239ab9b05a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/translation-contracts/zipball/b9d2189887bb6b2e0367a9fc7136c5239ab9b05a",
                "reference": "b9d2189887bb6b2e0367a9fc7136c5239ab9b05a",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.5-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Contracts\\Translation\\": ""
                },
                "exclude-from-classmap": [
                    "/Test/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Generic abstractions related to translation",
            "homepage": "https://symfony.com",
            "keywords": [
                "abstractions",
                "contracts",
                "decoupling",
                "interfaces",
                "interoperability",
                "standards"
            ],
            "support": {
                "source": "https://github.com/symfony/translation-contracts/tree/v3.5.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-04-18T09:32:20+00:00"
        },
        {
            "name": "symfony/uid",
            "version": "v7.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/uid.git",
                "reference": "82177535395109075cdb45a70533aa3d7a521cdf"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/uid/zipball/82177535395109075cdb45a70533aa3d7a521cdf",
                "reference": "82177535395109075cdb45a70533aa3d7a521cdf",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-uuid": "^1.15"
            },
            "require-dev": {
                "symfony/console": "^6.4|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Uid\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Grégoire Pineau",
                    "email": "lyrixx@lyrixx.info"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides an object-oriented API to generate and represent UIDs",
            "homepage": "https://symfony.com",
            "keywords": [
                "UID",
                "ulid",
                "uuid"
            ],
            "support": {
                "source": "https://github.com/symfony/uid/tree/v7.1.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-12T09:59:40+00:00"
        },
        {
            "name": "symfony/var-dumper",
            "version": "v7.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/var-dumper.git",
                "reference": "a5fa7481b199090964d6fd5dab6294d5a870c7aa"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/var-dumper/zipball/a5fa7481b199090964d6fd5dab6294d5a870c7aa",
                "reference": "a5fa7481b199090964d6fd5dab6294d5a870c7aa",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-mbstring": "~1.0"
            },
            "conflict": {
                "symfony/console": "<6.4"
            },
            "require-dev": {
                "ext-iconv": "*",
                "symfony/console": "^6.4|^7.0",
                "symfony/http-kernel": "^6.4|^7.0",
                "symfony/process": "^6.4|^7.0",
                "symfony/uid": "^6.4|^7.0",
                "twig/twig": "^3.0.4"
            },
            "bin": [
                "Resources/bin/var-dump-server"
            ],
            "type": "library",
            "autoload": {
                "files": [
                    "Resources/functions/dump.php"
                ],
                "psr-4": {
                    "Symfony\\Component\\VarDumper\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides mechanisms for walking through any arbitrary PHP variable",
            "homepage": "https://symfony.com",
            "keywords": [
                "debug",
                "dump"
            ],
            "support": {
                "source": "https://github.com/symfony/var-dumper/tree/v7.1.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-30T16:12:47+00:00"
        },
        {
            "name": "tijsverkoyen/css-to-inline-styles",
            "version": "v2.2.7",
            "source": {
                "type": "git",
                "url": "https://github.com/tijsverkoyen/CssToInlineStyles.git",
                "reference": "83ee6f38df0a63106a9e4536e3060458b74ccedb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/tijsverkoyen/CssToInlineStyles/zipball/83ee6f38df0a63106a9e4536e3060458b74ccedb",
                "reference": "83ee6f38df0a63106a9e4536e3060458b74ccedb",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "php": "^5.5 || ^7.0 || ^8.0",
                "symfony/css-selector": "^2.7 || ^3.0 || ^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0 || ^7.5 || ^8.5.21 || ^9.5.10"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "TijsVerkoyen\\CssToInlineStyles\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Tijs Verkoyen",
                    "email": "css_to_inline_styles@verkoyen.eu",
                    "role": "Developer"
                }
            ],
            "description": "CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very useful when you're sending emails.",
            "homepage": "https://github.com/tijsverkoyen/CssToInlineStyles",
            "support": {
                "issues": "https://github.com/tijsverkoyen/CssToInlineStyles/issues",
                "source": "https://github.com/tijsverkoyen/CssToInlineStyles/tree/v2.2.7"
            },
            "time": "2023-12-08T13:03:43+00:00"
        },
        {
            "name": "vlucas/phpdotenv",
            "version": "v5.6.1",
            "source": {
                "type": "git",
                "url": "https://github.com/vlucas/phpdotenv.git",
                "reference": "a59a13791077fe3d44f90e7133eb68e7d22eaff2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/vlucas/phpdotenv/zipball/a59a13791077fe3d44f90e7133eb68e7d22eaff2",
                "reference": "a59a13791077fe3d44f90e7133eb68e7d22eaff2",
                "shasum": ""
            },
            "require": {
                "ext-pcre": "*",
                "graham-campbell/result-type": "^1.1.3",
                "php": "^7.2.5 || ^8.0",
                "phpoption/phpoption": "^1.9.3",
                "symfony/polyfill-ctype": "^1.24",
                "symfony/polyfill-mbstring": "^1.24",
                "symfony/polyfill-php80": "^1.24"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "ext-filter": "*",
                "phpunit/phpunit": "^8.5.34 || ^9.6.13 || ^10.4.2"
            },
            "suggest": {
                "ext-filter": "Required to use the boolean validator."
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                },
                "branch-alias": {
                    "dev-master": "5.6-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Dotenv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Vance Lucas",
                    "email": "vance@vancelucas.com",
                    "homepage": "https://github.com/vlucas"
                }
            ],
            "description": "Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.",
            "keywords": [
                "dotenv",
                "env",
                "environment"
            ],
            "support": {
                "issues": "https://github.com/vlucas/phpdotenv/issues",
                "source": "https://github.com/vlucas/phpdotenv/tree/v5.6.1"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/vlucas/phpdotenv",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-20T21:52:34+00:00"
        },
        {
            "name": "voku/portable-ascii",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/voku/portable-ascii.git",
                "reference": "b56450eed252f6801410d810c8e1727224ae0743"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/voku/portable-ascii/zipball/b56450eed252f6801410d810c8e1727224ae0743",
                "reference": "b56450eed252f6801410d810c8e1727224ae0743",
                "shasum": ""
            },
            "require": {
                "php": ">=7.0.0"
            },
            "require-dev": {
                "phpunit/phpunit": "~6.0 || ~7.0 || ~9.0"
            },
            "suggest": {
                "ext-intl": "Use Intl for transliterator_transliterate() support"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "voku\\": "src/voku/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Lars Moelleken",
                    "homepage": "http://www.moelleken.org/"
                }
            ],
            "description": "Portable ASCII library - performance optimized (ascii) string functions for php.",
            "homepage": "https://github.com/voku/portable-ascii",
            "keywords": [
                "ascii",
                "clean",
                "php"
            ],
            "support": {
                "issues": "https://github.com/voku/portable-ascii/issues",
                "source": "https://github.com/voku/portable-ascii/tree/2.0.1"
            },
            "funding": [
                {
                    "url": "https://www.paypal.me/moelleken",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/voku",
                    "type": "github"
                },
                {
                    "url": "https://opencollective.com/portable-ascii",
                    "type": "open_collective"
                },
                {
                    "url": "https://www.patreon.com/voku",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/voku/portable-ascii",
                    "type": "tidelift"
                }
            ],
            "time": "2022-03-08T17:03:00+00:00"
        },
        {
            "name": "webmozart/assert",
            "version": "1.11.0",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozarts/assert.git",
                "reference": "11cb2199493b2f8a3b53e7f19068fc6aac760991"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozarts/assert/zipball/11cb2199493b2f8a3b53e7f19068fc6aac760991",
                "reference": "11cb2199493b2f8a3b53e7f19068fc6aac760991",
                "shasum": ""
            },
            "require": {
                "ext-ctype": "*",
                "php": "^7.2 || ^8.0"
            },
            "conflict": {
                "phpstan/phpstan": "<0.12.20",
                "vimeo/psalm": "<4.6.1 || 4.6.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^8.5.13"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.10-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Webmozart\\Assert\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Assertions to validate method input/output with nice error messages.",
            "keywords": [
                "assert",
                "check",
                "validate"
            ],
            "support": {
                "issues": "https://github.com/webmozarts/assert/issues",
                "source": "https://github.com/webmozarts/assert/tree/1.11.0"
            },
            "time": "2022-06-03T18:03:27+00:00"
        },
        {
            "name": "wikimedia/composer-merge-plugin",
            "version": "v2.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/wikimedia/composer-merge-plugin.git",
                "reference": "a03d426c8e9fb2c9c569d9deeb31a083292788bc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/wikimedia/composer-merge-plugin/zipball/a03d426c8e9fb2c9c569d9deeb31a083292788bc",
                "reference": "a03d426c8e9fb2c9c569d9deeb31a083292788bc",
                "shasum": ""
            },
            "require": {
                "composer-plugin-api": "^1.1||^2.0",
                "php": ">=7.2.0"
            },
            "require-dev": {
                "composer/composer": "^1.1||^2.0",
                "ext-json": "*",
                "mediawiki/mediawiki-phan-config": "0.11.1",
                "php-parallel-lint/php-parallel-lint": "~1.3.1",
                "phpspec/prophecy": "~1.15.0",
                "phpunit/phpunit": "^8.5||^9.0",
                "squizlabs/php_codesniffer": "~3.7.1"
            },
            "type": "composer-plugin",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.x-dev"
                },
                "class": "Wikimedia\\Composer\\Merge\\V2\\MergePlugin"
            },
            "autoload": {
                "psr-4": {
                    "Wikimedia\\Composer\\Merge\\V2\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bryan Davis",
                    "email": "bd808@wikimedia.org"
                }
            ],
            "description": "Composer plugin to merge multiple composer.json files",
            "support": {
                "issues": "https://github.com/wikimedia/composer-merge-plugin/issues",
                "source": "https://github.com/wikimedia/composer-merge-plugin/tree/v2.1.0"
            },
            "time": "2023-04-15T19:07:00+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "fakerphp/faker",
            "version": "v1.23.1",
            "source": {
                "type": "git",
                "url": "https://github.com/FakerPHP/Faker.git",
                "reference": "bfb4fe148adbf78eff521199619b93a52ae3554b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/FakerPHP/Faker/zipball/bfb4fe148adbf78eff521199619b93a52ae3554b",
                "reference": "bfb4fe148adbf78eff521199619b93a52ae3554b",
                "shasum": ""
            },
            "require": {
                "php": "^7.4 || ^8.0",
                "psr/container": "^1.0 || ^2.0",
                "symfony/deprecation-contracts": "^2.2 || ^3.0"
            },
            "conflict": {
                "fzaninotto/faker": "*"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.4.1",
                "doctrine/persistence": "^1.3 || ^2.0",
                "ext-intl": "*",
                "phpunit/phpunit": "^9.5.26",
                "symfony/phpunit-bridge": "^5.4.16"
            },
            "suggest": {
                "doctrine/orm": "Required to use Faker\\ORM\\Doctrine",
                "ext-curl": "Required by Faker\\Provider\\Image to download images.",
                "ext-dom": "Required by Faker\\Provider\\HtmlLorem for generating random HTML.",
                "ext-iconv": "Required by Faker\\Provider\\ru_RU\\Text::realText() for generating real Russian text.",
                "ext-mbstring": "Required for multibyte Unicode string functionality."
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Faker\\": "src/Faker/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "François Zaninotto"
                }
            ],
            "description": "Faker is a PHP library that generates fake data for you.",
            "keywords": [
                "data",
                "faker",
                "fixtures"
            ],
            "support": {
                "issues": "https://github.com/FakerPHP/Faker/issues",
                "source": "https://github.com/FakerPHP/Faker/tree/v1.23.1"
            },
            "time": "2024-01-02T13:46:09+00:00"
        },
        {
            "name": "filp/whoops",
            "version": "2.15.4",
            "source": {
                "type": "git",
                "url": "https://github.com/filp/whoops.git",
                "reference": "a139776fa3f5985a50b509f2a02ff0f709d2a546"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/filp/whoops/zipball/a139776fa3f5985a50b509f2a02ff0f709d2a546",
                "reference": "a139776fa3f5985a50b509f2a02ff0f709d2a546",
                "shasum": ""
            },
            "require": {
                "php": "^5.5.9 || ^7.0 || ^8.0",
                "psr/log": "^1.0.1 || ^2.0 || ^3.0"
            },
            "require-dev": {
                "mockery/mockery": "^0.9 || ^1.0",
                "phpunit/phpunit": "^4.8.36 || ^5.7.27 || ^6.5.14 || ^7.5.20 || ^8.5.8 || ^9.3.3",
                "symfony/var-dumper": "^2.6 || ^3.0 || ^4.0 || ^5.0"
            },
            "suggest": {
                "symfony/var-dumper": "Pretty print complex values better with var-dumper available",
                "whoops/soap": "Formats errors as SOAP responses"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.7-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Whoops\\": "src/Whoops/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Filipe Dobreira",
                    "homepage": "https://github.com/filp",
                    "role": "Developer"
                }
            ],
            "description": "php error handling for cool kids",
            "homepage": "https://filp.github.io/whoops/",
            "keywords": [
                "error",
                "exception",
                "handling",
                "library",
                "throwable",
                "whoops"
            ],
            "support": {
                "issues": "https://github.com/filp/whoops/issues",
                "source": "https://github.com/filp/whoops/tree/2.15.4"
            },
            "funding": [
                {
                    "url": "https://github.com/denis-sokolov",
                    "type": "github"
                }
            ],
            "time": "2023-11-03T12:00:00+00:00"
        },
        {
            "name": "hamcrest/hamcrest-php",
            "version": "v2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/hamcrest/hamcrest-php.git",
                "reference": "8c3d0a3f6af734494ad8f6fbbee0ba92422859f3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/hamcrest/hamcrest-php/zipball/8c3d0a3f6af734494ad8f6fbbee0ba92422859f3",
                "reference": "8c3d0a3f6af734494ad8f6fbbee0ba92422859f3",
                "shasum": ""
            },
            "require": {
                "php": "^5.3|^7.0|^8.0"
            },
            "replace": {
                "cordoval/hamcrest-php": "*",
                "davedevelopment/hamcrest-php": "*",
                "kodova/hamcrest-php": "*"
            },
            "require-dev": {
                "phpunit/php-file-iterator": "^1.4 || ^2.0",
                "phpunit/phpunit": "^4.8.36 || ^5.7 || ^6.5 || ^7.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "hamcrest"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "description": "This is the PHP port of Hamcrest Matchers",
            "keywords": [
                "test"
            ],
            "support": {
                "issues": "https://github.com/hamcrest/hamcrest-php/issues",
                "source": "https://github.com/hamcrest/hamcrest-php/tree/v2.0.1"
            },
            "time": "2020-07-09T08:09:16+00:00"
        },
        {
            "name": "laravel/pint",
            "version": "v1.17.3",
            "source": {
                "type": "git",
                "url": "https://github.com/laravel/pint.git",
                "reference": "9d77be916e145864f10788bb94531d03e1f7b482"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/laravel/pint/zipball/9d77be916e145864f10788bb94531d03e1f7b482",
                "reference": "9d77be916e145864f10788bb94531d03e1f7b482",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "ext-mbstring": "*",
                "ext-tokenizer": "*",
                "ext-xml": "*",
                "php": "^8.1.0"
            },
            "require-dev": {
                "friendsofphp/php-cs-fixer": "^3.64.0",
                "illuminate/view": "^10.48.20",
                "larastan/larastan": "^2.9.8",
                "laravel-zero/framework": "^10.4.0",
                "mockery/mockery": "^1.6.12",
                "nunomaduro/termwind": "^1.15.1",
                "pestphp/pest": "^2.35.1"
            },
            "bin": [
                "builds/pint"
            ],
            "type": "project",
            "autoload": {
                "psr-4": {
                    "App\\": "app/",
                    "Database\\Seeders\\": "database/seeders/",
                    "Database\\Factories\\": "database/factories/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nuno Maduro",
                    "email": "enunomaduro@gmail.com"
                }
            ],
            "description": "An opinionated code formatter for PHP.",
            "homepage": "https://laravel.com",
            "keywords": [
                "format",
                "formatter",
                "lint",
                "linter",
                "php"
            ],
            "support": {
                "issues": "https://github.com/laravel/pint/issues",
                "source": "https://github.com/laravel/pint"
            },
            "time": "2024-09-03T15:00:28+00:00"
        },
        {
            "name": "laravel/sail",
            "version": "v1.32.0",
            "source": {
                "type": "git",
                "url": "https://github.com/laravel/sail.git",
                "reference": "4a7e41d280861ca7e35710cea011a07669b4003b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/laravel/sail/zipball/4a7e41d280861ca7e35710cea011a07669b4003b",
                "reference": "4a7e41d280861ca7e35710cea011a07669b4003b",
                "shasum": ""
            },
            "require": {
                "illuminate/console": "^9.52.16|^10.0|^11.0",
                "illuminate/contracts": "^9.52.16|^10.0|^11.0",
                "illuminate/support": "^9.52.16|^10.0|^11.0",
                "php": "^8.0",
                "symfony/console": "^6.0|^7.0",
                "symfony/yaml": "^6.0|^7.0"
            },
            "require-dev": {
                "orchestra/testbench": "^7.0|^8.0|^9.0",
                "phpstan/phpstan": "^1.10"
            },
            "bin": [
                "bin/sail"
            ],
            "type": "library",
            "extra": {
                "laravel": {
                    "providers": [
                        "Laravel\\Sail\\SailServiceProvider"
                    ]
                }
            },
            "autoload": {
                "psr-4": {
                    "Laravel\\Sail\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Taylor Otwell",
                    "email": "taylor@laravel.com"
                }
            ],
            "description": "Docker files for running a basic Laravel application.",
            "keywords": [
                "docker",
                "laravel"
            ],
            "support": {
                "issues": "https://github.com/laravel/sail/issues",
                "source": "https://github.com/laravel/sail"
            },
            "time": "2024-09-11T20:14:29+00:00"
        },
        {
            "name": "mockery/mockery",
            "version": "1.6.12",
            "source": {
                "type": "git",
                "url": "https://github.com/mockery/mockery.git",
                "reference": "1f4efdd7d3beafe9807b08156dfcb176d18f1699"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/mockery/mockery/zipball/1f4efdd7d3beafe9807b08156dfcb176d18f1699",
                "reference": "1f4efdd7d3beafe9807b08156dfcb176d18f1699",
                "shasum": ""
            },
            "require": {
                "hamcrest/hamcrest-php": "^2.0.1",
                "lib-pcre": ">=7.0",
                "php": ">=7.3"
            },
            "conflict": {
                "phpunit/phpunit": "<8.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^8.5 || ^9.6.17",
                "symplify/easy-coding-standard": "^12.1.14"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "library/helpers.php",
                    "library/Mockery.php"
                ],
                "psr-4": {
                    "Mockery\\": "library/Mockery"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Pádraic Brady",
                    "email": "padraic.brady@gmail.com",
                    "homepage": "https://github.com/padraic",
                    "role": "Author"
                },
                {
                    "name": "Dave Marshall",
                    "email": "dave.marshall@atstsolutions.co.uk",
                    "homepage": "https://davedevelopment.co.uk",
                    "role": "Developer"
                },
                {
                    "name": "Nathanael Esayeas",
                    "email": "nathanael.esayeas@protonmail.com",
                    "homepage": "https://github.com/ghostwriter",
                    "role": "Lead Developer"
                }
            ],
            "description": "Mockery is a simple yet flexible PHP mock object framework",
            "homepage": "https://github.com/mockery/mockery",
            "keywords": [
                "BDD",
                "TDD",
                "library",
                "mock",
                "mock objects",
                "mockery",
                "stub",
                "test",
                "test double",
                "testing"
            ],
            "support": {
                "docs": "https://docs.mockery.io/",
                "issues": "https://github.com/mockery/mockery/issues",
                "rss": "https://github.com/mockery/mockery/releases.atom",
                "security": "https://github.com/mockery/mockery/security/advisories",
                "source": "https://github.com/mockery/mockery"
            },
            "time": "2024-05-16T03:13:13+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.12.0",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "conflict": {
                "doctrine/collections": "<1.6.8",
                "doctrine/common": "<2.13.3 || >=3 <3.2.2"
            },
            "require-dev": {
                "doctrine/collections": "^1.6.8",
                "doctrine/common": "^2.13.3 || ^3.2.2",
                "phpspec/prophecy": "^1.10",
                "phpunit/phpunit": "^7.5.20 || ^8.5.23 || ^9.5.13"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ],
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.12.0"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2024-06-12T14:39:25+00:00"
        },
        {
            "name": "nunomaduro/collision",
            "version": "v8.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/nunomaduro/collision.git",
                "reference": "e7d1aa8ed753f63fa816932bbc89678238843b4a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nunomaduro/collision/zipball/e7d1aa8ed753f63fa816932bbc89678238843b4a",
                "reference": "e7d1aa8ed753f63fa816932bbc89678238843b4a",
                "shasum": ""
            },
            "require": {
                "filp/whoops": "^2.15.4",
                "nunomaduro/termwind": "^2.0.1",
                "php": "^8.2.0",
                "symfony/console": "^7.1.3"
            },
            "conflict": {
                "laravel/framework": "<11.0.0 || >=12.0.0",
                "phpunit/phpunit": "<10.5.1 || >=12.0.0"
            },
            "require-dev": {
                "larastan/larastan": "^2.9.8",
                "laravel/framework": "^11.19.0",
                "laravel/pint": "^1.17.1",
                "laravel/sail": "^1.31.0",
                "laravel/sanctum": "^4.0.2",
                "laravel/tinker": "^2.9.0",
                "orchestra/testbench-core": "^9.2.3",
                "pestphp/pest": "^2.35.0 || ^3.0.0",
                "sebastian/environment": "^6.1.0 || ^7.0.0"
            },
            "type": "library",
            "extra": {
                "laravel": {
                    "providers": [
                        "NunoMaduro\\Collision\\Adapters\\Laravel\\CollisionServiceProvider"
                    ]
                },
                "branch-alias": {
                    "dev-8.x": "8.x-dev"
                }
            },
            "autoload": {
                "files": [
                    "./src/Adapters/Phpunit/Autoload.php"
                ],
                "psr-4": {
                    "NunoMaduro\\Collision\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nuno Maduro",
                    "email": "enunomaduro@gmail.com"
                }
            ],
            "description": "Cli error handling for console/command-line PHP applications.",
            "keywords": [
                "artisan",
                "cli",
                "command-line",
                "console",
                "error",
                "handling",
                "laravel",
                "laravel-zero",
                "php",
                "symfony"
            ],
            "support": {
                "issues": "https://github.com/nunomaduro/collision/issues",
                "source": "https://github.com/nunomaduro/collision"
            },
            "funding": [
                {
                    "url": "https://www.paypal.com/paypalme/enunomaduro",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/nunomaduro",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/nunomaduro",
                    "type": "patreon"
                }
            ],
            "time": "2024-08-03T15:32:23+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "54750ef60c58e43759730615a392c31c80e23176"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/54750ef60c58e43759730615a392c31c80e23176",
                "reference": "54750ef60c58e43759730615a392c31c80e23176",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2024-03-03T12:33:53+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "4f7fd7836c6f332bb2933569e566a0d6c4cbed74"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/4f7fd7836c6f332bb2933569e566a0d6c4cbed74",
                "reference": "4f7fd7836c6f332bb2933569e566a0d6c4cbed74",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/3.2.1"
            },
            "time": "2022-02-21T01:04:05+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "11.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "ebdffc9e09585dafa71b9bffcdb0a229d4704c45"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/ebdffc9e09585dafa71b9bffcdb0a229d4704c45",
                "reference": "ebdffc9e09585dafa71b9bffcdb0a229d4704c45",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^5.1.0",
                "php": ">=8.2",
                "phpunit/php-file-iterator": "^5.0.1",
                "phpunit/php-text-template": "^4.0.1",
                "sebastian/code-unit-reverse-lookup": "^4.0.1",
                "sebastian/complexity": "^4.0.1",
                "sebastian/environment": "^7.2.0",
                "sebastian/lines-of-code": "^3.0.1",
                "sebastian/version": "^5.0.1",
                "theseer/tokenizer": "^1.2.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "suggest": {
                "ext-pcov": "PHP extension that provides line coverage",
                "ext-xdebug": "PHP extension that provides line coverage as well as branch and path coverage"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "11.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "security": "https://github.com/sebastianbergmann/php-code-coverage/security/policy",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/11.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-08-22T04:37:56+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "5.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "118cfaaa8bc5aef3287bf315b6060b1174754af6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/118cfaaa8bc5aef3287bf315b6060b1174754af6",
                "reference": "118cfaaa8bc5aef3287bf315b6060b1174754af6",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "security": "https://github.com/sebastianbergmann/php-file-iterator/security/policy",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/5.1.0"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-08-27T05:02:59+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "5.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "c1ca3814734c07492b3d4c5f794f4b0995333da2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/c1ca3814734c07492b3d4c5f794f4b0995333da2",
                "reference": "c1ca3814734c07492b3d4c5f794f4b0995333da2",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^11.0"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "security": "https://github.com/sebastianbergmann/php-invoker/security/policy",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/5.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T05:07:44+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "4.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "3e0404dc6b300e6bf56415467ebcb3fe4f33e964"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/3e0404dc6b300e6bf56415467ebcb3fe4f33e964",
                "reference": "3e0404dc6b300e6bf56415467ebcb3fe4f33e964",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "security": "https://github.com/sebastianbergmann/php-text-template/security/policy",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/4.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T05:08:43+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "7.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "3b415def83fbcb41f991d9ebf16ae4ad8b7837b3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/3b415def83fbcb41f991d9ebf16ae4ad8b7837b3",
                "reference": "3b415def83fbcb41f991d9ebf16ae4ad8b7837b3",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "7.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "security": "https://github.com/sebastianbergmann/php-timer/security/policy",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/7.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T05:09:35+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "11.3.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "4dc07a589a68f8f2d5132ac0849146d122e08347"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/4dc07a589a68f8f2d5132ac0849146d122e08347",
                "reference": "4dc07a589a68f8f2d5132ac0849146d122e08347",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.12.0",
                "phar-io/manifest": "^2.0.4",
                "phar-io/version": "^3.2.1",
                "php": ">=8.2",
                "phpunit/php-code-coverage": "^11.0.6",
                "phpunit/php-file-iterator": "^5.1.0",
                "phpunit/php-invoker": "^5.0.1",
                "phpunit/php-text-template": "^4.0.1",
                "phpunit/php-timer": "^7.0.1",
                "sebastian/cli-parser": "^3.0.2",
                "sebastian/code-unit": "^3.0.1",
                "sebastian/comparator": "^6.1.0",
                "sebastian/diff": "^6.0.2",
                "sebastian/environment": "^7.2.0",
                "sebastian/exporter": "^6.1.3",
                "sebastian/global-state": "^7.0.2",
                "sebastian/object-enumerator": "^6.0.1",
                "sebastian/type": "^5.0.1",
                "sebastian/version": "^5.0.1"
            },
            "suggest": {
                "ext-soap": "To be able to generate mocks based on WSDL files"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "11.3-dev"
                }
            },
            "autoload": {
                "files": [
                    "src/Framework/Assert/Functions.php"
                ],
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "security": "https://github.com/sebastianbergmann/phpunit/security/policy",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/11.3.5"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/sponsors.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpunit/phpunit",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-13T05:22:17+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "15c5dd40dc4f38794d383bb95465193f5e0ae180"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/15c5dd40dc4f38794d383bb95465193f5e0ae180",
                "reference": "15c5dd40dc4f38794d383bb95465193f5e0ae180",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "security": "https://github.com/sebastianbergmann/cli-parser/security/policy",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T04:41:36+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "3.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "6bb7d09d6623567178cf54126afa9c2310114268"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/6bb7d09d6623567178cf54126afa9c2310114268",
                "reference": "6bb7d09d6623567178cf54126afa9c2310114268",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "security": "https://github.com/sebastianbergmann/code-unit/security/policy",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/3.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T04:44:28+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "4.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "183a9b2632194febd219bb9246eee421dad8d45e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/183a9b2632194febd219bb9246eee421dad8d45e",
                "reference": "183a9b2632194febd219bb9246eee421dad8d45e",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "security": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/security/policy",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/4.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T04:45:54+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "6.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "fa37b9e2ca618cb051d71b60120952ee8ca8b03d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/fa37b9e2ca618cb051d71b60120952ee8ca8b03d",
                "reference": "fa37b9e2ca618cb051d71b60120952ee8ca8b03d",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-mbstring": "*",
                "php": ">=8.2",
                "sebastian/diff": "^6.0",
                "sebastian/exporter": "^6.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "6.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "security": "https://github.com/sebastianbergmann/comparator/security/policy",
                "source": "https://github.com/sebastianbergmann/comparator/tree/6.1.0"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-09-11T15:42:56+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "4.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "ee41d384ab1906c68852636b6de493846e13e5a0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/ee41d384ab1906c68852636b6de493846e13e5a0",
                "reference": "ee41d384ab1906c68852636b6de493846e13e5a0",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^5.0",
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "security": "https://github.com/sebastianbergmann/complexity/security/policy",
                "source": "https://github.com/sebastianbergmann/complexity/tree/4.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T04:49:50+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "6.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "b4ccd857127db5d41a5b676f24b51371d76d8544"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/b4ccd857127db5d41a5b676f24b51371d76d8544",
                "reference": "b4ccd857127db5d41a5b676f24b51371d76d8544",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "6.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "security": "https://github.com/sebastianbergmann/diff/security/policy",
                "source": "https://github.com/sebastianbergmann/diff/tree/6.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T04:53:05+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "7.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "855f3ae0ab316bbafe1ba4e16e9f3c078d24a0c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/855f3ae0ab316bbafe1ba4e16e9f3c078d24a0c5",
                "reference": "855f3ae0ab316bbafe1ba4e16e9f3c078d24a0c5",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "7.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "https://github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "security": "https://github.com/sebastianbergmann/environment/security/policy",
                "source": "https://github.com/sebastianbergmann/environment/tree/7.2.0"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T04:54:44+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "6.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "c414673eee9a8f9d51bbf8d61fc9e3ef1e85b20e"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/c414673eee9a8f9d51bbf8d61fc9e3ef1e85b20e",
                "reference": "c414673eee9a8f9d51bbf8d61fc9e3ef1e85b20e",
                "shasum": ""
            },
            "require": {
                "ext-mbstring": "*",
                "php": ">=8.2",
                "sebastian/recursion-context": "^6.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "6.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "https://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "security": "https://github.com/sebastianbergmann/exporter/security/policy",
                "source": "https://github.com/sebastianbergmann/exporter/tree/6.1.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T04:56:19+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "7.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "3be331570a721f9a4b5917f4209773de17f747d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/3be331570a721f9a4b5917f4209773de17f747d7",
                "reference": "3be331570a721f9a4b5917f4209773de17f747d7",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "sebastian/object-reflector": "^4.0",
                "sebastian/recursion-context": "^6.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "7.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "https://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "security": "https://github.com/sebastianbergmann/global-state/security/policy",
                "source": "https://github.com/sebastianbergmann/global-state/tree/7.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T04:57:36+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "3.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "d36ad0d782e5756913e42ad87cb2890f4ffe467a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/d36ad0d782e5756913e42ad87cb2890f4ffe467a",
                "reference": "d36ad0d782e5756913e42ad87cb2890f4ffe467a",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^5.0",
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "security": "https://github.com/sebastianbergmann/lines-of-code/security/policy",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/3.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T04:58:38+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "6.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "f5b498e631a74204185071eb41f33f38d64608aa"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/f5b498e631a74204185071eb41f33f38d64608aa",
                "reference": "f5b498e631a74204185071eb41f33f38d64608aa",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "sebastian/object-reflector": "^4.0",
                "sebastian/recursion-context": "^6.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "6.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "security": "https://github.com/sebastianbergmann/object-enumerator/security/policy",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/6.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T05:00:13+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "4.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "6e1a43b411b2ad34146dee7524cb13a068bb35f9"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/6e1a43b411b2ad34146dee7524cb13a068bb35f9",
                "reference": "6e1a43b411b2ad34146dee7524cb13a068bb35f9",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "security": "https://github.com/sebastianbergmann/object-reflector/security/policy",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/4.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T05:01:32+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "6.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "694d156164372abbd149a4b85ccda2e4670c0e16"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/694d156164372abbd149a4b85ccda2e4670c0e16",
                "reference": "694d156164372abbd149a4b85ccda2e4670c0e16",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "6.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "https://github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "security": "https://github.com/sebastianbergmann/recursion-context/security/policy",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/6.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T05:10:34+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "5.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "fb6a6566f9589e86661291d13eba708cce5eb4aa"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/fb6a6566f9589e86661291d13eba708cce5eb4aa",
                "reference": "fb6a6566f9589e86661291d13eba708cce5eb4aa",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "require-dev": {
                "phpunit/phpunit": "^11.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "security": "https://github.com/sebastianbergmann/type/security/policy",
                "source": "https://github.com/sebastianbergmann/type/tree/5.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T05:11:49+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "5.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "45c9debb7d039ce9b97de2f749c2cf5832a06ac4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/45c9debb7d039ce9b97de2f749c2cf5832a06ac4",
                "reference": "45c9debb7d039ce9b97de2f749c2cf5832a06ac4",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "security": "https://github.com/sebastianbergmann/version/security/policy",
                "source": "https://github.com/sebastianbergmann/version/tree/5.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2024-07-03T05:13:08+00:00"
        },
        {
            "name": "symfony/yaml",
            "version": "v7.1.4",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/yaml.git",
                "reference": "92e080b851c1c655c786a2da77f188f2dccd0f4b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/yaml/zipball/92e080b851c1c655c786a2da77f188f2dccd0f4b",
                "reference": "92e080b851c1c655c786a2da77f188f2dccd0f4b",
                "shasum": ""
            },
            "require": {
                "php": ">=8.2",
                "symfony/polyfill-ctype": "^1.8"
            },
            "conflict": {
                "symfony/console": "<6.4"
            },
            "require-dev": {
                "symfony/console": "^6.4|^7.0"
            },
            "bin": [
                "Resources/bin/yaml-lint"
            ],
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Yaml\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Loads and dumps YAML files",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/yaml/tree/v7.1.4"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-08-12T09:59:40+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.3",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/1.2.3"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2024-03-03T12:36:25+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": true,
    "prefer-lowest": false,
    "platform": {
        "php": "^8.2"
    },
    "platform-dev": [],
    "plugin-api-version": "2.6.0"
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/LICENSE`:

```
MIT License

Copyright (c) 2023 CaribesTIC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/lang/en/pagination.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Pagination Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used by the paginator library to build
    | the simple pagination links. You are free to change them to anything
    | you want to customize your views to better match your application.
    |
    */

    'previous' => '&laquo; Anterior',
    'next' => 'Siguiente &raquo;',

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/lang/en/passwords.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Password Reset Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are the default lines which match reasons
    | that are given by the password broker for a password update attempt
    | has failed, such as for an invalid token or invalid new password.
    |
    */

    'reset' => 'Your password has been reset!',
    'sent' => 'We have emailed your password reset link!',
    'throttled' => 'Please wait before retrying.',
    'token' => 'This password reset token is invalid.',
    'user' => "We can't find a user with that email address.",

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/lang/en/auth.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used during authentication for various
    | messages that we need to display to the user. You are free to modify
    | these language lines according to your application's requirements.
    |
    */

    'failed' => 'These credentials do not match our records.',
    'password' => 'The provided password is incorrect.',
    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/lang/en/validation.php`:

```php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines contain the default error messages used by
    | the validator class. Some of these rules have multiple versions such
    | as the size rules. Feel free to tweak each of these messages here.
    |
    */

    'accepted' => 'The :attribute must be accepted.',
    'accepted_if' => 'The :attribute must be accepted when :other is :value.',
    'active_url' => 'The :attribute is not a valid URL.',
    'after' => 'The :attribute must be a date after :date.',
    'after_or_equal' => 'The :attribute must be a date after or equal to :date.',
    'alpha' => 'The :attribute must only contain letters.',
    'alpha_dash' => 'The :attribute must only contain letters, numbers, dashes and underscores.',
    'alpha_num' => 'The :attribute must only contain letters and numbers.',
    'array' => 'The :attribute must be an array.',
    'ascii' => 'The :attribute must only contain single-byte alphanumeric characters and symbols.',
    'before' => 'The :attribute must be a date before :date.',
    'before_or_equal' => 'The :attribute must be a date before or equal to :date.',
    'between' => [
        'array' => 'The :attribute must have between :min and :max items.',
        'file' => 'The :attribute must be between :min and :max kilobytes.',
        'numeric' => 'The :attribute must be between :min and :max.',
        'string' => 'The :attribute must be between :min and :max characters.',
    ],
    'boolean' => 'The :attribute field must be true or false.',
    'confirmed' => 'The :attribute confirmation does not match.',
    'current_password' => 'The password is incorrect.',
    'date' => 'The :attribute is not a valid date.',
    'date_equals' => 'The :attribute must be a date equal to :date.',
    'date_format' => 'The :attribute does not match the format :format.',
    'decimal' => 'The :attribute must have :decimal decimal places.',
    'declined' => 'The :attribute must be declined.',
    'declined_if' => 'The :attribute must be declined when :other is :value.',
    'different' => 'The :attribute and :other must be different.',
    'digits' => 'The :attribute must be :digits digits.',
    'digits_between' => 'The :attribute must be between :min and :max digits.',
    'dimensions' => 'The :attribute has invalid image dimensions.',
    'distinct' => 'The :attribute field has a duplicate value.',
    'doesnt_end_with' => 'The :attribute may not end with one of the following: :values.',
    'doesnt_start_with' => 'The :attribute may not start with one of the following: :values.',
    'email' => 'The :attribute must be a valid email address.',
    'ends_with' => 'The :attribute must end with one of the following: :values.',
    'enum' => 'The selected :attribute is invalid.',
    'exists' => 'The selected :attribute is invalid.',
    'file' => 'The :attribute must be a file.',
    'filled' => 'The :attribute field must have a value.',
    'gt' => [
        'array' => 'The :attribute must have more than :value items.',
        'file' => 'The :attribute must be greater than :value kilobytes.',
        'numeric' => 'The :attribute must be greater than :value.',
        'string' => 'The :attribute must be greater than :value characters.',
    ],
    'gte' => [
        'array' => 'The :attribute must have :value items or more.',
        'file' => 'The :attribute must be greater than or equal to :value kilobytes.',
        'numeric' => 'The :attribute must be greater than or equal to :value.',
        'string' => 'The :attribute must be greater than or equal to :value characters.',
    ],
    'image' => 'The :attribute must be an image.',
    'in' => 'The selected :attribute is invalid.',
    'in_array' => 'The :attribute field does not exist in :other.',
    'integer' => 'The :attribute must be an integer.',
    'ip' => 'The :attribute must be a valid IP address.',
    'ipv4' => 'The :attribute must be a valid IPv4 address.',
    'ipv6' => 'The :attribute must be a valid IPv6 address.',
    'json' => 'The :attribute must be a valid JSON string.',
    'lowercase' => 'The :attribute must be lowercase.',
    'lt' => [
        'array' => 'The :attribute must have less than :value items.',
        'file' => 'The :attribute must be less than :value kilobytes.',
        'numeric' => 'The :attribute must be less than :value.',
        'string' => 'The :attribute must be less than :value characters.',
    ],
    'lte' => [
        'array' => 'The :attribute must not have more than :value items.',
        'file' => 'The :attribute must be less than or equal to :value kilobytes.',
        'numeric' => 'The :attribute must be less than or equal to :value.',
        'string' => 'The :attribute must be less than or equal to :value characters.',
    ],
    'mac_address' => 'The :attribute must be a valid MAC address.',
    'max' => [
        'array' => 'The :attribute must not have more than :max items.',
        'file' => 'The :attribute must not be greater than :max kilobytes.',
        'numeric' => 'The :attribute must not be greater than :max.',
        'string' => 'The :attribute must not be greater than :max characters.',
    ],
    'max_digits' => 'The :attribute must not have more than :max digits.',
    'mimes' => 'The :attribute must be a file of type: :values.',
    'mimetypes' => 'The :attribute must be a file of type: :values.',
    'min' => [
        'array' => 'The :attribute must have at least :min items.',
        'file' => 'The :attribute must be at least :min kilobytes.',
        'numeric' => 'The :attribute must be at least :min.',
        'string' => 'The :attribute must be at least :min characters.',
    ],
    'min_digits' => 'The :attribute must have at least :min digits.',
    'multiple_of' => 'The :attribute must be a multiple of :value.',
    'not_in' => 'The selected :attribute is invalid.',
    'not_regex' => 'The :attribute format is invalid.',
    'numeric' => 'The :attribute must be a number.',
    'password' => [
        'letters' => 'The :attribute must contain at least one letter.',
        'mixed' => 'The :attribute must contain at least one uppercase and one lowercase letter.',
        'numbers' => 'The :attribute must contain at least one number.',
        'symbols' => 'The :attribute must contain at least one symbol.',
        'uncompromised' => 'The given :attribute has appeared in a data leak. Please choose a different :attribute.',
    ],
    'present' => 'The :attribute field must be present.',
    'prohibited' => 'The :attribute field is prohibited.',
    'prohibited_if' => 'The :attribute field is prohibited when :other is :value.',
    'prohibited_unless' => 'The :attribute field is prohibited unless :other is in :values.',
    'prohibits' => 'The :attribute field prohibits :other from being present.',
    'regex' => 'The :attribute format is invalid.',
    'required' => 'The :attribute field is required.',
    'required_array_keys' => 'The :attribute field must contain entries for: :values.',
    'required_if' => 'The :attribute field is required when :other is :value.',
    'required_if_accepted' => 'The :attribute field is required when :other is accepted.',
    'required_unless' => 'The :attribute field is required unless :other is in :values.',
    'required_with' => 'The :attribute field is required when :values is present.',
    'required_with_all' => 'The :attribute field is required when :values are present.',
    'required_without' => 'The :attribute field is required when :values is not present.',
    'required_without_all' => 'The :attribute field is required when none of :values are present.',
    'same' => 'The :attribute and :other must match.',
    'size' => [
        'array' => 'The :attribute must contain :size items.',
        'file' => 'The :attribute must be :size kilobytes.',
        'numeric' => 'The :attribute must be :size.',
        'string' => 'The :attribute must be :size characters.',
    ],
    'starts_with' => 'The :attribute must start with one of the following: :values.',
    'string' => 'The :attribute must be a string.',
    'timezone' => 'The :attribute must be a valid timezone.',
    'unique' => 'The :attribute has already been taken.',
    'uploaded' => 'The :attribute failed to upload.',
    'uppercase' => 'The :attribute must be uppercase.',
    'url' => 'The :attribute must be a valid URL.',
    'ulid' => 'The :attribute must be a valid ULID.',
    'uuid' => 'The :attribute must be a valid UUID.',

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | Here you may specify custom validation messages for attributes using the
    | convention "attribute.rule" to name the lines. This makes it quick to
    | specify a specific custom language line for a given attribute rule.
    |
    */

    'custom' => [
        'attribute-name' => [
            'rule-name' => 'custom-message',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Custom Validation Attributes
    |--------------------------------------------------------------------------
    |
    | The following language lines are used to swap our attribute placeholder
    | with something more reader friendly such as "E-Mail Address" instead
    | of "email". This simply helps us make our message more expressive.
    |
    */

    'attributes' => [],

];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Dockerfile`:

```
FROM php:8.3.15-fpm

# Copy composer.lock and composer.json into the working directory
COPY composer.lock composer.json /var/www/html/

# Set working directory
WORKDIR /var/www/html/

# Install dependencies for the operating system software
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    libpng-dev \
    libonig-dev \
    libzip-dev \
    libjpeg62-turbo-dev \
    libfreetype6-dev \
    locales \
    zip \
    jpegoptim optipng pngquant gifsicle \
    vim \
    unzip \
    git \
    curl

RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install extensions for php
RUN docker-php-ext-install mbstring zip exif pcntl
RUN docker-php-ext-install pdo pgsql pdo_pgsql
RUN docker-php-ext-install gd

#RUN docker-php-ext-install pdo_mysql
#RUN docker-php-ext-install gd

# Install composer (php package manager)
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Copy existing application directory contents to the working directory
COPY . /var/www/html

# Assign permissions of the working directory to the www-data user
RUN chown -R www-data:www-data \
    /var/www/html/storage \
    /var/www/html/bootstrap/cache

# Expose port 9000 and start php-fpm server (for FastCGI Process Manager)
EXPOSE 9000
CMD ["php-fpm"]


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/docker-compose.yml`:

```yml
version: "3.9"
services:
  php_store:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: store_php
    restart: unless-stopped
    tty: true
    working_dir: /var/www/html/
    volumes:
      - ./:/var/www/html/
      - ./php/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
    networks:
      - store-network
  nginx_store:
    depends_on:
      - php_store
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: store_nginx
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
    networks:
      - store-network      
#  pgsql_store:
#    container_name: store_pgsql
#    image: postgres:13
#    ports:
#      - "${DB_PORT}:5432"
#    environment:
#     POSTGRES_DB: ${DB_DATABASE}
#      POSTGRES_USER: ${DB_USERNAME}
#      POSTGRES_PASSWORD: ${DB_PASSWORD}
#    volumes:
#      - "./postgresql:/var/lib/postgresql/data"
#    networks:
#      - store-network
#    healthcheck:
#      test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]

networks:
  store-network:
    external: true


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/bootstrap/app.php`:

```php
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        api: __DIR__.'/../routes/api.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        $middleware->statefulApi();
        $middleware->alias(['json_guest'=> \App\Http\Middleware\RedirectIfAuthenticated::class]);
        $middleware->appendToGroup('api', [
            \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
        ]);
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/bootstrap/providers.php`:

```php
<?php

return [
    App\Providers\AppServiceProvider::class,
    App\Providers\AuthServiceProvider::class,
    App\Providers\FortifyServiceProvider::class,
    App\Providers\RouteServiceProvider::class,
];



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/bootstrap/cache/.gitignore`:

```
*
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/README.md`:

```md
# store-laravel
Store Laravel

1. Download the project or clone it.
2. Copy and paste the file `.env.example` or `.env.example.docker` to `.env`.
3. If you want to containerize this application and you already have docker and docker-compose installed then run:
`docker-compose up -d --build`
4. At the end of the containerization enter the `store_pgsql` container with:
```
docker exec -it store_pgsql bash
```
5. Then run:
```
psql -U postgres
CREATE DATABASE common_db;
CREATE DATABASE product_db;
\q
exit
```
6. Enter the `store_php` container with:
```
docker exec -it store_php bash
```
7. Then run:
```
composer install -vvv
php artisan key:generate
php artisan migrate:fresh --seed
php artisan module:seed
php artisan optimize
chmod -R 777 storage/
php artisan storage:link
exit
```
8. If you are containerizing the app then get the IPAddress with the command:
```
docker inspect store_nginx
```
9. Set up a domain in your `etc/hosts` with the IPAddress of the container `store_nginx`:
```
sudo vim /etc/hosts
###.##.#.#  api.store.dev.com
```

<p align="center"><a href="https://laravel.com" target="_blank"><img src="https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg" width="400" alt="Laravel Logo"></a></p>

<p align="center">
<a href="https://github.com/laravel/framework/actions"><img src="https://github.com/laravel/framework/workflows/tests/badge.svg" alt="Build Status"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/dt/laravel/framework" alt="Total Downloads"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/v/laravel/framework" alt="Latest Stable Version"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/l/laravel/framework" alt="License"></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

You may also try the [Laravel Bootcamp](https://bootcamp.laravel.com), where you will be guided through building a modern Laravel application from scratch.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains over 2000 video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the Laravel [Patreon page](https://patreon.com/taylorotwell).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Cubet Techno Labs](https://cubettech.com)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[Many](https://www.many.co.uk)**
- **[Webdock, Fast VPS Hosting](https://www.webdock.io/en)**
- **[DevSquad](https://devsquad.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[OP.GG](https://op.gg)**
- **[WebReinvent](https://webreinvent.com/?utm_source=laravel&utm_medium=github&utm_campaign=patreon-sponsors)**
- **[Lendio](https://lendio.com)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/composer.json`:

```json
{
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": ["laravel", "framework"],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "laravel/fortify": "^1.24",
        "laravel/framework": "^11.9",
        "laravel/sanctum": "^4.0",
        "laravel/tinker": "^2.9",
        "nwidart/laravel-modules": "^11.1"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.26",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.0",
        "phpunit/phpunit": "^11.0.1"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        },
        "merge-plugin": {
            "include": [
                "Modules/*/composer.json"
            ]
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true,
            "wikimedia/composer-merge-plugin": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/apuntes`:

```
https://laravel.com/docs/11.x/installation#creating-a-laravel-project
composer create-project laravel/laravel example-app

https://laravel.com/docs/11.x/installation#environment-based-configuration
.env

https://laravel.com/docs/11.x/installation#databases-and-migrations
APP_URL=http://localhost:8000

DB_CONNECTION=pgsql
DB_HOST=172.18.0.2
DB_PORT=5432
DB_DATABASE=store
DB_USERNAME=postgres
DB_PASSWORD=secret

SANCTUM_STATEFUL_DOMAINS=localhost:5173
SESSION_DOMAIN=localhost
SPA_URL=http://localhost:5173

DO_SPACES_PUBLIC=http://localhost:8000/storage/

--
https://laravel.com/docs/11.x/sanctum#installation
https://laravel.com/docs/11.x/sanctum#sanctum-middleware
https://laravel.com/docs/11.x/sanctum#cors-and-cookies
---
https://laravel.com/docs/11.x/fortify#installation
https://laravel.com/docs/11.x/fortify#fortify-features
https://laravel.com/docs/11.x/fortify#disabling-views
config -> fortify
'home' => env('SPA_URL') . '/dashboard',
config -> session
'domain' => env('SESSION_DOMAIN'),

--------------
/home/ernesto/devenv/store/laravel10/app/Http/Middleware/RedirectIfAuthenticated.php
        $middleware->alias(['json_guest'=> \App\Http\Middleware\RedirectIfAuthenticated::class]);
        $middleware->appendToGroup('api', [
            \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
        ]);

use App\Providers\RouteServiceProvider;
app\Http\Middleware\Authenticate.php
AuthServiceProvider

use App\Http\Controllers\AuthController;
use App\Http\Controllers\AuthMenuController;
use App\Http\Controllers\UserController;
use App\Http\Controllers\TokenController;
use App\Http\Controllers\AvatarController;
use App\Http\Controllers\MenuController;
use App\Http\Controllers\RoleController;
Request+Resources+Services+Validator
/app/Exceptions+/app/Repositories

composer require nwidart/laravel-modules

///
"autoload": {
    "psr-4": {
        "Modules\\Blog\\": "app/",
        "Modules\\Blog\\Database\\Factories\\": "database/factories/",
        "Modules\\Blog\\Database\\Seeders\\": "database/seeders/"
    }
},
"autoload-dev": {
    "psr-4": {
        "Modules\\Blog\\Tests\\": "tests/"
    }
}
///



        'pgsql_common' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST_COMMON', '127.0.0.1'),
            'port' => env('DB_PORT_COMMON', '5432'),
            'database' => env('DB_DATABASE_COMMON', 'forge'),
            'username' => env('DB_USERNAME_COMMON', 'forge'),
            'password' => env('DB_PASSWORD_COMMON', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'pgsql_product' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST_PRODUCT', '127.0.0.1'),
            'port' => env('DB_PORT_PRODUCT', '5432'),
            'database' => env('DB_DATABASE_PRODUCT', 'forge'),
            'username' => env('DB_USERNAME_PRODUCT', 'forge'),
            'password' => env('DB_PASSWORD_PRODUCT', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

php artisan module:migrate-refresh
php artisan module:seed

php artisan migrate

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/public/index.php`:

```php
<?php

use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
(require_once __DIR__.'/../bootstrap/app.php')
    ->handleRequest(Request::capture());

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/public/robots.txt`:

```txt
User-agent: *
Disallow:

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Exceptions/Handler.php`:

```php
<?php

// https://laraveldaily.com/post/how-to-catch-handle-create-laravel-exceptions
// https://dev.to/jackmiras/laravels-exceptions-part-1-what-are-exceptions-2ma5
// https://dev.to/jackmiras/laravels-exceptions-part-2-custom-exceptions-1367
// https://dev.to/jackmiras/laravels-exceptions-part-3-findorfail-exception-automated-4kci

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

use App\Exceptions\ExceptionInstance;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {   //dd(get_class($e));
        if ( ExceptionInstance::ofNotValidation($e) && env("APP_ENV") === "production" ) {
            return ExceptionInstance::ofCustom($e) 
                ? $e->render($request)
                    : ExceptionInstance::ofNotCustom($e);                
        }        

        return parent::render($request, $e);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Exceptions/ExceptionInstance.php`:

```php
<?php
 
namespace App\Exceptions;
 
class ExceptionInstance
{
    /* Exceptions Instance Of Not Validation Exception */
    public static function ofNotValidation(object $e): bool
    {
        return !$e instanceof \Illuminate\Validation\ValidationException;
    }
    
    /* Exceptions Instance Of Custom Exception */
    public static function ofCustom(object $e): bool
    {
        return $e instanceof \App\Exceptions\CustomException;  
    }

    /* Exceptions Instance Of Not Custom Exception */
    public static function ofNotCustom(object $e): \Illuminate\Http\JsonResponse
    {   // 422 Unprocessable Entity.
        $resp = ["error" => null, "cod" => null];
        if ( ExceptionInstance::_of403($e) ) 
            $resp = [ "error" => "This action is not authorized.", "cod" => 403 ];
        else if ( ExceptionInstance::_of404($e) )
            $resp = [ "error" => "Page not found.", "cod" => 404 ];
        else if ( ExceptionInstance::_of500($e) )
            $resp = [ "error" => "Internal Server Error.", "cod" => 500 ];
        else
            $resp = [
                "error" => $e->getMessage() ?? "Unknown error: ",
                "cod" => self::_selectGetCode($e)
            ];
        return response()->json($resp, $resp['cod']);
    }

   /* Exceptions Instance Of 403 */
    private static function _of403(object $e): bool
    {
        return (
            $e instanceof \Illuminate\Auth\Access\AuthorizationException ||
            $e instanceof \Illuminate\Auth\AuthenticationException
        );
    }

   /* Exceptions Instance Of 404 */
    private static function _of404(object $e): bool
    {
        return (
            $e instanceof \Illuminate\Database\Eloquent\ModelNotFoundException ||
            $e instanceof \Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException ||
            $e instanceof \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
        );
    }

    /* Exceptions Instance Of 500 */
    private static function _of500(object $e): bool
    {
        return $e instanceof \Illuminate\Database\QueryException;
    }
    
    private static function _selectGetCode(object $e): int | evoid
    {
       if ($e instanceof \Symfony\Component\HttpKernel\Exception\HttpException)
           return $e->getStatusCode();
       else if ($e instanceof \Illuminate\Database\QueryException)
           return $e->getCode();
       else
           die("Unknown error code !!");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Exceptions/CustomException.php`:

```php
<?php

namespace App\Exceptions;
 
use Exception;
use Illuminate\Http\{ Request, JsonResponse };
 
class CustomException extends Exception
{
    /**
     * Report the exception.
     *
     * @return void
     */
    public function report() {}
 
    /**
     * Render the exception into an HTTP response.
     */
    public function render(Request $request): JsonResponse
    {
        /* $request is in case you need to handle the request */
        return response()->json([
            "error" => $this->message,
            "cod" => $this->code 
        ], $this->code );
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Requests/Menu/StoreMenuRequest.php`:

```php
<?php

namespace App\Http\Requests\Menu;

use Illuminate\Foundation\Http\FormRequest;

class StoreMenuRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [

        ];
        
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Requests/Menu/UpdateMenuRequest.php`:

```php
<?php

namespace App\Http\Requests\Menu;

use Illuminate\Foundation\Http\FormRequest;

class UpdateMenuRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [

        ];
    }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Requests/Menu/DestroyMenuRequest.php`:

```php
<?php

namespace App\Http\Requests\Menu;

use Illuminate\Foundation\Http\FormRequest;

class DestroyMenuRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [

        ];
    }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Requests/Menu/ChildrenMenuRequest.php`:

```php
<?php

namespace App\Http\Requests\Menu;

use Illuminate\Foundation\Http\FormRequest;

class ChildrenMenuRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [

        ];
    }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Requests/User/UpdateUserRequest.php`:

```php
<?php

namespace App\Http\Requests\User;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdateUserRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {    
        return [
            "name" => ["required", "max:255"],
            "email" => [
                "required", "max:255", "email",
                Rule::unique("users")->ignore( $this->route()->parameters()["user"]->id ),
            ],
            "password" => ["nullable"],
            "role_id" => ["required"],
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Requests/User/StoreUserRequest.php`:

```php
<?php

namespace App\Http\Requests\User;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StoreUserRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            "name" => ["required", "max:255"],
            "email" => ["required", "max:255", "email", Rule::unique("users")],
            "password" => ["required"],
            "role_id" => ["required"]
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Controllers/AuthMenuController.php`:

```php
<?php

namespace App\Http\Controllers;

//use App\Http\Resources\UserResource;
use Illuminate\Support\Facades\Auth;
use App\Repositories\Menu\RecursiveMenuRepository;

class AuthMenuController extends Controller
{
    public function __invoke()
    {
        if (!Auth::user())  //auth()->check()
            return  response()->json(["message" => "Forbidden"], 403);          

        $user = Auth::user();
        $role = \App\Models\Role::select('menu_ids')->find($user->role_id);           
        $menus = RecursiveMenuRepository::recursive($role->menu_ids);
        //$menus = RecursiveMenuRepository::recursive();               
        return response()->json($menus);       
       
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Controllers/AuthController.php`:

```php
<?php

namespace App\Http\Controllers;

use App\Http\Resources\UserResource;
use Illuminate\Support\Facades\Auth;

class AuthController extends Controller
{
    public function __invoke()
    {
        return new UserResource(Auth::user());
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Controllers/MenuController.php`:

```php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use App\Http\Requests\Menu\{
    ChildrenMenuRequest,
    StoreMenuRequest,
    UpdateMenuRequest,
    DestroyMenuRequest
};
use App\Http\Services\Menu\{
    MenuService,
    ChildreMenuService,
    StoreMenuService,
    UpdateMenuService,
    DestroyMenuService    
};
use \Illuminate\{
    Database\Eloquent\Collection,
    Http\RedirectResponse
};
use App\Models\Menu;

class MenuController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request): JsonResponse
    {//dd($request->query());
        return MenuService::execute($request);
    }   
    
    /**
     * Display a listing of the resource.
     *
     * @param  App\Http\Services\Menu\ChildrenMenuRequest $request
     * @return \Illuminate\Database\Eloquent\Collection
     */
    public function children(ChildrenMenuRequest $request): Collection
    {                
        return ChildreMenuService::execute($request);        
    }
    
    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\Menu\StoreMenuRequest $request     
     * @return \Illuminate\Http\RedirectResponse     
     */
    public function store(StoreMenuRequest $request): JsonResponse
    {
        return StoreMenuService::execute($request);
    }
   
    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\Menu\UpdateMenuRequest $request
     * @param  \App\Models\Menu  $menu
     * @return \Illuminate\Http\RedirectResponse
     */ 
    public function update(UpdateMenuRequest $request, Menu $menu): JsonResponse
    {
        return UpdateMenuService::execute($request, $menu);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Http\Requests\Menu\DestroyMenuRequest $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy(DestroyMenuRequest $request): JsonResponse
    {
        return DestroyMenuService::execute($request);
    }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Controllers/UserController.php`:

```php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\{Request, JsonResponse};
use Illuminate\Support\Facades\Auth;
use App\Models\User;
use App\Http\Resources\UserResource;
use App\Http\Requests\User\{
    StoreUserRequest,
    UpdateUserRequest
};
use App\Http\Services\User\{
    StoreUserService,
    IndexUserService,
    UpdateUserService
};



class UserController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request): JsonResponse
    {
        if (Auth::user()->isAdmin()) {
            return IndexUserService::execute($request);            
        }
        return  response()->json(["message" => "Forbidden"], 403);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\User\StoreUserRequest $request
     * @return \Illuminate\Http\JsonResponse
     */ 
    public function store(StoreUserRequest $request): JsonResponse
    {
        if (Auth::user()->isAdmin()) {
            return StoreUserService::execute($request);
        }
        return  response()->json(["message" => "Forbidden"], 403);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return App\Http\Resources\UserResource | \Illuminate\Http\Response
     */
    public function show(User $user): UserResource | JsonResponse
    {
        if (Auth::user()->isAdmin()) {
          return new UserResource($user);
        }
        return  response()->json(["message" => "Forbidden"], 403);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  App\Http\Requests\User\UpdateUserRequest $request
     * @param  \App\Models\User $user
     * @return \Illuminate\Http\JsonResponse
     */     
    public function update(UpdateUserRequest $request, User $user): JsonResponse
    {
        if (Auth::user()->isAdmin()) {
            return UpdateUserService::execute($request, $user);
        }
        return  response()->json(["message" => "Forbidden"], 403);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy(Request $request): JsonResponse
    {      
        if (Auth::user()->isAdmin()) {
            User::destroy($request->id);
            return response()->json(204);            
        }
        return  response()->json(["message" => "Forbidden"], 403);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Controllers/Controller.php`:

```php
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Controllers/TokenController.php`:

```php
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\ValidationException;

class TokenController extends Controller
{
    /**
     * This controller provides a token for mobile devices
     * It can also be used to access the API via a GUI
     * Insomnia or Postman are two examples of GUI's
     */
    public function __invoke(Request $request)
    {
      $request->validate([
        'email' => 'required|email',
        'password' => 'required',
        'device_name' => 'required',
      ]);

      $user = User::where('email', $request->email)->first();

      if (!$user || !Hash::check($request->password, $user->password)) {
        throw ValidationException::withMessages([
          'email' => ['The provided credentials are incorrect.'],
        ]);
      }

      $token = $user->createToken($request->device_name)->plainTextToken;

      return response()->json(['token' => $token], 200);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Controllers/AvatarController.php`:

```php
<?php

namespace App\Http\Controllers;

use Exception;
use Illuminate\Http\Request;
use App\Http\Resources\UserResource;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;

class AvatarController extends Controller
{
public function store(Request $request)
    {
      try {
          $user = Auth::user();
          $filePath = Storage::disk('local') //$filePath = Storage::disk('spaces')
              ->putFile('avatars/user-'.$user->id, $request->file, 'public');              
          //$user->avatar = env('DO_SPACES_PUBLIC').substr($filePath, 7, strlen($filePath)-1);
          $user->avatar = "storage/$filePath";
          $user->save();
      } catch (Exception $exception) {
          return response()->json(['message' => $exception->getMessage()], 409);
      }
      return new UserResource($user);
    }
/*    public function store(Request $request)
    {
      try {
          $user = Auth::user();
          $filePath = Storage::disk('spaces')
              ->putFile('avatars/user-'.$user->id, $request->file, 'public');
          $user->avatar = env('DO_SPACES_PUBLIC').$filePath;
          $user->save();
      } catch (Exception $exception) {
          return response()->json(['message' => $exception->getMessage()], 409);
      }
          return new UserResource($user);
    }
*/
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Controllers/RoleController.php`:

```php
<?php

namespace App\Http\Controllers;

use App\Models\Role;
use App\Http\Services\Role\{
    IndexRoleService,
    ShowRoleService,
    StoreRoleService,    
    UpdateRoleService,
    DestroyRoleService    
};
use Illuminate\Http\{
    Request,
    JsonResponse
};

class RoleController extends Controller
{

    public function index(Request $request): JsonResponse
    {
        return IndexRoleService::execute($request);
    }

    public function show(Role $role): JsonResponse
    {
        return ShowRoleService::execute($role); 
    } 

    public function store(Request $request): JsonResponse
    {
        return StoreRoleService::execute($request);
    }

    public function update(Request $request, Role $role): JsonResponse
    {
        return UpdateRoleService::execute($request, $role);
    }

    public function destroy(Request $request): JsonResponse
    {
        return DestroyRoleService::execute($request);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Middleware/Authenticate.php`:

```php
<?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Http\Request;

class Authenticate extends Middleware
{
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     */
    protected function redirectTo(Request $request): ?string
    {
        //return $request->expectsJson() ? null : route('login');
        //if (! $request->expectsJson()) {
        //    return url(env('SPA_URL') . '/login');
        //}
        return $request->expectsJson()
            ? null
                : url(env('SPA_URL').'/login');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Middleware/RedirectIfAuthenticated.php`:

```php
<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                if ($request->expectsJson()) {
                    return response()->json(['error' => 'Already authenticated.'], 200);
                }
                return redirect(RouteServiceProvider::HOME);
            }
        }

        return $next($request);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Resources/UserBasicResource.php`:

```php
<?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class UserBasicResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function toArray($request)
    {
      return [
        'id' => $this->id,
        'name' => $this->name,
        'email' => $this->email,
      ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Resources/UserResource.php`:

```php
<?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class UserResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function toArray($request)
    {
        return [
          'id' => $this->id,
          'name' => $this->name,
          'email' => $this->email,
          'avatar' => $this->avatar,
          'isAdmin' => $this->isAdmin(),
          'role_id' => $this->role_id,
          'emailVerified' => $this->email_verified_at,
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Resources/UserCollection.php`:

```php
<?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\ResourceCollection;

class UserCollection extends ResourceCollection
{
    /**
     * Transform the resource collection into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array|\Illuminate\Contracts\Support\Arrayable|\JsonSerializable
     */
    public function toArray($request)
    {
        return parent::toArray($request);
        /*return [
            'data' => $this->collection,
            'links' => [
                'self' => 'link-value',
            ],
        ];*/
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Role/ShowRoleService.php`:

```php
<?php
namespace App\Http\Services\Role;

use App\Models\Role;
use App\Repositories\Menu\{
    ListMenuRepository,
    RecursiveMenuRepository
};
use Illuminate\Http\JsonResponse;

class ShowRoleService
{

  static public function execute(Role $role): JsonResponse
  {
       $menus = ListMenuRepository::list(
              RecursiveMenuRepository::recursive()
       );

       return response()->json([
	       "role"  => (object)$role->toArray(), 
           "menus" => $menus,
       ]);
  }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Role/DestroyRoleService.php`:

```php
<?php
namespace App\Http\Services\Role;

use Illuminate\Http\{
    Request,
    JsonResponse
};
use App\Models\Role;

class DestroyRoleService
{

  static public function execute(Request $request): \Illuminate\Http\JsonResponse
  { 

      //$msg  = 'Invalid argument.';
      $role = Role::findOrFail($request->id);
      $role->delete();
      //$msg  = 'Role remove.';

      return response()->json(204);

  }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Role/UpdateRoleService.php`:

```php
<?php
namespace App\Http\Services\Role;

//use Illuminate\Support\Facades\Redirect;
//use App\Http\Validator\Role\UpdateStoreRoleValidator;
//use App\Http\Requests\Role\StoreRoleRequest;
use Illuminate\Http\{
    Request,
    JsonResponse
};
use App\Models\Role;

class UpdateRoleService
{

  //static public function execute(StoreRoleRequest $request): \Illuminate\Http\RedirectResponse
  static public function execute(Request $request, Role $role): JsonResponse
  { 

      $msg  = 'Invalid data.';
      //$code = 202;

      //if ( !UpdateMenuValidator::rule( $request )->fails() ) {
          $role->update( $request->except( '_method', 'id' ) );
          $msg  = 'Role updated.';          
          //$code = 200;          
      //}
      
      return response()->json(["message"=> $msg], 200);

  }

}



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Role/StoreRoleService.php`:

```php
<?php
namespace App\Http\Services\Role;

//use App\Http\Validator\Role\StoreRoleValidator;
//use App\Http\Requests\Role\StoreRoleRequest;
use Illuminate\Http\{
    Request,
    JsonResponse
};
use App\Models\Role;

class StoreRoleService
{

  //static public function execute(StoreRoleRequest $request): \Illuminate\Http\JsonResponse
  static public function execute(Request $request): JsonResponse
  { 

      $msg  = 'Invalid data.';

      //if ( !StoreRoleValidator::rule( $request )->fails() ) {

          Role::create([              
              "name" => $request->name,
              "menu_ids" => $request->menu_ids,
              "description" => $request->description         
          ]);         

          $msg  = 'Role stored.';

      //}

      return response()->json(["message"=> $msg], 201);

  }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Role/IndexRoleService.php`:

```php
<?php

namespace App\Http\Services\Role;

use Illuminate\Http\{
    Request,
    JsonResponse
};
use \App\Models\Role;

class IndexRoleService
{

  /**
   * Display a listing of the resource.
   *
   * @return \Inertia\Response
   */
  static public function execute(Request $request): JsonResponse
  {
      /* Initialize query */
        $query = Role::query();

        /* search */
        $search = $request->input("search");
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query->where("name", "like", "%$search%");
            });
        }

        /* sort */
        $sort = $request->input("sort");
        $direction = $request->input("direction") == "desc" ? "desc" : "asc";
        if ($sort) {
            $query->orderBy($sort, $direction);
        }

        /* get paginated results */
        $roles = $query
            ->paginate(5)
            ->appends(request()->query());
            
        return response()->json([
            "rows" => $roles,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);

  }  

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Menu/UpdateMenuService.php`:

```php
<?php
namespace App\Http\Services\Menu;

use App\Http\Validator\Menu\UpdateMenuValidator;
use App\Http\Requests\Menu\UpdateMenuRequest;
use App\Models\Menu;

class UpdateMenuService
{
 
  static public function execute(UpdateMenuRequest $request, Menu $menu): \Illuminate\Http\JsonResponse
  { 

      $msg  = 'Invalid data.';
      //$code = 202;

      if ( !UpdateMenuValidator::rule( $request )->fails() ) {      
          $menu->update( $request->except( '_method', 'id' ) );
          $msg  = 'Menu updated.';
          //$code = 200;          
      }  

      return response()->json(["message"=> $msg], 200);

  }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Menu/DestroyMenuService.php`:

```php
<?php
namespace App\Http\Services\Menu;

use App\Http\Requests\Menu\DestroyMenuRequest;
use App\Models\Menu;

class DestroyMenuService
{
 
  static public function execute(DestroyMenuRequest $request): \Illuminate\Http\JsonResponse
  { 

      $menu = Menu::findOrFail($request->id);
      $menu->delete();      
            
      return response()->json(204);

  }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Menu/ChildreMenuService.php`:

```php
<?php

namespace App\Http\Services\Menu;

use \Illuminate\Database\Eloquent\Collection;
use \App\Http\Requests\Menu\ChildrenMenuRequest;
use \App\Models\Menu;

class ChildreMenuService
{

  static public function execute(ChildrenMenuRequest $request): Collection
  {
      return $request->menuId ?
          Menu::where('menu_id', $request->menuId)->get() :
          Menu::whereNull('menu_id')->get();                
  }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Menu/StoreMenuService.php`:

```php
<?php
namespace App\Http\Services\Menu;

use Illuminate\Support\Facades\Redirect;
use App\Http\Validator\Menu\StoreMenuValidator;
use App\Http\Requests\Menu\StoreMenuRequest;
use App\Models\Menu;

class StoreMenuService
{
 
  static public function execute(StoreMenuRequest $request): \Illuminate\Http\JsonResponse
  { 

      $msg  = 'Invalid data.';      
      
      if ( !StoreMenuValidator::rule( $request )->fails() ) {

          Menu::create([
              "title" => $request->title,
              "menu_id" => $request->menu_id===0 ? null : $request->menu_id,
              "path" => $request->path,
              "icon" => $request->icon,
              "sort" => $request->sort
          ]);         

          $msg  = 'Menu stored.';
         
      }

      return response()->json(["message"=> $msg], 201);

  }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/Menu/MenuService.php`:

```php
<?php

namespace App\Http\Services\Menu;

use Illuminate\Pagination\Paginator;
use Illuminate\Support\Collection;
use Illuminate\Pagination\LengthAwarePaginator;

use \App\Repositories\Menu\{
    ListMenuRepository,
    RecursiveMenuRepository
};

class MenuService
{

  /**
   * Display a listing of the resource.
   *
   * @return \Inertia\Response
   */
  static public function execute(): \Illuminate\Http\JsonResponse
  {
      $menus = self::get(
          ListMenuRepository::list(
              RecursiveMenuRepository::recursive()
          )
      );

      return response()->json($menus, 200);      

  }
  
  static public function get($items, $perPage = 50, $page = null, $options = [])
  {
      $page = $page ?: (Paginator::resolveCurrentPage() ?: 1);
      $items = $items instanceof Collection ? $items : Collection::make($items);
      $response = new LengthAwarePaginator(
          $items->forPage($page, $perPage),
          $items->count(),
          $perPage,
          $page,
          $options
      );
      return $response->setPath(url()->current());
  }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/User/UpdateUserService.php`:

```php
<?php
namespace App\Http\Services\User;

use Illuminate\Support\Facades\Hash;
use Illuminate\Http\JsonResponse;
use App\Http\Requests\User\UpdateUserRequest;
use App\Models\User;


class UpdateUserService
{
    static public function execute(UpdateUserRequest $request, User $user) : JsonResponse
    {
        $data = $request->all();

        if (isset($data["password"]) && $data["password"]) {
            $data["password"] = Hash::make($data["password"]);
        } else {
            unset($data["password"]);
        }
            
        $user->update($data);

        return response()->json(["message"=> "Usuario actualizado"], 200);      
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/User/IndexUserService.php`:

```php
<?php

namespace App\Http\Services\User;

//use App\Http\Resources\UserCollection;
//use App\Http\Resources\UserResource;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use App\Models\User;

class IndexUserService
{

    /**
     * Display a listing of the resource.
     *
     * @return \Inertia\Response
     */
    static public function execute(Request $request): JsonResponse
    {             
        // Initialize query 
        $query = User::query();

        // search 
        $search = $request->input("search");
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                    ->where("name", "like", "%$search%")
                    ->orWhere("email", "like", "%$search%");
            });
        }

        // sort 
        $sort = $request->input("sort");
        $direction = $request->input("direction") == "desc" ? "desc" : "asc";
        
        //if ($sort) { $query->orderBy($sort, $direction); } 
        if ($sort) {
            $query->orderBy($sort, $direction);
        }

        // get paginated results 
        $users = $query
            ->paginate(5)
            ->appends(request()->query());

        return response()->json([
            "rows" => $users,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);
        // return response(User::paginate(5));             
        // return response()->json(User::paginate(5)); 
        // return UserResource::collection(User::paginate(5));
        // return new UserCollection(User::paginate(5));
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Services/User/StoreUserService.php`:

```php
<?php
namespace App\Http\Services\User;

use Illuminate\Support\Facades\Hash;
use App\Http\Requests\User\StoreUserRequest;
use App\Models\User;

class StoreUserService
{
  
    static public function execute(StoreUserRequest $request): \Illuminate\Http\JsonResponse
    {     
        $user = new User();
        $user->name = $request->name;
        $user->email = $request->email;
        $user->password = Hash::make($request->password);
        $user->role_id = $request->role_id;
        $user->save();

        return response()->json(["message"=> "Usuario creado"], 201);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Validator/Menu/StoreMenuValidator.php`:

```php
<?php

namespace App\Http\Validator\Menu;

use Illuminate\Support\Facades\Validator;
use App\Http\Requests\Menu\StoreMenuRequest;

class StoreMenuValidator
{
  
  static public function rule(StoreMenuRequest $request) {  
  
        $validator = Validator::make($request->all(), [
            'menu_id' => 'required',
            'title' => 'required',             
            'path' => 'required',
            //'icon' => 'required',
            'sort' => 'required'            
        ]);
        
        return $validator;  
  
  }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Http/Validator/Menu/UpdateMenuValidator.php`:

```php
<?php

namespace App\Http\Validator\Menu;

use Illuminate\Support\Facades\Validator;
use App\Http\Requests\Menu\UpdateMenuRequest;

class UpdateMenuValidator
{
  
  static public function rule(UpdateMenuRequest $request) {  
  
        $validator = Validator::make($request->all(), [
            'title' => 'required',             
            'path' => 'required',
            //'icon' => 'required',
            'sort' => 'required'
        ]);
        
        return $validator;
  
  }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Providers/AuthServiceProvider.php`:

```php
<?php

namespace App\Providers;

// use Illuminate\Support\Facades\Gate;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The model to policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        // 'App\Models\Model' => 'App\Policies\ModelPolicy',
    ];

    /**
     * Register any authentication / authorization services.
     */
    public function boot(): void
    {
        //
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Providers/RouteServiceProvider.php`:

```php
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to the "home" route for your application.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/home';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        $this->configureRateLimiting();

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }

    /**
     * Configure the rate limiters for the application.
     */
    protected function configureRateLimiting(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Providers/FortifyServiceProvider.php`:

```php
<?php

namespace App\Providers;

use App\Actions\Fortify\CreateNewUser;
use App\Actions\Fortify\ResetUserPassword;
use App\Actions\Fortify\UpdateUserPassword;
use App\Actions\Fortify\UpdateUserProfileInformation;
use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Str;
use Laravel\Fortify\Fortify;

class FortifyServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Fortify::createUsersUsing(CreateNewUser::class);
        Fortify::updateUserProfileInformationUsing(UpdateUserProfileInformation::class);
        Fortify::updateUserPasswordsUsing(UpdateUserPassword::class);
        Fortify::resetUserPasswordsUsing(ResetUserPassword::class);

        RateLimiter::for('login', function (Request $request) {
            $throttleKey = Str::transliterate(Str::lower($request->input(Fortify::username())).'|'.$request->ip());

            return Limit::perMinute(5)->by($throttleKey);
        });

        RateLimiter::for('two-factor', function (Request $request) {
            return Limit::perMinute(5)->by($request->session()->get('login.id'));
        });
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Providers/AppServiceProvider.php`:

```php
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Repositories/Menu/ListMenuRepository.php`:

```php
<?php
namespace App\Repositories\Menu;

class ListMenuRepository
{

   /**
   * Return a recursive array ordered in list.
   * 
   * @param Array $array recursive
   * @return Array
   */
    static public function list(Array $array): Array
    {              
        return self::_process($array);
    }
    
    static private function _process(Array $oldMenus, Array $newMenus = [], String $alias = ''): Array
    {              
         foreach ($oldMenus as $key => $value) {             
             $value->alias = $alias === '' ? $value->title : $alias . ' / ' . $value->title;
             $children_menus = $value->children_menus;
             unset($value->children_menus);
             array_push($newMenus, $value);                        
             if ($children_menus)
                $newMenus = self::_process($children_menus, $newMenus, $value->alias);
         }         
         return $newMenus;     
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Repositories/Menu/RecursiveMenuRepository.php`:

```php
<?php
namespace App\Repositories\Menu;

class RecursiveMenuRepository
{
   /**
   * Return an array of recursive.
   *
   * @return Array
   */    
    static public function recursive(Array $menuIds = []): Array
    {
        return json_decode(
            \App\Models\Menu::whereNull("menu_id")
                ->with(
                    "childrenMenus",                    
                    fn ($query) => $menuIds 
                        ? $query->whereIn("id", $menuIds)
                        : $query
                )->get()
        );
    }    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Actions/Fortify/UpdateUserPassword.php`:

```php
<?php

namespace App\Actions\Fortify;

use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Laravel\Fortify\Contracts\UpdatesUserPasswords;

class UpdateUserPassword implements UpdatesUserPasswords
{
    use PasswordValidationRules;

    /**
     * Validate and update the user's password.
     *
     * @param  array<string, string>  $input
     */
    public function update(User $user, array $input): void
    {
        Validator::make($input, [
            'current_password' => ['required', 'string', 'current_password:web'],
            'password' => $this->passwordRules(),
        ], [
            'current_password.current_password' => __('The provided password does not match your current password.'),
        ])->validateWithBag('updatePassword');

        $user->forceFill([
            'password' => Hash::make($input['password']),
        ])->save();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Actions/Fortify/PasswordValidationRules.php`:

```php
<?php

namespace App\Actions\Fortify;

use Illuminate\Validation\Rules\Password;

trait PasswordValidationRules
{
    /**
     * Get the validation rules used to validate passwords.
     *
     * @return array<int, \Illuminate\Contracts\Validation\Rule|array<mixed>|string>
     */
    protected function passwordRules(): array
    {
        return ['required', 'string', Password::default(), 'confirmed'];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Actions/Fortify/CreateNewUser.php`:

```php
<?php

namespace App\Actions\Fortify;

use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Laravel\Fortify\Contracts\CreatesNewUsers;

class CreateNewUser implements CreatesNewUsers
{
    use PasswordValidationRules;

    /**
     * Validate and create a newly registered user.
     *
     * @param  array<string, string>  $input
     */
    public function create(array $input): User
    {
        Validator::make($input, [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'email',
                'max:255',
                Rule::unique(User::class),
            ],
            'password' => $this->passwordRules(),
        ])->validate();

        return User::create([
            'name' => $input['name'],
            'email' => $input['email'],
            'password' => Hash::make($input['password']),
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Actions/Fortify/UpdateUserProfileInformation.php`:

```php
<?php

namespace App\Actions\Fortify;

use App\Models\User;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Laravel\Fortify\Contracts\UpdatesUserProfileInformation;

class UpdateUserProfileInformation implements UpdatesUserProfileInformation
{
    /**
     * Validate and update the given user's profile information.
     *
     * @param  array<string, string>  $input
     */
    public function update(User $user, array $input): void
    {
        Validator::make($input, [
            'name' => ['required', 'string', 'max:255'],

            'email' => [
                'required',
                'string',
                'email',
                'max:255',
                Rule::unique('users')->ignore($user->id),
            ],
        ])->validateWithBag('updateProfileInformation');

        if ($input['email'] !== $user->email &&
            $user instanceof MustVerifyEmail) {
            $this->updateVerifiedUser($user, $input);
        } else {
            $user->forceFill([
                'name' => $input['name'],
                'email' => $input['email'],
            ])->save();
        }
    }

    /**
     * Update the given verified user's profile information.
     *
     * @param  array<string, string>  $input
     */
    protected function updateVerifiedUser(User $user, array $input): void
    {
        $user->forceFill([
            'name' => $input['name'],
            'email' => $input['email'],
            'email_verified_at' => null,
        ])->save();

        $user->sendEmailVerificationNotification();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Actions/Fortify/ResetUserPassword.php`:

```php
<?php

namespace App\Actions\Fortify;

use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Laravel\Fortify\Contracts\ResetsUserPasswords;

class ResetUserPassword implements ResetsUserPasswords
{
    use PasswordValidationRules;

    /**
     * Validate and reset the user's forgotten password.
     *
     * @param  array<string, string>  $input
     */
    public function reset(User $user, array $input): void
    {
        Validator::make($input, [
            'password' => $this->passwordRules(),
        ])->validate();

        $user->forceFill([
            'password' => Hash::make($input['password']),
        ])->save();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Models/Menu.php`:

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;

class Menu extends Model
{
    use HasFactory;
    
    protected $hidden = [ 'created_at', 'updated_at' ];
    
    protected $fillable = [ 'title', 'menu_id', 'path', 'icon', 'sort' ];    
    
    public function menus()
    {
        return $this->hasMany(Menu::class);
    }
    
    public function childrenMenus()
    {
        return $this->hasMany(Menu::class)->with('childrenMenus');
    }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Models/Role.php`:

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Role extends Model
{
    use HasFactory;    
    
    protected $hidden = [ 'created_at', 'updated_at' ];

    protected $fillable = [ 'name', 'menu_ids', 'description' ];

    protected $casts = [
        'menu_ids' => 'array'
    ];

    /**
     * Get the users for the role.
     */
    public function users()
    {
        return $this->hasMany(\App\Models\User::class);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Models/User.php`:

```php
<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\SoftDeletes;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens, HasFactory, Notifiable, SoftDeletes;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'avatar',
        'role_id'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',                
        //'two_factor_recovery_codes',
        //'two_factor_secret',
        //'email_verified_at',
        //'created_at',
        //'updated_at',
        //'deleted_at'        
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
            'is_admin' => 'boolean',
        ];
    } 

    public function isAdmin(): bool
    {
      return $this->is_admin;
    }
   
    /**
     * Get the role that owns the user.
     */
    public function role()
    {
        return $this->belongsTo(\App\Models\Role::class);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/app/Models/Model.php`:

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model as Eloquent;
use Illuminate\Database\Eloquent\SoftDeletes;

abstract class Model extends Eloquent
{
    protected $guarded = [];

    protected $perPage = 5;

    public function resolveRouteBinding($value, $field = null)
    {
        return in_array(SoftDeletes::class, class_uses($this))
            ? $this->where($this->getRouteKeyName(), $value)->withTrashed()->first()
            : parent::resolveRouteBinding($value);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/resources/views/index.blade.php`:

```php
@extends('store::layouts.master')

@section('content')
    <h1>Hello World</h1>

    <p>Module: {!! config('store.name') !!}</p>
@endsection

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/resources/views/layouts/master.blade.php`:

```php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>Store Module - {{ config('app.name', 'Laravel') }}</title>

    <meta name="description" content="{{ $description ?? '' }}">
    <meta name="keywords" content="{{ $keywords ?? '' }}">
    <meta name="author" content="{{ $author ?? '' }}">

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    {{-- Vite CSS --}}
    {{-- {{ module_vite('build-store', 'resources/assets/sass/app.scss') }} --}}
</head>

<body>
    @yield('content')

    {{-- Vite JS --}}
    {{-- {{ module_vite('build-store', 'resources/assets/js/app.js') }} --}}
</body>

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/seeders/SubWarehouseSeeder.php`:

```php
<?php

namespace Modules\Store\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class SubWarehouseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // $this->call([]);
        $uuid1=(string)Str::uuid();
        $uuid2=(string)Str::uuid();
        $uuid3=(string)Str::uuid();
        
        DB::statement("INSERT INTO public.sub_warehouses(uuid, name, description, created_at, updated_at) VALUES ('$uuid1','Sub Almacén Uno', 'Sub Almacén Uno Sub Almacén Uno Sub Almacén Uno', now(), now())");
        DB::statement("INSERT INTO public.sub_warehouses(uuid, name, description, created_at, updated_at) VALUES ('$uuid2','Sub Almacén Dos', 'Sub Almacén Dos Sub Almacén Dos Sub Almacén Dos', now(), now())");
        DB::statement("INSERT INTO public.sub_warehouses(uuid, name, description, created_at, updated_at) VALUES ('$uuid3','Sub Almacén Tres', 'Sub Almacén Tres Sub Almacén Tres Sub Almacén Tres', now(), now())");

    }
}





```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/seeders/MovementDetailTableSeeder.php`:

```php
<?php

namespace Modules\Store\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;
use Modules\Store\Entities\MovementDetail;


class MovementDetailTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Model::unguard();

        // $this->call("OthersTableSeeder");

        MovementDetail::create([ 'movement_id' => 1, 'article_id' => 1, 'quantity' => 20 ]);
        MovementDetail::create([ 'movement_id' => 1, 'article_id' => 2, 'quantity' => 10 ]);
        MovementDetail::create([ 'movement_id' => 1, 'article_id' => 3, 'quantity' => 20 ]);

        MovementDetail::create([ 'movement_id' => 2, 'article_id' => 1, 'quantity' => 10 ]);
        MovementDetail::create([ 'movement_id' => 2, 'article_id' => 4, 'quantity' => 10 ]);

        MovementDetail::create([ 'movement_id' => 3, 'article_id' => 1, 'quantity' => 5  ]);
        MovementDetail::create([ 'movement_id' => 3, 'article_id' => 2, 'quantity' => 5  ]);

        ///////////////////////////////////////////////////////////////////////////////////

        MovementDetail::create([ 'movement_id' => 4, 'article_id' => 1, 'quantity' => 10 ]);
        MovementDetail::create([ 'movement_id' => 4, 'article_id' => 4, 'quantity' => 10 ]);

        MovementDetail::create([ 'movement_id' => 5, 'article_id' => 1, 'quantity' => 10  ]);
        MovementDetail::create([ 'movement_id' => 5, 'article_id' => 2, 'quantity' => 5  ]);

        ///////////////////////////////////////////////////////////////////////////////////

        MovementDetail::create([ 'movement_id' => 6, 'article_id' => 1, 'quantity' => 5  ]);
        MovementDetail::create([ 'movement_id' => 6, 'article_id' => 2, 'quantity' => 5  ]);

        MovementDetail::create([ 'movement_id' => 7, 'article_id' => 1, 'quantity' => 10  ]);
        MovementDetail::create([ 'movement_id' => 7, 'article_id' => 2, 'quantity' => 5   ]);

        MovementDetail::create([ 'movement_id' => 8, 'article_id' => 2, 'quantity' => 10 ]);
        MovementDetail::create([ 'movement_id' => 8, 'article_id' => 3, 'quantity' => 20 ]);
        MovementDetail::create([ 'movement_id' => 8, 'article_id' => 4, 'quantity' => 10 ]);

        // OTHER SUB-STORE ///////////////////////////////////////////////////////////////        

        MovementDetail::create([ 'movement_id' => 9, 'article_id' => 1, 'quantity' => 20 ]);
        MovementDetail::create([ 'movement_id' => 9, 'article_id' => 2, 'quantity' => 10 ]);
        MovementDetail::create([ 'movement_id' => 9, 'article_id' => 3, 'quantity' => 20 ]);
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/seeders/MovementTableSeeder.php`:

```php
<?php

namespace Modules\Store\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;
use Modules\Store\Entities\Movement;
use Modules\Store\Entities\SubWarehouse;

//use Illuminate\Support\Facades\DB;

class MovementTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Model::unguard();

        $subStores = SubWarehouse::all();
        $storeUuid = $subStores->first()->uuid;
        $faker = \Faker\Factory::create();
        $today = date("Y-m-d");        
        
        Movement::create([
            'type_id' => 1,
           // 'number' => '1',
            'date_time' => date("Y-m-d H:i:s", strtotime($today."- 3 days")),
            'subject' => $faker->name,
            'description' => $faker->text(10),
            'observation' => $faker->text(10),
            'support_type_id' => 1,
            'support_number' => '000000000Z',
            'support_date' => date("Y-m-d H:i:s", strtotime($today."- 3 days")),
            // 'store_uuid' => $storeUuid // No more needed here
        ]);

        Movement::create([
            'type_id' => 1,
            //'number' => '2',
            'date_time' => date("Y-m-d H:i:s", strtotime($today."- 3 days")),
            'subject' => $faker->name,
            'description' => $faker->text(10),
            'observation' => $faker->text(10),                        
            'support_type_id' => 1,
            'support_number' => '000000000Y',
            'support_date' => date("Y-m-d H:i:s", strtotime($today."- 3 days")),
            // 'store_uuid' => $storeUuid // No more needed here
        ]);
        
        Movement::create([
            'type_id' => 2,
            //'number' => '3',
            'date_time' => date("Y-m-d H:i:s", strtotime($today."- 3 days")),
            'subject' => $faker->name,
            'description' => $faker->text(10),
            'observation' => $faker->text(10),
            'support_type_id' => 4,
            'support_number' => '000000000X',
            'support_date' => date("Y-m-d H:i:s", strtotime($today."- 3 days")),
            // 'store_uuid' => $storeUuid // No more needed here
        ]);
        
        //////////////////////////////////////////////////////////////////////

        Movement::create([
            'type_id' => 3,
           // 'number' => '4',
            'date_time' => date("Y-m-d H:i:s", strtotime($today."- 2 days")),
            'subject' => $faker->name,
            'description' => $faker->text(10),
            'observation' => $faker->text(10),
            'support_type_id' => 1,
            'support_number' => '0000000002',
            'support_date' => date("Y-m-d H:i:s", strtotime($today."- 2 days")),
            // 'store_uuid' => $storeUuid // No more needed here
        ]);
    
        Movement::create([
            'type_id' => 2,
            //'number' => '5',
            'date_time' => date("Y-m-d H:i:s", strtotime($today."- 2 days")),
            'subject' => $faker->name,
            'description' => $faker->text(10),
            'observation' => $faker->text(10),
            'support_type_id' => 4,
            'support_number' => '000000000W',
            'support_date' => date("Y-m-d H:i:s", strtotime($today."- 2 days")),
            // 'store_uuid' => $storeUuid // No more needed here
        ]);

        //////////////////////////////////////////////////////////////////////

        Movement::create([
            'type_id' => 4,
            // 'number' => '6',
            'date_time' => date("Y-m-d H:i:s", strtotime($today."- 1 days")),
            'subject' => $faker->name,
            'description' => $faker->text(10),
            'observation' => $faker->text(10),
            'support_type_id' => 4,
            'support_number' => '000000000X',
            'support_date' => date("Y-m-d H:i:s", strtotime($today."- 1 days")),
            // 'store_uuid' => $storeUuid // No more needed here
        ]);
        Movement::create([
            'type_id' => 2,
            //'number' => '7',
            'date_time' => date("Y-m-d H:i:s", strtotime($today."- 1 days")),
            'subject' => $faker->name,
            'description' => $faker->text(10),
            'observation' => $faker->text(10),                        
            'support_type_id' => 1,
            'support_number' => '000000000Y',
            'support_date' => date("Y-m-d H:i:s", strtotime($today."- 1 days")),
            // 'store_uuid' => $storeUuid // No more needed here
        ]);
        
        Movement::create([
            'type_id' => 1,
            //'number' => '8',
            'date_time' => date("Y-m-d H:i:s", strtotime($today."- 1 days")),
            'subject' => $faker->name,
            'description' => $faker->text(10),
            'observation' => $faker->text(10),
            'support_type_id' => 4,
            'support_number' => '000000000X',
            'support_date' => date("Y-m-d H:i:s", strtotime($today."- 1 days")),
            // 'store_uuid' => $storeUuid // No more needed here
        ]);

        Movement::create([
            'type_id' => 1,
            //'number' => '9',
            'date_time' => date("Y-m-d H:i:s", strtotime($today)),
            'subject' => $faker->name,
            'description' => $faker->text(10),
            'observation' => $faker->text(10),
            'support_type_id' => 4,
            'support_number' => '0000000XYZ',
            'support_date' => date("Y-m-d H:i:s", strtotime($today)),
            // 'store_uuid' => $subStores->last()->uuid // No more needed here
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/seeders/SupportTypesSeeder.php`:

```php
<?php

namespace Modules\Store\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class SupportTypesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // $this->call([]);
        DB::statement("INSERT INTO public.support_types(name, movement_type_id) VALUES ('ORDEN DE COMPRA', 1)");
        DB::statement("INSERT INTO public.support_types(name, movement_type_id) VALUES ('FACTURA', 2)");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/seeders/StoreDatabaseSeeder.php`:

```php
<?php

namespace Modules\Store\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;

class StoreDatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Model::unguard();

        // $this->call("MovementTableSeeder");
        $this->call([
            //OthersTableSeeder:class,
            SubWarehouseSeeder::class,
            MovementTableSeeder::class,
            MovementDetailTableSeeder::class,
            SupportTypesSeeder::class
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2024_11_14_141710_create_annual_closings.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('annual_closings', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('id_article');
            $table->integer('incoming_quantity');
            $table->integer('outgoing_quantity');
            $table->integer('incoming_quantity_reversed');
            $table->integer('outgoing_quantity_reversed');
            $table->integer('user_id')->default(1);
            $table->timestamp('close');  
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('annual_closings');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_15_181548_create_view_stock_movement.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewStockMovement extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_stock_movement
 AS
 SELECT DISTINCT a.article_id,
        CASE
            WHEN i.quantity IS NULL THEN 0::bigint
            ELSE i.quantity
        END AS inputs,
        CASE
            WHEN o.quantity IS NULL THEN 0::bigint
            ELSE o.quantity
        END AS outputs,
        CASE
            WHEN ri.quantity IS NULL THEN 0::bigint
            ELSE ri.quantity
        END AS reverse_inputs,
        CASE
            WHEN ro.quantity IS NULL THEN 0::bigint
            ELSE ro.quantity
        END AS reverse_outputs,
    COALESCE(i.quantity, 0::bigint) - COALESCE(ri.quantity, 0::bigint) - (COALESCE(o.quantity, 0::bigint) - COALESCE(ro.quantity, 0::bigint)) AS total
   FROM ( SELECT movement_details.id,
            --movement_details.movement_id,
            movement_details.article_id,
            --movement_details.quantity,
            movement_details.close --,
            --movement_details.id_user_insert,
            --movement_details.id_user_update,
            --movement_details.created_at,
            --movement_details.updated_at
           FROM movement_details) a
     LEFT JOIN ( SELECT view_article_quantity_input.article_id,
            view_article_quantity_input.quantity
           FROM view_article_quantity_input) i ON a.article_id = i.article_id
     LEFT JOIN ( SELECT view_article_quantity_output.article_id,
            view_article_quantity_output.quantity
           FROM view_article_quantity_output) o ON a.article_id = o.article_id
     LEFT JOIN ( SELECT view_article_quantity_reverse_input.article_id,
            view_article_quantity_reverse_input.quantity
           FROM view_article_quantity_reverse_input) ri ON a.article_id = ri.article_id
     LEFT JOIN ( SELECT view_article_quantity_reverse_output.article_id,
            view_article_quantity_reverse_output.quantity
           FROM view_article_quantity_reverse_output) ro ON a.article_id = ro.article_id
  WHERE a.close IS NULL;

ALTER TABLE public.view_stock_movement
    OWNER TO postgres;       
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_stock_movement CASCADE;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_17_001676_create_function_daily_closing_valid_dates.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateFunctionDailyClosingValidDates extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE FUNCTION public.daily_closing_valid_dates(i_date_from date, i_date_to date) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
        RETURN (i_date_from = (SELECT min(date_time::date) FROM public.movements WHERE close IS NULL)) 
               AND 
               (i_date_to <= now());
END;
$$;

ALTER FUNCTION public.daily_closing_valid_dates(date, date) OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP FUNCTION public.daily_closing_valid_dates;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_07_202921_create_movements_generate_number_trigger.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMovementsGenerateNumberTrigger extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
            CREATE OR REPLACE FUNCTION public.movements_generate_number()
                RETURNS trigger
                LANGUAGE 'plpgsql'
                COST 100
                VOLATILE NOT LEAKPROOF
            AS \$BODY\$
            BEGIN
                  NEW.number:=lpad(cast(NEW.id as character varying),10,'0');
                  return NEW;
                END;
            \$BODY\$;

            ALTER FUNCTION public.movements_generate_number()
                OWNER TO postgres;        
        ");
        
        DB::unprepared("                
            CREATE TRIGGER movement_generate_number
                BEFORE INSERT
                ON public.movements
                FOR EACH ROW
                EXECUTE PROCEDURE public.movements_generate_number();         
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("
            DROP TRIGGER movement_generate_number ON public.movements                      
        ");
        
        DB::unprepared("
            DROP FUNCTION public.movements_generate_number();            
        ");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_15_232646_create_view_stock_close_day.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewStockCloseDay extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_stock_close_day
 AS
 SELECT a.article_id,
        CASE
            WHEN a.quantity_input IS NULL THEN 0
            ELSE a.quantity_input
        END AS inputs,
        CASE
            WHEN a.quantity_output IS NULL THEN 0
            ELSE a.quantity_output
        END AS outputs,
        CASE
            WHEN a.quantity_reverse_input IS NULL THEN 0
            ELSE a.quantity_reverse_input
        END AS reverse_inputs,
        CASE
            WHEN a.quantity_reverse_output IS NULL THEN 0
            ELSE a.quantity_reverse_output
        END AS reverse_outputs,
    COALESCE(a.quantity_input, 0) - COALESCE(a.quantity_reverse_input, 0) - (COALESCE(a.quantity_output, 0) - COALESCE(a.quantity_reverse_output, 0)) AS total
   FROM ( SELECT close_days.id,
            close_days.article_id,
            close_days.quantity_input,
            close_days.quantity_output,
            close_days.quantity_reverse_input,
            close_days.quantity_reverse_output,
            close_days.close--,
            --close_days.id_user_insert,
            --close_days.created_at,
            --close_days.updated_at
           FROM close_days) a
  WHERE true;

ALTER TABLE public.view_stock_close_day
    OWNER TO postgres;    
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_stock_close_day CASCADE;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_15_163624_create_view_article_quantity_reverse_output.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewArticleQuantityReverseOutput extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_article_quantity_reverse_output
 AS
 SELECT a.article_id,
    sum(a.quantity) AS quantity
   FROM movement_details a
     JOIN movements b ON a.movement_id = b.id AND b.close IS NULL
  WHERE b.type_id = 4
  GROUP BY a.article_id;

ALTER TABLE public.view_article_quantity_reverse_output
    OWNER TO postgres;        
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_article_quantity_reverse_output;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_15_163549_create_view_article_quantity_reverse_input.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewArticleQuantityReverseInput extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_article_quantity_reverse_input
 AS
 SELECT a.article_id,
    sum(a.quantity) AS quantity
   FROM movement_details a
     JOIN movements b ON a.movement_id = b.id AND b.close IS NULL
  WHERE b.type_id = 3
  GROUP BY a.article_id;

ALTER TABLE public.view_article_quantity_reverse_input
    OWNER TO postgres;        
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_article_quantity_reverse_input;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_15_163439_create_view_article_quantity_input.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewArticleQuantityInput extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_article_quantity_input
 AS
 SELECT a.article_id,
    sum(a.quantity) AS quantity
   FROM movement_details a
     JOIN movements b ON a.movement_id = b.id AND b.close IS NULL
  WHERE b.type_id = 1
  GROUP BY a.article_id;

ALTER TABLE public.view_article_quantity_input
    OWNER TO postgres;        
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_article_quantity_input;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_16_001676_create_view_existence_daily_closing.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewExistenceDailyClosing extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE VIEW public.view_existence_daily_closing AS
 SELECT a.article_id,
        CASE
            WHEN (a.quantity_input IS NULL) THEN 0
            ELSE a.quantity_input
        END AS entradas,
        CASE
            WHEN (a.quantity_output IS NULL) THEN 0
            ELSE a.quantity_output
        END AS salidas,
        CASE
            WHEN (a.quantity_reverse_input IS NULL) THEN 0
            ELSE a.quantity_reverse_input
        END AS reverso_entradas,
        CASE
            WHEN (a.quantity_reverse_output IS NULL) THEN 0
            ELSE a.quantity_reverse_output
        END AS reverso_salidas,
    ((COALESCE(a.quantity_input, 0) - COALESCE(a.quantity_reverse_input, 0)) - (COALESCE(a.quantity_output, 0) - COALESCE(a.quantity_reverse_output, 0))) AS total
   FROM public.close_days a
  WHERE true;

ALTER TABLE public.view_existence_daily_closing
    OWNER TO postgres;   
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_existence_daily_closing;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_15_163517_create_view_article_quantity_output.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewArticleQuantityOutput extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_article_quantity_output
 AS
 SELECT a.article_id,
    sum(a.quantity) AS quantity
   FROM movement_details a
     JOIN movements b ON a.movement_id = b.id AND b.close IS NULL
  WHERE b.type_id = 2
  GROUP BY a.article_id;

ALTER TABLE public.view_article_quantity_output
    OWNER TO postgres;       
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_article_quantity_output;");        
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_16_001665_create_view_closure_pre_insert_aux.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewClosurePreInsertAux extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE VIEW public.view_closure_pre_insert_aux AS 
   SELECT b.date_time,
    a.article_id,
    sum(a.quantity) AS sum,
    b.type_id
   FROM (public.movement_details a
     JOIN public.movements b ON ((a.movement_id = b.id)))
  WHERE ((a.close IS NULL) AND (b.close IS NULL))
  GROUP BY b.date_time, a.article_id, b.type_id
  ORDER BY b.date_time, a.article_id, b.type_id;

ALTER TABLE public.view_closure_pre_insert_aux
    OWNER TO postgres;   
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_closure_pre_insert_aux;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_07_195327_create_movements_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMovementsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('movements', function (Blueprint $table) {
            //$table->id();
            $table->increments('id');
            $table->integer('type_id');
            $table->string('number', 10);
            $table->dateTime('date_time',0)->useCurrent();
            $table->string('subject', 40);
            $table->text('description')->nullable();
            $table->text('observation')->nullable();
            $table->date('close')->nullable();
            $table->integer('support_type_id');
            $table->string('support_number', 10);
            $table->dateTime('support_date',0);           
            $table->integer('user_insert_id')->default(1);
            $table->integer('user_update_id')->default(1);
            $table->integer('user_edit_id')->default(1);
            $table->boolean('editing')->default(false);
            //$table->uuid('store_uuid')->nullable()->default(null); // No more needed here
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('movements');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_19_001676_create_function_daily_closing_register.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateFunctionDailyClosingRegister extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE FUNCTION public.daily_closing_register(i_date date, i_user_id integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
	INSERT INTO public.close_days(
		article_id,
        accumulated,
		quantity_input, 
		quantity_output, 
		quantity_reverse_input, 
		quantity_reverse_output,
        created_at,
        updated_at,
		close, 
		id_user_insert		
	) SELECT 
	    view_closure_pre_insert.article_id,
        COALESCE(view_total_articles_by_daily_closing.total, 0::numeric),
		quantity_input, 
		quantity_output,
		quantity_reverse_input, 
		quantity_reverse_output,
        now(),
        now(),
		i_date, 
		i_user_id        
		FROM view_closure_pre_insert
		  LEFT JOIN view_total_articles_by_daily_closing
		    ON view_closure_pre_insert.article_id = view_total_articles_by_daily_closing.article_id
		WHERE date_time::date = i_date;		
		
	UPDATE public.movements SET close = now()
		WHERE date_time::date = i_date;
		
	UPDATE public.movement_details SET close = now()
		WHERE movement_id IN (SELECT id FROM public.movements WHERE date_time::date = i_date);
		
	RETURN true;
END;
$$;

ALTER FUNCTION public.daily_closing_register(date, integer) OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP FUNCTION public.daily_closing_register;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_16_001676_create_view_closure_pre_insert.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewClosurePreInsert extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
 CREATE VIEW public.view_closure_pre_insert AS
 SELECT a.date_time,
    a.article_id,
        CASE
            WHEN (sum(b.sum) IS NULL) THEN ((0)::bigint)::numeric
            ELSE sum(b.sum)
        END AS quantity_input,
        CASE
            WHEN (sum(c.sum) IS NULL) THEN ((0)::bigint)::numeric
            ELSE sum(c.sum)
        END AS quantity_output,
        CASE
            WHEN (sum(d.sum) IS NULL) THEN ((0)::bigint)::numeric
            ELSE sum(d.sum)
        END AS quantity_reverse_input,
        CASE
            WHEN (sum(e.sum) IS NULL) THEN ((0)::bigint)::numeric
            ELSE sum(e.sum)
        END AS quantity_reverse_output
   FROM ((((public.view_clousure_mov_date_time_article a
     LEFT JOIN public.view_closure_pre_insert_aux b ON (((a.article_id = b.article_id) AND (b.type_id = 1) AND (a.date_time = b.date_time))))
     LEFT JOIN public.view_closure_pre_insert_aux c ON (((a.article_id = c.article_id) AND (c.type_id = 2) AND (a.date_time = c.date_time))))
     LEFT JOIN public.view_closure_pre_insert_aux d ON (((a.article_id = d.article_id) AND (d.type_id = 3) AND (a.date_time = d.date_time))))
     LEFT JOIN public.view_closure_pre_insert_aux e ON (((a.article_id = e.article_id) AND (e.type_id = 4) AND (a.date_time = e.date_time))))
  GROUP BY a.date_time, a.article_id
  ORDER BY a.date_time, a.article_id;

ALTER TABLE public.view_closure_pre_insert
    OWNER TO postgres;   
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_closure_pre_insert;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2024_12_12_754887_create_view_stocks_by_accumulated_plus_unclosed_movements.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewStocksByAccumulatedPlusUnclosedMovements extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_stocks_by_accumulated_plus_unclosed_movements
 AS
 SELECT a.id,
    a.int_cod,
    a.name,
    COALESCE(b.total, 0::bigint) AS accumulated,
    COALESCE(c.inputs, 0::numeric) AS inputs,
    COALESCE(c.outputs, 0::numeric) AS outputs,
    COALESCE(c.reverse_inputs, 0::numeric) AS reverse_inputs,
    COALESCE(c.reverse_outputs, 0::numeric) AS reverse_outputs,
    COALESCE(b.total, 0::bigint)::numeric + (COALESCE(c.inputs, 0::numeric) - COALESCE(c.reverse_inputs, 0::numeric)) - (COALESCE(c.outputs, 0::numeric) - COALESCE(c.reverse_outputs, 0::numeric)) AS stock_current,
    a.stock_min,
    a.stock_max
   FROM articles a
     LEFT JOIN view_total_articles_by_daily_closing b ON b.article_id = a.id
     LEFT JOIN view_articles_sum_by_unclosed_movements c ON c.article_id = a.id
  ORDER BY a.id;

ALTER TABLE public.view_stocks_by_accumulated_plus_unclosed_movements
    OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_articles_sum_by_unclosed_movements;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2024_09_16_184406_create_support_types_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('support_types', function (Blueprint $table) {
            $table->id();
            $table->string('name', 30)->unique();
            $table->integer('movement_type_id');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('support_types');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2024_12_12_151810_create_view_total_articles_by_daily_closing.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewTotalArticlesByDailyClosing extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_total_articles_by_daily_closing
 AS
 SELECT article_id,
    sum(total) AS total
   FROM ( SELECT view_stock_close_day.article_id,
            view_stock_close_day.total
           FROM view_stock_close_day) alias
  GROUP BY article_id;

ALTER TABLE public.view_total_articles_by_daily_closing
    OWNER TO postgres;  
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_total_articles_by_daily_closing;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_07_195353_create_movement_details_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMovementDetailsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('movement_details', function (Blueprint $table) {
            //$table->id();
            $table->increments('id');
            //$table->integer('movement_id');
            $table->integer('movement_id')->nullable()->unsigned();

            $table->integer('article_id');
            $table->integer('quantity')->default(1);
            $table->date('close')->nullable();
            $table->integer('user_insert_id')->default(1);
            $table->integer('user_update_id')->default(1);
            $table->unique(['movement_id', 'article_id']);
            $table->foreign('movement_id')->references('id')->on('movements');
            //$table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //Schema::dropIfExists('movement_details');
        DB::unprepared("DROP TABLE public.movement_details CASCADE;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_16_001660_create_view_clousure_mov_date_time_article.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewClousureMovDateTimeArticle extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
 CREATE VIEW public.view_clousure_mov_date_time_article AS
 SELECT DISTINCT b.date_time,
    a.article_id
   FROM (public.movement_details a
     LEFT JOIN public.movements b ON ((a.movement_id = b.id)))
  WHERE ((a.close IS NULL) AND (b.close IS NULL))
  ORDER BY b.date_time, a.article_id;

ALTER TABLE public.view_clousure_mov_date_time_article
    OWNER TO postgres;   
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_clousure_mov_date_time_article;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_20_001676_create_function_daily_closing.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateFunctionDailyClosing extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE FUNCTION public.daily_closing(i_date_from date, i_date_to date, i_user_id integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
        o_return boolean;
        v_date date;        
BEGIN
	o_return:=false;
        IF (SELECT public.daily_closing_valid_dates(i_date_from, i_date_to)) THEN
		v_date = i_date_from;
		WHILE v_date <= i_date_to LOOP
			IF  (SELECT public.daily_closing_date_exists(v_date)) THEN
			        SELECT public.daily_closing_register(v_date, i_user_id) INTO o_return;				
			END IF;
			SELECT ( v_date + interval '1 day') INTO v_date; 
		END LOOP;
	END IF;  
	
	RETURN o_return;
	
END;
$$;

ALTER FUNCTION public.daily_closing(date, date, integer) OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP FUNCTION public.daily_closing;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2024_12_26_174239_create_sub_warehouses_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('sub_warehouses', function (Blueprint $table) {
            $table->id();
            $table->uuid('uuid')->unique();
            $table->string('name');
            $table->text('description');            
            $table->timestamps();
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('sub_warehouses');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_15_231004_create_close_days_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateCloseDaysTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('close_days', function (Blueprint $table) {
            $table->id();
            $table->integer('article_id');
            $table->integer('accumulated')->default(0);
            $table->integer('quantity_input')->default(0);
            $table->integer('quantity_output')->default(0);
            $table->integer('quantity_reverse_input')->default(0);
            $table->integer('quantity_reverse_output')->default(0);            
            $table->date('close')->useCurrent();
            $table->integer('id_user_insert')->default(1);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('close_days');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2024_11_14_141514_create_monthly_closings.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('monthly_closings', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('id_article');
            $table->integer('incoming_quantity');
            $table->integer('outgoing_quantity');
            $table->integer('incoming_quantity_reversed');
            $table->integer('outgoing_quantity_reversed');
            $table->integer('user_id')->default(1);
            $table->timestamp('close');            
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('monthly_closings');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_16_001654_create_view_stock.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewStock extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_stocks
 AS
 SELECT alias.article_id,
    sum(alias.inputs) AS inputs,
    sum(alias.outputs) AS outputs,
    sum(alias.reverse_inputs) AS reverse_inputs,
    sum(alias.reverse_outputs) AS reverse_outputs,
    sum(alias.total) AS total
   FROM ( SELECT view_stock_movement.article_id,
            view_stock_movement.inputs,
            view_stock_movement.outputs,
            view_stock_movement.reverse_inputs,
            view_stock_movement.reverse_outputs,
            view_stock_movement.total
           FROM view_stock_movement
        UNION ALL
         SELECT view_stock_close_day.article_id,
            view_stock_close_day.inputs,
            view_stock_close_day.outputs,
            view_stock_close_day.reverse_inputs,
            view_stock_close_day.reverse_outputs,
            view_stock_close_day.total
           FROM view_stock_close_day) alias
  GROUP BY alias.article_id;

ALTER TABLE public.view_stocks
    OWNER TO postgres;   
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_stocks;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2024_11_14_133356_create_daily_closings.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('daily_closings', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('id_article');
            $table->integer('incoming_quantity');
            $table->integer('outgoing_quantity');
            $table->integer('incoming_quantity_reversed');
            $table->integer('outgoing_quantity_reversed');
            $table->integer('user_id')->default(1);
            $table->timestamp('close');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('daily_closings');
    }
};

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2024_12_12_254880_create_view_articles_sum_by_unclosed_movements.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateViewArticlesSumByUnclosedMovements extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE VIEW public.view_articles_sum_by_unclosed_movements
 AS
 SELECT article_id,
    sum(inputs) AS inputs,
    sum(outputs) AS outputs,
    sum(reverse_inputs) AS reverse_inputs,
    sum(reverse_outputs) AS reverse_outputs,
    sum(total) AS total
   FROM ( SELECT view_stock_movement.article_id,
            view_stock_movement.inputs,
            view_stock_movement.outputs,
            view_stock_movement.reverse_inputs,
            view_stock_movement.reverse_outputs,
            view_stock_movement.total
           FROM view_stock_movement) alias
  GROUP BY article_id;

ALTER TABLE public.view_articles_sum_by_unclosed_movements
    OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP VIEW public.view_articles_sum_by_unclosed_movements;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/database/migrations/2020_12_18_001676_create_function_daily_closing_date_exists.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateFunctionDailyClosingDateExists extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE OR REPLACE FUNCTION public.daily_closing_date_exists(i_date date) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN

        RETURN (SELECT CASE WHEN count(*)=0 THEN false ELSE true END 
		FROM public.movements 
			WHERE close IS NULL AND date_time::date = i_date);

END;
$$;

ALTER FUNCTION public.daily_closing_date_exists(date) OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared("DROP FUNCTION public.daily_closing_date_exists;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/config/config.php`:

```php
<?php

return [
    'name' => 'Store',
];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/composer.json`:

```json
{
    "name": "nwidart/store",
    "description": "",
    "authors": [
        {
            "name": "Nicolas Widart",
            "email": "n.widart@gmail.com"
        }
    ],
    "extra": {
        "laravel": {
            "providers": [],
            "aliases": {

            }
        }
    },
    "autoload": {
        "psr-4": {
            "Modules\\Store\\": "app/",
            "Modules\\Store\\Database\\Factories\\": "database/factories/",
            "Modules\\Store\\Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Modules\\Store\\Tests\\": "tests/"
        }
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Enums/MovementTypeEnum.php`:

```php
<?php

namespace Modules\Store\Enums;

enum MovementTypeEnum: string
{
    case INPUT = '1';
    case OUTPUT = '2';
    case INPUT_REVERSES = '3';
    case OUTPUT_REVERSES = '4';

    public static function isNotValid($value)
    {
        return !self::isValid($value);
    }

    public static function isValid($value)
    {
        return in_array($value, self::values());
    }

    public static function values()
    {
        return [self::INPUT->value, self::OUTPUT->value, self::INPUT_REVERSES->value, self::OUTPUT_REVERSES->value];
    }

    public static function names()
    {
        return [self::INPUT->name, self::OUTPUT->name, self::INPUT_REVERSES->name, self::OUTPUT_REVERSES->name];
    }
}
// https://stackoverflow.com/questions/76174730/is-it-possible-to-define-the-type-of-a-parameter-as-enum-values
```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Requests/SubWarehouse/UpdateSubWarehouseRequest.php`:

```php
<?php

namespace Modules\Store\Http\Requests\SubWarehouse;

use Illuminate\Foundation\Http\FormRequest;

class UpdateSubWarehouseRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     */
    public function rules(): array
    {
        return [
            // "uuid" => ["required"],  
            "name" => ["required"],  
            "description" => ["required"] 
            
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Requests/SubWarehouse/StoreSubWarehouseRequest.php`:

```php
<?php

namespace Modules\Store\Http\Requests\SubWarehouse;

use Illuminate\Foundation\Http\FormRequest;

class StoreSubWarehouseRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     */
    public function rules(): array
    {
        return [
            // "uuid" => ["required"],  
            "name" => ["required"],  
            "description" => ["required"] 
            
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Controllers/StoreController.php`:

```php
<?php

namespace Modules\Store\Http\Controllers;

use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;

class StoreController extends Controller
{
    /**
     * Display a listing of the resource.
     * @return Renderable
     */
    public function index()
    {
        return view('store::index');
    }

    /**
     * Show the form for creating a new resource.
     * @return Renderable
     */
    public function create()
    {
        return view('store::create');
    }

    /**
     * Store a newly created resource in storage.
     * @param Request $request
     * @return Renderable
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Show the specified resource.
     * @param int $id
     * @return Renderable
     */
    public function show($id)
    {
        return view('store::show');
    }

    /**
     * Show the form for editing the specified resource.
     * @param int $id
     * @return Renderable
     */
    public function edit($id)
    {
        return view('store::edit');
    }

    /**
     * Update the specified resource in storage.
     * @param Request $request
     * @param int $id
     * @return Renderable
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     * @param int $id
     * @return Renderable
     */
    public function destroy($id)
    {
        //
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Controllers/SubWarehouseController.php`:

```php
<?php

namespace Modules\Store\Http\Controllers;

use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\{Request, JsonResponse};
use Illuminate\Routing\Controller;
use Modules\Store\Http\Resources\SubWarehouseResource;
use Modules\Store\Http\Requests\SubWarehouse\{
    StoreSubWarehouseRequest,
    UpdateSubWarehouseRequest
};
use Modules\Store\Http\Services\SubWarehouse\{
    StoreSubWarehouseService,
    IndexSubWarehouseService,
    UpdateSubWarehouseService
};
use Modules\Store\Entities\SubWarehouse;

class SubWarehouseController extends Controller
{
    /*
     * Display a listing of the resource.
     */
    public function index(Request $request): JsonResponse
    {
        return IndexSubWarehouseService::execute($request);
    }

    /**
     * Store a newly created resource in storage.
     */ 
    public function store(StoreSubWarehouseRequest $request): JsonResponse
    {
        return StoreSubWarehouseService::execute($request);
    }

    /**
     * Display the specified resource.
    */
    public function show(SubWarehouse $sub_warehouse): SubWarehouseResource | JsonResponse
    {
        return new SubWarehouseResource($sub_warehouse);
    }

    /**
     * Update the specified resource in storage.
     */     
    public function update(UpdateSubWarehouseRequest $request, SubWarehouse $sub_warehouse): JsonResponse
    {
        return UpdateSubWarehouseService::execute($request, $sub_warehouse);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Request $request): JsonResponse
    {      
        SubWarehouse::destroy($request->id);
        return response()->json(204);
    }

    /*
     * Display a listing of the resource to help.
     */
    public function help(): JsonResponse
    {
        return response()->json(SubWarehouse::all());
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Controllers/MovementDetailController.php`:

```php
<?php

namespace Modules\Store\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Routing\Controller;
use Illuminate\Database\Eloquent\Collection;
use Modules\Store\Entities\Movement;
use Modules\Store\Entities\MovementDetail;
//use Modules\Article\Repositories\ArticleDetailRepository;
//use Modules\Article\Http\Requests\ArticleDetail\{
//    StoreArticleDetailRequest,
//    UpdateArticleDetailRequest    
//};
//use Modules\Article\Http\Services\ArticleDetail\{
//    StoreArticleDetailService,
//    UpdateArticleDetailService
//}; 

class MovementDetailController extends Controller
{
    /**
     * Display a listing of the resource by parent.
     */
    public function getAllByMovement(Request $request)//: Collection
    {
        //return response()->json($request, 201); $request->movementId
        
        $movementDetails = MovementDetail::
          select("articles.*", "movement_details.*")
          ->join('articles', 'movement_details.article_id', '=', 'articles.id')        
          ->where('movement_id', $request->movementId)->get();
        
        return response()->json($movementDetails);
        //return MovementDetailRepository::getAllByMovement($request);
    }

    private static function validateTypeId(int $typeId)
    {
        if ($typeId===3) {
          return 1;
        } else if ($typeId===4) {
          return 2;
        } else {
          return 0;
        }

    }

    public function getAllByNumber(Request $request)//: Collection
    {
        $typeId = self::validateTypeId((int)$request->typeId);

        $movement = Movement::select('id')
            ->where([
                [ 'number', $request->supportNumber ],
                [ 'type_id', '=' , self::validateTypeId((int)$request->typeId) ]
            ])            
            ->first();
        
        if ($movement && $movement->id) {
            $movementDetails = MovementDetail::select("articles.*", "movement_details.*")
                ->join('articles', 'movement_details.article_id', '=', 'articles.id')        
                ->where('movement_id', $movement->id)
                ->get();

            return response()->json($movementDetails);
        }

        return response()->json([]);        
    }    

    /**
     * Store a newly created resource in storage.
     */    
    //public function store(StoreArticleDetailRequest $request): JsonResponse
    //public function store(Request $request): JsonResponse
    //{
    //    //return  response()->json($request, 201);
    //    return StoreArticleDetailService::execute($request);
    //}
    
    /**
     * Update the specified resource in storage.
     */
    //public function update(UpdateArticleDetailRequest $request, ArticleDetail $article_detail): JsonResponse
    //{
    //    return UpdateArticleDetailService::execute($request, $article_detail);
    //}

    /**
     * Remove the specified resource from storage.
     */
    //public function destroy(Request $request): JsonResponse
    //{
    //    ArticleDetail::destroy($request->id);

    //    return response()->json(204);            
    //}
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Controllers/DailyClosingController.php`:

```php
<?php

namespace Modules\Store\Http\Controllers;

use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\{Request, JsonResponse};
use Illuminate\Routing\Controller;
use DB;
//use Modules\Store\Entities\Movement;
//use Modules\Store\Http\Resources\MovementResource;
use Modules\Store\Http\Services\DailyClosing\{ IndexDailyClosingService };
// use Modules\Store\Http\Requests\Movement\{ StoreMovementRequest, UpdateMovementRequest};

class DailyClosingController extends Controller
{
    public function index(Request $request): JsonResponse
    {
        return IndexDailyClosingService::execute($request);
    }

    public function show(Request $request): JsonResponse
    {
        $query = DB::table('close_days')
        ->selectRaw(
            'close,
            article_id,
            articles.int_cod,
            articles.name,
            sum(accumulated) as accumulated,
            sum(quantity_input) as quantity_input, 
            sum(quantity_output) as quantity_output, 
            sum(quantity_reverse_input) as quantity_reverse_input, 
            sum(quantity_reverse_output) as quantity_reverse_output'
        )
        ->join('articles', 'article_id', '=', 'articles.id')
        ->where('close', $request->close)
        ->groupBy('close', 'article_id', 'articles.int_cod', 'articles.name')
        ->get();

        return response()->json($query);
    }

    public function getPreDailyClosing(): JsonResponse
    {
        $query = DB::table('view_closure_pre_insert')
        ->selectRaw(
            'date_time,
            article_id,
            articles.int_cod,
            articles.name,
            quantity_input,
            quantity_output,
            quantity_reverse_input,
            quantity_reverse_output'
        )
        ->join('articles', 'article_id', '=', 'articles.id')
        ->get();

        return response()->json($query);

    }

    public function store(Request $request): JsonResponse
    {


        //try {
            $date = $request->date;
            $result = DB::select("select daily_closing(?,?,?)", array($date, $date, 1));
            return response()->json($result);

        //} catch (\Exception $e){
            echo $e->getMessage();        
        //} 

        

        //return StoreMovementService::execute($request, $typeId);        
    }
    
    /*public function show(Movement $movement, Request $request): MovementResource | JsonResponse    
    {//return response()->json($movement);
        return new MovementResource($movement);
    }

    //public function store(StoreArticleRequest $request): JsonResponse
    */
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Controllers/MovementController.php`:

```php
<?php

namespace Modules\Store\Http\Controllers;

use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\{Request, JsonResponse};
use Illuminate\Routing\Controller;
use Modules\Store\Entities\Movement;
use Modules\Store\Http\Resources\MovementResource;
use Modules\Store\Http\Services\Movement\{ IndexMovementService, StoreMovementService };
// use Modules\Store\Http\Requests\Movement\{ StoreMovementRequest, UpdateMovementRequest};

class MovementController extends Controller
{
    public function index(Request $request): JsonResponse
    {
        return IndexMovementService::execute($request);
    }
    
    public function show(Movement $movement, Request $request): MovementResource | JsonResponse    
    {//return response()->json($movement);
        return new MovementResource($movement);
    }

    //public function store(StoreArticleRequest $request): JsonResponse
    public function store(Request $request, string $typeId): JsonResponse
    {
        return StoreMovementService::execute($request, $typeId);        
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Resources/MovementResource.php`:

```php
<?php

namespace Modules\Store\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class MovementResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     */
    public function toArray(Request $request): array
    {
        return [
            "id" => $this->id,
            "type_id" => $this->type_id,
            "number" => $this->number,
            "date_time" => $this->date_time,
            "subject" => $this->subject,
            "description" => $this->description,
            "observation" => $this->observation,
            "close" => $this->close,
            "support_type_id" => $this->support_type_id,
            "support_number" => $this->support_number,
            "support_date" => $this->support_date
        ];
    }
}



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Resources/SubWarehouseResource.php`:

```php
<?php

namespace Modules\Store\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class SubWarehouseResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     */
    public function toArray(Request $request): array
    {
        return [
            'uuid' => $this->uuid,
            'name' => $this->name,
            'description' => $this->description,
            
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Resources/ArticleResource.php`:

```php
<?php

namespace Modules\Article\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class ArticleResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     */
    public function toArray(Request $request): array
    {
        return [
            'int_cod' => $this->int_cod,
            'name' => $this->name,
            'price' => $this->price,
            'stock_min' => $this->stock_min,
            'stock_max' => $this->stock_max,
            'status' => $this->status,
            'photo' => $this->photo,
            'id_user_insert' => $this->id_user_insert,
            'id_user_update' => $this->id_user_update,
            
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Services/Movement/IndexMovementService.php`:

```php
<?php

namespace Modules\Store\Http\Services\Movement;

use Illuminate\Http\{
    Request,
    JsonResponse
};
use Modules\Article\Entities\Article;
use Modules\Store\Entities\Movement;

class IndexMovementService
{

    /**
     * Display a listing of the resource.
     */
    static public function execute(Request $request): JsonResponse 
    {      
        //return response()->json(Movement::all());
        //return IndexArticleService::execute($request);
        /* Initialize query */
        $query = Movement::query();
        if ($request->typeId)
            $query->where("type_id", $request->typeId);

        /* search */
        $search = strtolower($request->input("search"));
        /*if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                ->where(\DB::raw('lower(int_cod)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(name)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(price)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(stock_min)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(stock_max)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(status)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(photo)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(id_user_insert)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(id_user_update)') , "like", "%$search%")                
                ;
            });
        }*/

        /* sort */
        $sort = $request->input("sort") ?? 'id';
        $direction = $request->input("direction") == "asc" ? "asc" : "desc";
        if ($sort) {
            $query->orderBy($sort, $direction);
        }

        /* get paginated results */
        $movements = $query
            ->paginate(5)
            ->appends(request()->query());
            
        return response()->json([
            "rows" => $movements,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);
    }  

}



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Services/Movement/StoreMovementService.php`:

```php
<?php

namespace Modules\Store\Http\Services\Movement;

use Illuminate\Http\{JsonResponse, Request};
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Modules\Store\Enums\MovementTypeEnum;
use Modules\Store\Entities\{ Movement, MovementDetail };
//use Modules\Store\Http\Requests\Movement\StoreMovementRequest;

//https://stackoverflow.com/questions/46682530/validate-uuid-with-laravel-validation
// use Ramsey\Uuid\Uuid as UuidValidator; // No more needed here

class StoreMovementService
{
    static public function execute(Request $request, string $typeId): JsonResponse
    {
        // $uuidIsValid = UuidValidator::isValid($request->main["store_uuid"]); // No more needed here

        $dataMain = [
            'type_id' => $typeId,
            'date_time' => $request->main["date_time"],
            'subject' => $request->main["subject"],
            'description' => $request->main["description"],
            'observation' => $request->main["observation"],
            'support_type_id' => $request->main["support_type_id"],
            'support_number' => $request->main["support_number"],
            'support_date' => '2024-10-10T15:45:00.000Z', //$request->main["support_date"],
            // 'store_uuid' => $request->main["store_uuid"] // // No more needed here
        ];
        
        $validatorMain = Validator::make(
            data: $dataMain,
            rules: [
                'type_id' => [Rule::enum(MovementTypeEnum::class)],
                'date_time' => ['required', 'date'],
                'subject' => ['required', 'string'],
                'support_type_id' => ['required', 'string'],
                'support_number' => ['required', 'string'],
                'support_date' => ['required', 'date'],
            ]
        )->validate();
            
        $dataDetais = $request->details;
        $validatorDetails = Validator::make($dataDetais, [
            '*.id' =>  ['required', 'numeric'],
            '*.int_cod' => ['required', 'string'],
            '*.name' => ['required', 'string'],
            '*.quantity'  => ['required', 'numeric']
        ])->validate();

        $dataMainValidated = $validatorMain;
        $movement = new Movement;
        $movement->type_id = $dataMainValidated['type_id'];
        $movement->date_time =  $dataMainValidated['date_time'];
        $movement->subject =  $dataMainValidated['subject'];
        $movement->description = $request->main["description"];
        $movement->observation = $request->main["observation"];
        $movement->support_type_id = $dataMainValidated['support_type_id'];
        $movement->support_number = $dataMainValidated['support_number'];
        $movement->support_date = $dataMainValidated['support_date'];
        $movement->user_insert_id = Auth::user()->id;
        $movement->user_update_id = Auth::user()->id;
        // $movement->store_uuid = $request->main["store_uuid"];  // No more needed here

        $dataDetailsValidated = $validatorDetails;
        $movementDetail = [];
        for ($i = 0; $i < count($dataDetailsValidated); $i++) {
            $movementDetail[$i] = new MovementDetail;
            $movementDetail[$i]->article_id = $dataDetailsValidated[$i]['id'];
            $movementDetail[$i]->quantity = $dataDetailsValidated[$i]['quantity']; 
            $movementDetail[$i]->user_insert_id = Auth::user()->id;
            $movementDetail[$i]->user_update_id = Auth::user()->id;
        }

        DB::transaction(function () use($movement, $movementDetail) {
            $movement->save();
            for ($i = 0; $i < count($movementDetail); $i++) {
                $movementDetail[$i]->movement_id = $movement->id;
                $movementDetail[$i]->save();           
            } //throw new \App\Exceptions\CustomException('Error: Levi Strauss & CO.', 501);
            $movement->refresh();
        }, 5);

        return response()->json([
            "message" => "New record created successfully", 
            "id" => $movement->id,
            "number" => $movement->number
        ], 201);
    }

}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Services/SubWarehouse/StoreSubWarehouseService.php`:

```php
<?php
namespace Modules\Store\Http\Services\SubWarehouse;

use Illuminate\Http\JsonResponse;
use Modules\Store\Http\Requests\SubWarehouse\StoreSubWarehouseRequest;
use Modules\Store\Entities\SubWarehouse;
use Illuminate\Support\Str;


class StoreSubWarehouseService
{
    static public function execute(StoreSubWarehouseRequest $request): JsonResponse
    {
        $sub_warehouse = new SubWarehouse;

        $sub_warehouse->uuid = (string)Str::uuid();
        $sub_warehouse->name = $request->name;
        $sub_warehouse->description = $request->description;
        
        $sub_warehouse->save();

        $sub_warehouse->refresh();

        return response()->json([
            "message" => "New record created successfully", 
            "id" => $sub_warehouse->id
        ], 201);
  }

}
```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Services/SubWarehouse/IndexSubWarehouseService.php`:

```php
<?php

namespace Modules\Store\Http\Services\SubWarehouse;

use Illuminate\Http\{
    Request,
    JsonResponse
};
use Modules\Store\Entities\SubWarehouse;

class IndexSubWarehouseService
{

  /**
   * Display a listing of the resource.
   */
  static public function execute(Request $request): JsonResponse
  {
      /* Initialize query */
        $query = SubWarehouse::query();

        /* search */
        $search = strtolower($request->input("search"));
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                ->where(\DB::raw('lower(uuid)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(name)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(description)') , "like", "%$search%")                
                ;
            });
        }

        /* sort */
        $sort = $request->input("sort");
        $direction = $request->input("direction") == "desc" ? "desc" : "asc";
        if ($sort) {
            $query->orderBy($sort, $direction);
        }

        /* get paginated results */
        $sub_warehouses = $query
            ->paginate(5)
            ->appends(request()->query());
            
        return response()->json([
            "rows" => $sub_warehouses,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);

  }  

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Services/SubWarehouse/UpdateSubWarehouseService.php`:

```php
<?php
namespace Modules\Store\Http\Services\SubWarehouse;

use Illuminate\Http\JsonResponse;
use Modules\Store\Http\Requests\SubWarehouse\UpdateSubWarehouseRequest;
use Modules\Store\Entities\SubWarehouse;

class UpdateSubWarehouseService
{
    static public function execute(UpdateSubWarehouseRequest $request, SubWarehouse $sub_warehouse): JsonResponse
    {          
        // $sub_warehouse = SubWarehouse::find($request->id);

        // $sub_warehouse->uuid = $request->uuid;
        $sub_warehouse->name = $request->name;
        $sub_warehouse->description = $request->description;
        
        $sub_warehouse->save();

        return response()->json([
            "message"=> "Record updated successfully"
        ], 200);      
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Http/Services/DailyClosing/IndexDailyClosingService.php`:

```php
<?php

namespace Modules\Store\Http\Services\DailyClosing;

use Illuminate\Http\{
    Request,
    JsonResponse
};
use Modules\Store\Entities\DailyClosing;

class IndexDailyClosingService
{

    /**
     * Display a listing of the resource.
     */
    static public function execute(Request $request): JsonResponse 
    {
        /* Initialize query */
        /*$query = DailyClosing::selectRaw(
            'close, 
            sum(quantity_input) as quantity_input, 
            sum(quantity_output) as quantity_output, 
            sum(quantity_reverse_input) as quantity_reverse_input, 
            sum(quantity_reverse_output) as quantity_reverse_output'
        )
        ->groupBy('close');*/

        $query = DailyClosing::select('close')->groupBy('close');


        /* search */
        $search = strtolower($request->input("search"));
        /*if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                ->where(\DB::raw('lower(int_cod)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(name)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(price)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(stock_min)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(stock_max)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(status)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(photo)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(id_user_insert)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(id_user_update)') , "like", "%$search%")                
                ;
            });
        }*/

        /* sort */
        $sort = $request->input("sort") ?? 'close';
        $direction = $request->input("direction") == "asc" ? "asc" : "desc";
        if ($sort) {
            $query->orderBy($sort, $direction);
        }

        /* get paginated results */
        $movements = $query
            ->paginate(5)
            ->appends(request()->query());
            
        return response()->json([
            "rows" => $movements,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);
    }  

}



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Providers/RouteServiceProvider.php`:

```php
<?php

namespace Modules\Store\Providers;

use Illuminate\Support\Facades\Route;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;

class RouteServiceProvider extends ServiceProvider
{
    protected string $name = 'Store';

    /**
     * Called before routes are registered.
     *
     * Register any model bindings or pattern based filters.
     */
    public function boot(): void
    {
        parent::boot();
    }

    /**
     * Define the routes for the application.
     */
    public function map(): void
    {
        $this->mapApiRoutes();
        $this->mapWebRoutes();
    }

    /**
     * Define the "web" routes for the application.
     *
     * These routes all receive session state, CSRF protection, etc.
     */
    protected function mapWebRoutes(): void
    {
        Route::middleware('web')->group(module_path($this->name, '/routes/web.php'));
    }

    /**
     * Define the "api" routes for the application.
     *
     * These routes are typically stateless.
     */
    protected function mapApiRoutes(): void
    {
        Route::middleware('api')->prefix('api')->name('api.')->group(module_path($this->name, '/routes/api.php'));
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Providers/EventServiceProvider.php`:

```php
<?php

namespace Modules\Store\Providers;

use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event handler mappings for the application.
     *
     * @var array<string, array<int, string>>
     */
    protected $listen = [];

    /**
     * Indicates if events should be discovered.
     *
     * @var bool
     */
    protected static $shouldDiscoverEvents = true;

    /**
     * Configure the proper event listeners for email verification.
     */
    protected function configureEmailVerification(): void
    {
        //
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Providers/StoreServiceProvider.php`:

```php
<?php

namespace Modules\Store\Providers;

use Illuminate\Support\Facades\Blade;
use Illuminate\Support\ServiceProvider;
use Nwidart\Modules\Traits\PathNamespace;

class StoreServiceProvider extends ServiceProvider
{
    use PathNamespace;

    protected string $name = 'Store';

    protected string $nameLower = 'store';

    /**
     * Boot the application events.
     */
    public function boot(): void
    {
        $this->registerCommands();
        $this->registerCommandSchedules();
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadMigrationsFrom(module_path($this->name, 'database/migrations'));
    }

    /**
     * Register the service provider.
     */
    public function register(): void
    {
        $this->app->register(EventServiceProvider::class);
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register commands in the format of Command::class
     */
    protected function registerCommands(): void
    {
        // $this->commands([]);
    }

    /**
     * Register command Schedules.
     */
    protected function registerCommandSchedules(): void
    {
        // $this->app->booted(function () {
        //     $schedule = $this->app->make(Schedule::class);
        //     $schedule->command('inspire')->hourly();
        // });
    }

    /**
     * Register translations.
     */
    public function registerTranslations(): void
    {
        $langPath = resource_path('lang/modules/'.$this->nameLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $this->nameLower);
            $this->loadJsonTranslationsFrom($langPath);
        } else {
            $this->loadTranslationsFrom(module_path($this->name, 'lang'), $this->nameLower);
            $this->loadJsonTranslationsFrom(module_path($this->name, 'lang'));
        }
    }

    /**
     * Register config.
     */
    protected function registerConfig(): void
    {
        $this->publishes([module_path($this->name, 'config/config.php') => config_path($this->nameLower.'.php')], 'config');
        $this->mergeConfigFrom(module_path($this->name, 'config/config.php'), $this->nameLower);
    }

    /**
     * Register views.
     */
    public function registerViews(): void
    {
        $viewPath = resource_path('views/modules/'.$this->nameLower);
        $sourcePath = module_path($this->name, 'resources/views');

        $this->publishes([$sourcePath => $viewPath], ['views', $this->nameLower.'-module-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->nameLower);

        $componentNamespace = $this->module_namespace($this->name, $this->app_path(config('modules.paths.generator.component-class.path')));
        Blade::componentNamespace($componentNamespace, $this->nameLower);
    }

    /**
     * Get the services provided by the provider.
     */
    public function provides(): array
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (config('view.paths') as $path) {
            if (is_dir($path.'/modules/'.$this->nameLower)) {
                $paths[] = $path.'/modules/'.$this->nameLower;
            }
        }

        return $paths;
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Actions/ExistenceAction.php`:

```php
<?php

namespace Modules\Store\Actions;


use Illuminate\Http\JsonResponse;
//use Modules\Store\Entities\Existence;
use Illuminate\Support\Facades\DB;

class ExistenceAction
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        // $existence = DB::table('view_stock_movement')
        // ->join('articles', 'view_stock_movement.article_id', '=', 'articles.id')
        //$existence = DB::table('view_stocks')
        //->join('articles', 'view_stocks.article_id', '=', 'articles.id')

        $existence = DB::table('view_stocks_by_accumulated_plus_unclosed_movements')
        ->get();

        return response()->json($existence);


        //return response()->json(Existence::all());
    }

}



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Entities/DailyClosing.php`:

```php
<?php

namespace Modules\Store\Entities;




// use Illuminate\Database\Eloquent\SoftDeletes;
// use Modules\Store\Database\Factories\DailyClosingFactory;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Model;

class DailyClosing extends Model
{
    use HasFactory;
    // use SoftDeletes;

    protected $table = 'close_days';

    /**
     * The attributes that are mass assignable.
     */
    protected $fillable = [];

    // protected static function newFactory(): DailyClosingFactory
    // {
    //     // return DailyClosingFactory::new();
    // }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Entities/SubWarehouse.php`:

```php
<?php

namespace Modules\Store\Entities;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Model;

class SubWarehouse extends Model
{
    use HasFactory, SoftDeletes;

    //protected $connection = 'pgsql_store';

    protected $fillable = [
        'id',     
        'uuid',     
        'name',     
        'description'     
    ];

    protected $hidden = ['created_at', 'updated_at', 'deleted_at'];

    protected $casts = [ /* 'field_name' => 'field_type' */ ];
    
        
    protected static function newFactory()
    {
        return \Modules\Store\Database\Factories\SubWarehouseFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Entities/MovementDetail.php`:

```php
<?php

namespace Modules\Store\Entities;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Model;

class MovementDetail extends Model
{
    use HasFactory;//, SoftDeletes;

    //protected $connection = 'pgsql_store';

    protected $fillable = [
        //'id',     
        'movement_id',     
        'article_id',     
        'quantity',     
        'close',     
        'user_insert_id',    
        'user_update_id'     
    ];

    protected $hidden = ['created_at', 'updated_at', 'deleted_at'];

    protected $casts = [ /* 'field_name' => 'field_type' */ ];
    
    public function movement()
    {
        return $this->belongsTo(\Modules\Store\Entities\Movement::class);
    }


    /*protected static function newFactory()
    {
        return \Modules\Store\Database\Factories\MovementDetailFactory::new();
    }*/
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Entities/Movement.php`:

```php
<?php

namespace Modules\Store\Entities;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Model;
//use Modules\Store\Database\Factories\StoreFactory;

class Movement extends Model
{
    use HasFactory;//, SoftDeletes;

    //protected $connection = 'pgsql_store';

    protected $fillable = [
        'id',     
        'type_id',     
        'date_time',     
        'subject',     
        'description',     
        'observation',     
        'close',     
        'support_type_id', 
        'support_number',
        'support_date',            
        'id_user_insert',     
        'id_user_update',  
        'user_edit_id',
        'editing'  
    ];

    protected $hidden = ['created_at', 'updated_at', 'deleted_at'];

    protected $casts = [ 'date_time' => 'datetime', 'support_date' => 'datetime' ];    
        
    public function movementDetails()
    {        
        return $this->hasMany(\Modules\Store\Entities\MovementDetail::class);
    }
    
    /*protected static function newFactory()
    {
        return MovementFactory::new();
    }*/
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Entities/Existence.php`:

```php
<?php

namespace Modules\Store\Entities;

use Illuminate\Database\Eloquent\Model;

class Existence extends Model
{

    protected $table = 'view_stock_movement';

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Models/DailyClosing.php`:

```php
<?php

namespace Modules\Store\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
// use Illuminate\Database\Eloquent\SoftDeletes;
// use Modules\Store\Database\Factories\DailyClosingFactory;

class DailyClosing extends Model
{
    use HasFactory;
    // use SoftDeletes;

    /**
     * The attributes that are mass assignable.
     */
    protected $fillable = [];

    // protected static function newFactory(): DailyClosingFactory
    // {
    //     // return DailyClosingFactory::new();
    // }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Models/MonthlyClosing.php`:

```php
<?php

namespace Modules\Store\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
// use Modules\Store\Database\Factories\MonthlyClosingFactory;

class MonthlyClosing extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     */
    protected $fillable = [];

    // protected static function newFactory(): MonthlyClosingFactory
    // {
    //     // return MonthlyClosingFactory::new();
    // }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/app/Models/AnnualClosing.php`:

```php
<?php

namespace Modules\Store\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
// use Modules\Store\Database\Factories\AnnualClosingFactory;

class AnnualClosing extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     */
    protected $fillable = [];

    // protected static function newFactory(): AnnualClosingFactory
    // {
    //     // return AnnualClosingFactory::new();
    // }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/package.json`:

```json
{
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "devDependencies": {
    "axios": "^1.1.2",
    "laravel-vite-plugin": "^0.7.5",
    "sass": "^1.69.5",
    "postcss": "^8.3.7",
    "vite": "^4.0.0"
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/routes/apiold.php`:

```php
<?php

use Illuminate\Support\Facades\Route;
use Modules\Store\Http\Controllers\StoreController;

/*
 *--------------------------------------------------------------------------
 * API Routes
 *--------------------------------------------------------------------------
 *
 * Here is where you can register API routes for your application. These
 * routes are loaded by the RouteServiceProvider within a group which
 * is assigned the "api" middleware group. Enjoy building your API!
 *
*/

Route::middleware(['auth:sanctum'])->prefix('v1')->group(function () {
    Route::apiResource('store', StoreController::class)->names('store');
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/routes/api.php`:

```php
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Modules\Store\Actions\ExistenceAction;
use Modules\Store\Http\Controllers\{
    MovementController,
    MovementDetailController,
    DailyClosingController,
    SubWarehouseController
};

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group. Enjoy building your API!
|
*/

//Route::middleware('auth:api')->get('/store', function (Request $request) {
//    return $request->user();
//});

/*
 *--------------------------------------------------------------------------
 * API Routes
 *--------------------------------------------------------------------------
 *
 * Here is where you can register API routes for your application. These
 * routes are loaded by the RouteServiceProvider within a group which
 * is assigned the "api" middleware group. Enjoy building your API!
 *
*/

//Route::middleware(['auth:sanctum'])->prefix('v1')->group(function () {
//    Route::apiResource('store', StoreController::class)->names('store');
//});

Route::middleware(['auth:sanctum'])->group(function () {
    Route::prefix('movements')->group(function () {
        Route::get('/{typeId?}', [MovementController::class, 'index']);        
        Route::get('/{movement}/{typeId}', [MovementController::class, 'show']);
        Route::post('/{typeId}', [MovementController::class, 'store']);
        Route::put('/{movement}', [MovementController::class, 'update']);
        Route::delete('/{typeId}/{id}', [MovementController::class,'destroy']);
    });

    /*Route::prefix('movements')->group(function () {
        Route::get('/', [MovementController::class, 'index']);
        Route::get('/{movement}', [MovementController::class, 'show']);
        Route::post('/', [MovementController::class, 'store']);
        Route::put('/{movement}', [MovementController::class, 'update']);
        Route::delete('/{id}', [MovementController::class,'destroy']);
    });*/

    Route::get('/movements-help', [MovementController::class, 'help']);

    Route::get('/existences', [ExistenceAction::class, 'index'] );

    Route::prefix('movement_details')->group(function () {  
        Route::get('/{movementId}', [MovementDetailController::class, 'getAllByMovement']);
        Route::get('/{movement_detail}', [MovementDetailController::class, 'show']);
        Route::post('/', [MovementDetailController::class, 'store']);
        Route::put('/{movement_detail}', [MovementDetailController::class, 'update']);
        Route::delete('/{id}', [MovementDetailController::class,'destroy']);
    });
    Route::get('/movement_details_by_number/{supportNumber}/{typeId}', [MovementDetailController::class, 'getAllByNumber']);


    Route::prefix('daily-closings')->group(function () { 
        Route::get('/', [DailyClosingController::class, 'index']);
        Route::get('/pre', [DailyClosingController::class, 'getPreDailyClosing']);
        Route::get('/{close}', [DailyClosingController::class, 'show']);
        Route::post('/', [DailyClosingController::class, 'store']);
    });

    Route::prefix('sub_warehouses')->group(function () {
        Route::get('/', [SubWarehouseController::class, 'index']);
        Route::get('/{sub_warehouse}', [SubWarehouseController::class, 'show']);
        Route::post('/', [SubWarehouseController::class, 'store']);
        Route::put('/{sub_warehouse}', [SubWarehouseController::class, 'update']);
        Route::delete('/{id}', [SubWarehouseController::class,'destroy']);
    });
    Route::get('/sub_warehouses-help', [SubWarehouseController::class, 'help']);
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/routes/web.php`:

```php
<?php

use Illuminate\Support\Facades\Route;
use Modules\Store\Http\Controllers\StoreController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::group([], function () {
    Route::resource('store', StoreController::class)->names('store');
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/vite.config.js`:

```js
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    build: {
        outDir: '../../public/build-store',
        emptyOutDir: true,
        manifest: true,
    },
    plugins: [
        laravel({
            publicDirectory: '../../public',
            buildDirectory: 'build-store',
            input: [
                __dirname + '/resources/assets/sass/app.scss',
                __dirname + '/resources/assets/js/app.js'
            ],
            refresh: true,
        }),
    ],
});

//export const paths = [
//    'Modules/Store/resources/assets/sass/app.scss',
//    'Modules/Store/resources/assets/js/app.js',
//];
```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Store/module.json`:

```json
{
    "name": "Store",
    "alias": "store",
    "description": "",
    "keywords": [],
    "priority": 0,
    "providers": [
        "Modules\\Store\\Providers\\StoreServiceProvider"
    ],
    "files": []
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/resources/views/index.blade.php`:

```php
@extends('product::layouts.master')

@section('content')
    <h1>Hello World</h1>

    <p>Module: {!! config('product.name') !!}</p>
@endsection

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/resources/views/layouts/master.blade.php`:

```php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>Product Module - {{ config('app.name', 'Laravel') }}</title>

    <meta name="description" content="{{ $description ?? '' }}">
    <meta name="keywords" content="{{ $keywords ?? '' }}">
    <meta name="author" content="{{ $author ?? '' }}">

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    {{-- Vite CSS --}}
    {{-- {{ module_vite('build-product', 'resources/assets/sass/app.scss') }} --}}
</head>

<body>
    @yield('content')

    {{-- Vite JS --}}
    {{-- {{ module_vite('build-product', 'resources/assets/js/app.js') }} --}}
</body>

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/seeders/ProductsTableSeeder.php`:

```php
<?php

namespace Modules\Product\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Modules\Product\Entities\Product;

class ProductsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Product::create([
            'name' => 'MAIZ',
            'mark_id' => 2,
            'category_id' => 2,
            'measure_unit_type_id' => 2,
            'measure_unit_id' => 14,
            'measure_unit' => 'Kilogramo(s)',
            // 'photo' => ''
        ]);
        
        Product::create([
            'name' => 'TRIGO',
            'mark_id' => 3,
            'category_id' => 2,
            'measure_unit_type_id' => 2,
            'measure_unit_id' => 14,
            'measure_unit' => 'Kilogramo(s)',
            // 'photo' => ''
        ]);
        
        Product::create([
            'name' => 'LENTEJAS',
            'mark_id' => 4,
            'category_id' => 3,
            'measure_unit_type_id' => 2,
            'measure_unit_id' => 14,
            'measure_unit' => 'Kilogramo(s)',
            // 'photo' => ''
        ]);
        
        Product::create([
            'name' => 'NEGRAS',
            'mark_id' => 4,
            'category_id' => 4,
            'measure_unit_type_id' => 2,
            'measure_unit_id' => 14,
            'measure_unit' => 'Kilogramo(s)',
            // 'photo' => ''
        ]);
        
        Product::create([
            'name' => 'ROJAS',
            'mark_id' => 4,
            'category_id' => 4,
            'measure_unit_type_id' => 2,
            'measure_unit_id' => 14,
            'measure_unit' => 'Kilogramo(s)',
            // 'photo' => ''
        ]);
        
        Product::create([
            'name' => 'BLANCAS',
            'mark_id' => 4,
            'category_id' => 4,
            'measure_unit_type_id' => 2,
            'measure_unit_id' => 14,
            'measure_unit' => 'Kilogramo(s)',
            // 'photo' => ''
        ]);
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/seeders/ProductDatabaseSeeder.php`:

```php
<?php

namespace Modules\Product\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;

class ProductDatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Model::unguard();
        // php artisan module:migrate-fresh --seed
        $this->call([
            //OthersTableSeeder:class,
            CategoriesTableSeeder::class,
            MarksTableSeeder::class,
            ProductsTableSeeder::class,
            PresentationsTableSeeder::class
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/seeders/CategoriesTableSeeder.php`:

```php
<?php

namespace Modules\Product\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Modules\Product\Entities\Category;

class CategoriesTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Category::create(['name' => 'ALIMENTO'         , 'parent_id' => 0, 'final' => false]);
        Category::create(['name' => 'HARINA'           , 'parent_id' => 1, 'final' => true ]);
        Category::create(['name' => 'GRANOS'           , 'parent_id' => 1, 'final' => true ]);
        Category::create(['name' => 'CARAOTAS'         , 'parent_id' => 3, 'final' => true ]);
        Category::create(['name' => 'HIGIENE DEL HOGAR', 'parent_id' => 0, 'final' => true ]);
        Category::create(['name' => 'DETERGENTE'       , 'parent_id' => 5, 'final' => true ]);
        Category::create(['name' => 'ASEO PERSONAL'    , 'parent_id' => 0, 'final' => true ]);
        Category::create(['name' => 'JABONES'          , 'parent_id' => 7, 'final' => true ]);
        Category::create(['name' => 'AVENA'            , 'parent_id' => 8, 'final' => true ]);
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/seeders/PresentationsTableSeeder.php`:

```php
<?php

namespace Modules\Product\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Modules\Product\Entities\Presentation;

class PresentationsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {

        Presentation::create([
            'product_id' => 1,
            'packing' => '[{"packing": "PAQUETE(S)", "quantity": 1}, {"packing": "PACA(S)", "quantity": 24}]',
            'bar_cod' => 'A1A1A1A1',
            //'int_cod' => '1A1A1A1A',
            'price' => 100.2,
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 2,
            'packing' => '[{"packing": "PAQUETE(S)", "quantity": 1}, {"packing": "PACA(S)", "quantity": 24}]',
            'bar_cod' => 'B2B2B2B2',
            //'int_cod' => '2B2B2B2B',
            'price' => 300.5,
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 3,
            'packing' => '[{"packing": "PAQUETE(S)", "quantity": 1}, {"packing": "SACO(S)", "quantity": 12}]',
            'bar_cod' => 'C3C3C3C3',
            //'int_cod' => '3C3C3C3C',
            'price' => 0.5,
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 3,
            'packing' => '[{"packing": "BULTO(S)", "quantity": 4}, {"packing": "CARTUCHO(S)", "quantity": 54}, {"packing": "BOTELLA(S)", "quantity": 44}, {"packing": "BOMBONA(S)", "quantity": 44}, {"packing": "PAQUETE(S)", "quantity": 0.5}, {"packing": "SACO(S)", "quantity": 24}]',
            'bar_cod' => 'D4D4D4D4',
            //'int_cod' => 'D4D4D4D4',
            'price' => 1400.7,
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 3,
            'packing' => '[{"packing": "PAQUETE(S)", "quantity": 0.25}, {"packing": "SACO(S)", "quantity": 48}]',
            'bar_cod' => 'E5E5E5E5',
            //'int_cod' => '5E5E5E5E',
            'price' => 150,
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 4,
            'packing' => '[{"packing": "PAQUETE(S)", "quantity": 1}, {"packing": "BULTO(S)", "quantity": 12}]',
            'bar_cod' => '5K5KI5K5K',
            //'int_cod' => 'K5K5K5K5',
            'price' => 5,
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 5,
            'packing' => '[{"packing": "PAQUETE(S)", "quantity": 1}, {"packing": "BULTO(S)", "quantity": 12}]',
            'bar_cod' => 'K3K3K3K3',
            //'int_cod' => '3K3K3K3K',
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 5,
            'packing' => '[{"packing": "PAQUETE(S)", "quantity": 0.5}, {"packing": "BULTO(S)", "quantity": 24}]',
            'bar_cod' => 'O0O0O0O0',
            //'int_cod' => '0O0O0O0O',
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 4,
            'packing' => '[{"packing": "PAPELETA(S)", "quantity": 0.5}, {"packing": "BULTO(S)", "quantity": 24}]',
            'bar_cod' => 'K1K1K1K1',
            //'int_cod' => '1K1K1K1K',
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 6,
            'packing' => '[{"packing": "BULTO(S)", "quantity": 1}, {"packing": "PAQUETE(S)", "quantity": 1}, {"packing": "BULTO(S)", "quantity": 12}]',
            'bar_cod' => 'Q3Q3Q3Q3',
            //'int_cod' => '3Q3Q3Q3Q',
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 6,
            'packing' => '[{"packing": "PAQUETE(S)", "quantity": 0.5}, {"packing": "BULTO(S)", "quantity": 24}]',
            'bar_cod' => 'B8B8B8B8',
            //'int_cod' => '8B8B8B8B',
            //'sale_type' => true
        ]);

        Presentation::create([
            'product_id' => 2,
            'packing' => '[{"packing": "PAQUETE(S)", "quantity": 0.5}, {"packing": "PACA(S)", "quantity": 48}]',
            'bar_cod' => 'H1H1H1H1',
            //'int_cod' => '1H1H1H1H',
            //'sale_type' => true
        ]);

    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/seeders/MarksTableSeeder.php`:

```php
<?php

namespace Modules\Product\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Modules\Product\Entities\Mark;

class MarksTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Mark::create(['name' => 'N/A'     ]);
        Mark::create(['name' => 'JUANA'   ]);
        Mark::create(['name' => 'LA LUCHA']);
        Mark::create(['name' => 'PANTERA' ]);
        Mark::create(['name' => 'PAN'     ]);
    }

}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_08_31_145943_create_marks_table.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateMarksTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_product')->dropIfExists('presentations');
        Schema::connection('pgsql_product')->dropIfExists('products');
        Schema::connection('pgsql_product')->dropIfExists('marks');
        Schema::connection('pgsql_product')->create('marks', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('company_id')->default(1);
            $table->string('name', 50);
            $table->unique(['company_id', 'name']);
            $table->integer('producer_id')->default(1);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_product')->dropIfExists('presentations');
        Schema::connection('pgsql_product')->dropIfExists('products');
        Schema::connection('pgsql_product')->dropIfExists('marks');        
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_09_18_214754_create_presentation_register_pl.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreatePresentationRegisterPl extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
          //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.presentation_register(integer, integer, jsonb, character varying, character varying, integer, integer, double precision, boolean, boolean, integer);");
             
        DB::connection('pgsql_product')->unprepared("        
CREATE OR REPLACE FUNCTION public.presentation_register(
    i_id integer,
    i_product_id integer,    
    i_packing jsonb,
    i_bar_cod character varying,
    i_int_cod character varying,
    i_stock_min integer,
    i_stock_max integer,
    i_price float,
    i_sale_type boolean,
    i_status boolean,    
    i_user_id integer)
    RETURNS character varying AS
    \$BODY\$
    DECLARE
        v_exist boolean;
        o_return character varying;
    BEGIN
        o_return:='';
        IF i_id=0 THEN
            INSERT INTO public.presentations(
                product_id,                
                packing,
                bar_cod,
                int_cod,                
                stock_min,
                stock_max,
                price,
                sale_type,
                status,              
                user_insert_id,
                user_update_id,
                created_at,
                updated_at
            ) VALUES (
                i_product_id,                
                i_packing,
                i_bar_cod,
                i_int_cod,
                i_stock_min,
                i_stock_max,
                i_price,
                i_sale_type,
                i_status, 
                i_user_id,
                i_user_id,
                now()::timestamp(0) without time zone,
                now()::timestamp(0) without time zone
            );
            o_return:= 'El registro fue agregado con éxito';
        ELSE
            UPDATE public.presentations SET
                product_id=i_product_id,                
                packing=i_packing,
                bar_cod=i_bar_cod,
                int_cod=i_int_cod,
                stock_min=i_stock_min,
                stock_max=i_stock_max,
                price=i_price,
                sale_type=i_sale_type,
                status=i_status,
                user_update_id=i_user_id,
                updated_at=now()::timestamp(0) without time zone
            WHERE id=i_id;
                o_return:= 'El registro fue actualizado con éxito';
            END IF;
            RETURN o_return;
        END;
    \$BODY\$
    LANGUAGE plpgsql VOLATILE 
        COST 100;
    ALTER FUNCTION public.presentation_register(integer, integer, jsonb, character varying, character varying, integer, integer, double precision, boolean, boolean, integer)
    OWNER TO postgres;
     ");

    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
      //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.presentation_register(integer, integer, jsonb, character varying, character varying, integer, integer, double precision, boolean, boolean, integer);");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_09_01_160108_create_category_remove_pl.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateCategoryRemovePl extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.category_remove(integer);");
        DB::connection('pgsql_product')->unprepared("        
  CREATE OR REPLACE FUNCTION public.category_remove(i_id integer)
  RETURNS json AS
  \$BODY\$
  DECLARE
    o_return json;
    v_exist boolean;
  BEGIN
    o_return:=array_to_json(array['f', 'Error de ejecución; notifique al especialista del sistema']);
    SELECT CASE WHEN count(id)=0 THEN false ELSE true END INTO v_exist 
      FROM public.categories 
        WHERE parent_id = i_id;        
    IF v_exist='f' THEN
      DELETE FROM public.categories WHERE id=i_id;
      o_return:=array_to_json(array['t', 'El registro fué eliminado con éxito']);
    ELSE
      o_return:=array_to_json(array['f', 'Disculpe: Hay registro(s) asociado(s)']);
    END IF;
    RETURN o_return;
  END;
  \$BODY\$
  LANGUAGE plpgsql VOLATILE
    COST 100;
  ALTER FUNCTION public.category_remove(integer)
    OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.category_remove(integer);");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_08_31_204622_create_categories_view.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateCategoriesView extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {   //DB::connection('pgsql_product')->unprepared("DROP VIEW public.view_categories;");
        DB::connection('pgsql_product')->unprepared("
            CREATE OR REPLACE VIEW public.view_categories AS 
                WITH RECURSIVE categories_recursive(id, name, family, parent_id, level, final, company_id) AS (
                    SELECT root.id,
                           root.name,
                           ''::character varying::text || root.name::text AS family,
                           root.parent_id,
                           1 AS level,
                           root.final,
                           root.company_id 
                        FROM categories root
                            WHERE root.parent_id = 0
                    UNION ALL
                    SELECT child.id,
                           child.name,
                           concat(concat(parent.family, ' / '), child.name) AS concat,
                           child.parent_id,
                           parent.level + 1 AS level,
                           child.final,
                           child.company_id 
                        FROM categories_recursive parent, categories child
                            WHERE parent.id = child.parent_id
                )
                SELECT categories_recursive.id,
                       categories_recursive.name,
                       categories_recursive.family,
                       categories_recursive.parent_id,
                       categories_recursive.level,
                       categories_recursive.final,
                       categories_recursive.company_id
                       FROM categories_recursive;
           ALTER TABLE public.view_categories
               OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //DB::connection('pgsql_product')->unprepared("DROP VIEW public.view_categories;");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_08_31_145847_create_categories_table.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateCategoriesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_product')->dropIfExists('presentations');
        Schema::connection('pgsql_product')->dropIfExists('products');
        Schema::connection('pgsql_product')->dropIfExists('marks');
        
        $retult = DB::connection('pgsql_product')->select("SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE  table_schema = 'public'
            AND    table_name   = 'view_categories'
         );")[0];

        if ($retult->exists){
          DB::connection('pgsql_product')->unprepared("DROP VIEW public.view_categories;");
          
        }
        Schema::connection('pgsql_product')->dropIfExists('categories');
        Schema::connection('pgsql_product')->create('categories', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('company_id')->default(1);
            $table->string('name',50);
            $table->integer('parent_id')->default(0);
            $table->boolean('final')->default(true);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        /*Schema::connection('pgsql_product')->dropIfExists('presentations');
        Schema::connection('pgsql_product')->dropIfExists('products');
        Schema::connection('pgsql_product')->dropIfExists('marks');
        DB::connection('pgsql_product')->unprepared("DROP VIEW public.view_categories;");
        Schema::connection('pgsql_product')->dropIfExists('categories');
        */
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_09_22_002616_create_presentation_remove_pl.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreatePresentationRemovePl extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.presentation_remove(integer);");
        DB::connection('pgsql_product')->unprepared("
CREATE OR REPLACE FUNCTION public.presentation_remove(i_id integer)
  RETURNS character AS
\$BODY\$
DECLARE
        o_return character;
BEGIN
        o_return:='Z';
        DELETE FROM public.presentations WHERE id=i_id;
        o_return:='B';
        RETURN o_return;
END;
\$BODY\$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.presentation_remove(integer)
  OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.presentation_remove(integer);");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_08_31_150029_create_products_table.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateProductsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_product')->dropIfExists('products');
        Schema::connection('pgsql_product')->create('products', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('company_id')->default(1);
            $table->string('name',50);            
            $table->integer('category_id')->nullable()->unsigned();//unsignedInteger //(Laravel 7.x) ->nullable()->constrained();            
            $table->integer('mark_id')->nullable()->unsigned();//unsignedInteger //(Laravel 7.x) ->nullable()->constrained();
            $table->integer('measure_unit_type_id');
            $table->integer('measure_unit_id');
            $table->string('measure_unit', 30);
            //$table->string('photo')->default('');   
            $table->integer('user_insert_id')->default(1);
            $table->integer('user_update_id')->default(1);
            $table->integer('user_edit_id')->default(1);
            $table->boolean('editing')->default(true);
            $table->timestamps();
            $table->foreign('category_id')->references('id')->on('categories');
            $table->foreign('mark_id')->references('id')->on('marks');
            $table->unique(['company_id', 'name']);
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_product')->dropIfExists('products');
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_09_18_015320_create_product_register_pl.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateProductRegisterPl extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
    
        //DB::connection('pgsql_product')->unprepared(
        //    "DROP FUNCTION public.product_register(integer, character varying, integer, integer, integer, integer, character varying, integer);"
        //);
        
        DB::connection('pgsql_product')->unprepared("
CREATE OR REPLACE FUNCTION public.product_register(
    i_id integer,
    i_name character varying,
    i_category_id integer,
    i_mark_id integer,
    i_measure_unit_type_id integer,
    i_measure_unit_id integer,
    i_measure_unit character varying,
    i_user_id integer)
  RETURNS json AS
\$BODY\$
DECLARE
        v_existe boolean;
        v_id integer;
        o_return json;
BEGIN
        o_return:=array_to_json(array['']);
        IF i_id=0 THEN
                SELECT CASE WHEN count(id)=0 THEN false ELSE true END INTO v_existe FROM public.products
                        WHERE name=i_name;
                IF  v_existe='f' THEN
                        INSERT INTO public.products(
                                name,
                                mark_id,
                                category_id,
                                measure_unit_type_id,
                                measure_unit_id,
                                measure_unit,
                                created_at,
                                updated_at)
                        VALUES (
                                i_name,
                                i_mark_id,
                                i_category_id,
                                i_measure_unit_type_id,
                                i_measure_unit_id,
                                i_measure_unit,
                                now()::timestamp(0) without time zone,
                                now()::timestamp(0) without time zone
                                )
                                RETURNING id INTO v_id; 
                        o_return:= array_to_json(array['El registro fue agregado con éxito', v_id::character varying]);
                ELSE
                        o_return:= array_to_json(array['Disculpe: El registro está repetido']);
                END IF;
        ELSE
                UPDATE public.products SET
                        name                 = i_name,
                        mark_id              = i_mark_id,
                        category_id          = i_category_id,
                        measure_unit_type_id = i_measure_unit_type_id,
                        measure_unit_id      = i_measure_unit_id,
                        user_update_id       = i_user_id,
                        measure_unit         = i_measure_unit,
                        user_edit_id         = i_user_id,
                        editing              = true,
                        updated_at           = now()::timestamp(0) without time zone
                WHERE id=i_id;
                        o_return:= array_to_json(array['El registro fue actualizado con éxito']);
        END IF;
        RETURN o_return;
END;
\$BODY\$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.product_register(integer, character varying, integer, integer, integer, integer, character varying, integer)
    OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //DB::connection('pgsql_product')->unprepared(
        //    "DROP FUNCTION public.product_register(integer, character varying, integer, integer, integer, integer, character varying, integer);"
        //);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_09_07_233850_create_marks_register_pl.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateMarksRegisterPl extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.mark_register(integer, character varying, integer);");
        DB::connection('pgsql_product')->unprepared("
  CREATE OR REPLACE FUNCTION public.mark_register(
    i_id integer,
    i_name character varying,
    i_producer_id integer)
  RETURNS json AS
\$BODY\$
DECLARE
    v_exist boolean;
    v_id integer;
    o_return json;
BEGIN
        o_return:=array_to_json(array['']);
        IF i_id=0 THEN
                SELECT CASE WHEN count(id)=0 THEN false ELSE true END INTO v_exist FROM public.marks
                        WHERE name=i_name;
                IF  v_exist='f' THEN
                        INSERT INTO public.marks(
                                name,
                                producer_id,
                                created_at,
                                updated_at)
                        VALUES (
                                i_name,
                                i_producer_id,
                                now()::timestamp(0) without time zone,
                                now()::timestamp(0) without time zone
                                )
                         RETURNING id INTO v_id;        
                         o_return:= array_to_json(array['t', 'El registro fue agregado con éxito', v_id::character varying]);
                ELSE
                        o_return:= array_to_json(array['f', 'Disculpe: El registro está repetido']);
                END IF;
        ELSE
                UPDATE public.marks SET
                        name=i_name,
                        producer_id=i_producer_id,
                        updated_at=now()::timestamp(0) without time zone
                WHERE id=i_id;
                        o_return:= array_to_json(array['t', 'El registro fue actualizado con éxito']);
        END IF;
        RETURN o_return;
END;
\$BODY\$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.mark_register(integer, character varying, integer)
  OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.mark_register(integer, character varying, integer);");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_09_01_160047_create_category_register_pl.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateCategoryRegisterPl extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {   //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.category_register(integer, integer, character varying);");
        DB::connection('pgsql_product')->unprepared("  
  CREATE OR REPLACE FUNCTION public.category_register(
    i_id integer,
    i_parent_id integer,
    i_name character varying)
  RETURNS json AS
  \$BODY\$
  DECLARE
    v_exist boolean;
    v_id integer;
    o_return json;
  BEGIN
    o_return:=array_to_json(array['']);
    IF i_id=0 THEN
      SELECT CASE WHEN count(id)=0 THEN false ELSE true END INTO v_exist
        FROM public.categories
          WHERE name=i_name AND parent_id = i_parent_id;
      IF v_exist='f' THEN
        INSERT INTO public.categories(
          name,
          parent_id,
          created_at,
          updated_at)
        VALUES (
          i_name,
          i_parent_id,
          now()::timestamp(0) without time zone,
          now()::timestamp(0) without time zone)
        RETURNING id INTO v_id;        
        o_return:= array_to_json(array['t', 'El registro fue agregado con éxito', v_id::character varying]);
      ELSE        
        o_return:= array_to_json(array['f', 'Disculpe: El registro está repetido']);
      END IF;
    ELSE
      UPDATE public.categories 
        SET
          name = i_name,
          parent_id=i_parent_id,
          updated_at=now()::timestamp(0) without time zone
        WHERE id=i_id;        
        o_return:= array_to_json(array['t', 'El registro fue actualizado con éxito']);
      END IF;
      RETURN o_return;
    END;
  \$BODY\$
  LANGUAGE plpgsql VOLATILE
    COST 100;
  ALTER FUNCTION public.category_register(integer, integer, character varying)
    OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
         //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.category_register(integer, integer, character varying);");
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_09_11_011010_create_presentation_deploy_pl.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreatePresentationDeployPl extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.presentation_deploy(integer);");
        DB::connection('pgsql_product')->unprepared("
CREATE OR REPLACE FUNCTION public.presentation_deploy(i_id integer)
  RETURNS character AS
\$BODY\$
DECLARE
        o_return character varying;
        v_arr json[];
        v_uni_med character varying;
        v_arr_union character varying[];
        v_n integer;
BEGIN
         o_return := '';
         SELECT (ARRAY(select json_array_elements(A.packing::json))), B.measure_unit  INTO v_arr, v_uni_med         
         FROM public.presentations A 
         INNER JOIN public.products B ON A.product_id = B.id
         WHERE A.id=i_id;         
         v_arr_union = ARRAY[' DE ', ' CON ']; 
         v_n = 1;        
         FOR i IN array_lower(v_arr, 1) .. array_upper(v_arr, 1) LOOP                  
                  IF  i = 1 THEN
                      o_return := v_arr[i]->'packing' || v_arr_union[v_n] || (v_arr[i]->'quantity'::text) || ' ' || v_uni_med;
                  ELSE
                      o_return := (v_arr[i]->'packing') || v_arr_union[v_n] || (v_arr[i]->'quantity') || ' ' || o_return;
                  END IF;
                  v_n = v_n + 1;
                  IF v_n = 3 THEN
                      v_n = 1;
                  END IF;
         END LOOP;
         
        RETURN (replace(o_return, '\"', ''));
END;
\$BODY\$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.presentation_deploy(integer)
  OWNER TO postgres;
");  

    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.presentation_deploy(integer);");
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_09_07_233912_create_marks_remove_pl.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateMarksRemovePl extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.mark_remove(integer);");
        DB::connection('pgsql_product')->unprepared("
CREATE OR REPLACE FUNCTION public.mark_remove(i_id integer)
  RETURNS json AS
\$BODY\$
DECLARE
    o_return json;
    v_exist boolean;  
BEGIN
        o_return:=array_to_json(array['f', 'Error de ejecución; notifique al especialista del sistema']);        
        SELECT CASE WHEN count(id)=0 THEN false ELSE true END INTO v_exist 
            FROM public.products WHERE mark_id = i_id;
        IF v_exist='f' THEN
            DELETE FROM public.marks WHERE id=i_id;
            o_return:=array_to_json(array['t', 'El registro fué eliminado con éxito']);
        ELSE
            o_return:=array_to_json(array['f', 'Disculpe: Hay registro(s) asociado(s)']);
        END IF;
        RETURN o_return;
END;
\$BODY\$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.mark_remove(integer)
  OWNER TO postgres;
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //DB::connection('pgsql_product')->unprepared("DROP FUNCTION public.mark_remove(integer);");
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/database/migrations/2020_08_31_150104_create_presentations_table.php`:

```php
<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreatePresentationsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_product')->dropIfExists('presentations');
        Schema::connection('pgsql_product')->create('presentations', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('company_id')->default(1);
            $table->integer('product_id')->nullable()->unsigned();//unsignedInteger //(Laravel 7.x) ->nullable()->constrained();                        
            $table->jsonb('packing');            
            $table->string('bar_cod', 15)->nullable();
            //$table->string('int_cod', 15);            
            $table->float('price')->nullable(); 
            //$table->integer('stock_min')->default(5);
            //$table->integer('stock_max')->default(5);
            //$table->boolean('sale_type')->default(true);        
            $table->boolean('status')->default(true);
            $table->string('photo_path')->default('');                                
            $table->integer('user_insert_id')->default(1);
            $table->integer('user_update_id')->default(1);           
            $table->timestamps();
            $table->foreign('product_id')->references('id')->on('products');
            $table->unique(['company_id', 'product_id', 'packing']);
            //$table->unique(['company_id', 'int_cod']);
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_product')->dropIfExists('presentations');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/config/config.php`:

```php
<?php

return [
    'name' => 'Product',
];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/composer.json`:

```json
{
    "name": "nwidart/product",
    "description": "",
    "authors": [
        {
            "name": "Nicolas Widart",
            "email": "n.widart@gmail.com"
        }
    ],
    "extra": {
        "laravel": {
            "providers": [],
            "aliases": {

            }
        }
    },
    "autoload": {
        "psr-4": {
            "Modules\\Product\\": "app/",
            "Modules\\Product\\Database\\Factories\\": "database/factories/",
            "Modules\\Product\\Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Modules\\Product\\Tests\\": "tests/"
        }
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Requests/Product/UpdateProductRequest.php`:

```php
<?php

namespace Modules\Product\Http\Requests\Product;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdateProductRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true; //auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {    
        return [
            "category_id" => ["required"],
            "mark_id" => ["required"],     
            "measure_unit_type_id" => ["required"],
            "measure_unit_id" => ["required"],
            "name" => ["required"]
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Requests/Product/StoreProductRequest.php`:

```php
<?php

namespace Modules\Product\Http\Requests\Product;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StoreProductRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true; //auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            "category_id" => ["required"],
            "mark_id" => ["required"],     
            "measure_unit_type_id" => ["required"],
            "measure_unit_id" => ["required"],
            "name" => ["required"]
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Requests/Presentation/UpdatePresentationRequest.php`:

```php
<?php

namespace Modules\Product\Http\Requests\Presentation;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdatePresentationRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true; //auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules(): Array
    {
        return [
           "product_id" => ["required"],
            //"sale_type" => ["required"],
            //"int_cod" => ["required"],     
            "bar_cod" => ["nullable"], 
            "packing_deployed" => ["required"],
            "packing_json" => ["required"],
            // "packing_deployed" => ["required"],     --->    it is not necessary to send
            //"stock_min" => ["required"],
            //"stock_max" => ["required"],
            "price" => ["nullable"],
            "status" => ["required"]            
        ];
        return true;
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Requests/Presentation/StorePresentationRequest.php`:

```php
<?php

namespace Modules\Product\Http\Requests\Presentation;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StorePresentationRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true; //auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     */
    public function rules(): Array
    {
        return [        
           "product_id" => ["required"],
            //"sale_type" => ["required"],
            //"int_cod" => ["required"],     
            "bar_cod" => ["nullable"],
            "packing_deployed" => ["required"],
            "packing_json" => ["required"],
            // "packing_deployed" => ["required"],     --->    it is not necessary to send
            //"stock_min" => ["required"],
            //"stock_max" => ["required"],
            "price" => ["nullable"],
            "status" => ["required"]            
        ];
        return true;
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Requests/Mark/StoreMarkRequest.php`:

```php
<?php

namespace Modules\Product\Http\Requests\Mark;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StoreMarkRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true; //auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            "name" => ["required", "max:255"]            
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Requests/Mark/UpdateMarkRequest.php`:

```php
<?php

namespace Modules\Product\Http\Requests\Mark;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdateMarkRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true; //auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {    
        return [
            "name" => ["required", "max:255"]            
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Controllers/CategoryController.php`:

```php
<?php

namespace Modules\Product\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Modules\Product\Entities\Category;

class CategoryController extends Controller
{
    
    public function index()
    {
        $categories = Category::get((object)['type'=>'list']);
        return view('category.index', compact('categories'));
    }

    public function get(Request $request)
    {      
        return Category::get($request);
    }
   
    public function create()
    {   
        $categories = Category::get((object)['type'=>'nivel', 'value'=>0]);
        $select = (object)['display' => true]; 
        return view('category.create', compact('categories', 'select'));
    }

    public function show(Request $request, $id)
    {
        $request->type = 'regist';
        $request->value = $id;        
        $category = json_decode(Category::get($request));
        $select = (object)['display' => false];
        return view('category.show', compact('category', 'select'));
    }

    public function edit(Request $request, $id)
    {        
        $request->type = 'regist';
        $request->value = $id;        
        $category = json_decode(Category::get($request));
        $select = (object)['display' => false];
        return view('category.edit', compact('category', 'select'));
    }

    public function regist(Request $request)
    {
        //dd($request);
    
        $request->id        = $request->id        ? $request->id        : 0;
        $request->parent_id = $request->parent_id ? $request->parent_id : 0;
        $response = Category::regist($request);
        if ($response[0]=='t')
            $msgType = 'success';
        elseif ($response[0]=='f')
            $msgType = 'error';
        return response()->json(["message" => $response[1]]);   
        //return redirect()->route('category.index')->with($msgType, $response[1]); 
    }

    public function destroy($id)
    {        
        $response = Category::remove($id);
        if ($response[0]=='t')
            $msgType = 'success';
        elseif ($response[0]=='f')
            $msgType = 'error';        
        return response()->json(204);             
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Controllers/PresentationController.php`:

```php
<?php

namespace Modules\Product\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Routing\Controller;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\DB;
use Modules\Product\Entities\Product;

use Modules\Product\Entities\Presentation;
use Modules\Product\Http\Requests\Presentation\{
    StorePresentationRequest,
    UpdatePresentationRequest    
};
use Modules\Product\Http\Services\Presentation\{
    //IndexPresentationService,
    StorePresentationService,
    UpdatePresentationService
};
use Illuminate\Support\Facades\Storage;

class PresentationController extends Controller
{
    /**
     * Display a listing of the resource by parent.
     */
    public function getAllByProduct(Request $request): Collection
    {
        return Presentation::select(
            DB::raw("* ,presentation_deploy(presentations.id) as packing_deployed")
        )
        ->where("product_id", $request->productId)
        ->get();
    }

    /**
     * Store a newly created resource in storage.
     */    
    public function store(StorePresentationRequest $request): JsonResponse
    {    
        return StorePresentationService::execute($request);
    }
    
    /**
     * Update the specified resource in storage.
     */
    public function update(UpdatePresentationRequest $request, Presentation $presentation): JsonResponse
    {
        return UpdatePresentationService::execute($request, $presentation);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Request $request): JsonResponse
    {
        try {
            Presentation::destroy($request->id);
            $directory = 'public/Product/presentations/presentation-' . $request->id;
            if (Storage::disk('local')->exists($directory)) {
                Storage::deleteDirectory($directory);              
            }  
            return response()->json(204);
        } catch (Exception $exception) {
            return response()->json(['message' => $exception->getMessage()], 409);
        }        
    }
    
    public function fileUpload(Request $request, Presentation $presentation): JsonResponse
    {      
      try {
          $directory = 'Product/presentations/presentation-' . $presentation->id;
          if (Storage::disk('local')->exists($directory)) {
              Storage::deleteDirectory($directory);              
          }
          $filePath = Storage::disk('local')->putFile($directory, $request->file, 'public');          
          $presentation->photo_path = "storage/$filePath";
          $presentation->save();          
      } catch (Exception $exception) {
          return response()->json(['message' => $exception->getMessage()], 409);
      }//return new PresentationResource($presentation);
      return response()->json(['message' => 'Photo uploaded'], 201);
      
    }
    
    
    public function search(Request $request): JsonResponse
    {
        // Initialize query
        $query = Presentation::query()
            ->select(           
                DB::raw("
                    presentations.id,
                    presentations.bar_cod,                
                    presentations.price,
                    presentations.status,
                    presentations.photo_path,
                    presentation_deploy(presentations.id) as packing_deployed,                    
                    products.name as product_name,
                    categories.name as category_name,
                    marks.name as mark_name
                ")
            )
            ->join("products"  , "products.id"  , "=", "presentations.product_id")
            ->join("categories", "categories.id", "=", "products.category_id")
            ->join("marks", "marks.id", "=", "products.mark_id");
            
        // search 
        $search = strtoupper($request->input("search"));
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                    ->where  (DB::raw("UPPER(bar_cod)"        ), "like", "%$search%")
                    ->orWhere(DB::raw("UPPER(products.name)"  ), "like", "%$search%")
                    ->orWhere(DB::raw("UPPER(categories.name)"), "like", "%$search%")
                    ->orWhere(DB::raw("UPPER(marks.name)"     ), "like", "%$search%");
            });
        }

        // sort 
        $sort = $request->input("sort");
        $direction = $request->input("direction") === "desc" ? "desc" : "asc";        
        ($sort)
            ? $query->orderBy($sort, $direction) 
                : $query->orderBy("presentations.id", "asc");

        // get paginated results 
        $presentations = $query
            ->paginate(5)
            ->appends(request()->query());

        return response()->json([
            "rows" => $presentations,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Inertia\Response
     */
    /*static public function search(Request $request): JsonResponse
    {          
        // Initialize query          
        $query = Product::query()
            ->select(
                "products.id",
                "products.name as product",
                "marks.name as mark",
                "view_categories.family as category"
            )       
            ->join("view_categories", "view_categories.id", "=", "products.category_id")     
            ->join("marks", "marks.id", "=", "products.mark_id");

        // search 
        $search = $request->input("search");
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                    ->where("products.name", "like", "%$search%");
                    //->orWhere("email", "like", "%$search%");
            });
        }

        // sort 
        $sort = $request->input("sort");
        $direction = $request->input("direction") === "desc" ? "desc" : "asc";        
        ($sort)
            ? $query->orderBy($sort, $direction) 
                : $query->orderBy("product", "asc");

        // get paginated results 
        $products = $query
            ->paginate(500)
            ->appends(request()->query());

        return response()->json([
            "rows" => $products,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);
    }*/




}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Controllers/MarkController.php`:

```php
<?php

namespace Modules\Product\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Routing\Controller;
use Modules\Product\Entities\Mark;
use Modules\Product\Http\Services\Mark\{
    IndexMarkService,
    StoreMarkService,
    UpdateMarkService
};
use Modules\Product\Http\Requests\Mark\{
    StoreMarkRequest,
    UpdateMarkRequest
    
};
use Modules\Product\Http\Resources\MarkResource;

class MarkController extends Controller
{

    /**
     * Display a listing of the resource.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request): JsonResponse
    {
        //if (Auth::user()->isAdmin()) {
            return IndexMarkService::execute($request);            
        //}
        //return  response()->json(["message" => "Forbidden"], 403);
    }

    /**
     * Display a listing of the resource.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function list(Request $request): JsonResponse
    {
        //if (Auth::user()->isAdmin()) {
            return response()->json(Mark::all());            
        //}
        //return  response()->json(["message" => "Forbidden"], 403);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  Modules\Product\Http\Requests\Mark\StoreMarkRequest $request
     * @return \Illuminate\Http\JsonResponse
     */ 
    public function store(StoreMarkRequest $request): JsonResponse
    {
        //if (Auth::user()->isAdmin()) {
            return StoreMarkService::execute($request);
        //}
        //return  response()->json(["message" => "Forbidden"], 403);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return Modules\Product\Http\Resources\MarkResource | \Illuminate\Http\Response
     */
    public function show(Mark $mark): MarkResource | Response
    {
        //if (Auth::user()->isAdmin()) {
          return new MarkResource($mark);
        //}
        //return  response()->json(["message" => "Forbidden"], 403);
    }
    
    /**
     * Update the specified resource in storage.
     *
     * @param  Modules\Product\Http\Requests\Mark\UpdateMarkRequest $request
     * @param  Modules\Product\Entities\Mark; $mark
     * @return \Illuminate\Http\JsonResponse
     */     
    public function update(UpdateMarkRequest $request, Mark $mark): JsonResponse
    {
        //if (Auth::user()->isAdmin()) {
            return UpdateMarkService::execute($request, $mark);
        //}
        //return  response()->json(["message" => "Forbidden"], 403);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy(Request $request): JsonResponse
    {      
        //if (Auth::user()->isAdmin()) {
            Mark::destroy($request->id);
            return response()->json(204);            
        //}
        return  response()->json(["message" => "Forbidden"], 403);
    }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Controllers/ProductController.php`:

```php
<?php

namespace Modules\Product\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Routing\Controller;
use Modules\Product\Entities\Product;
use Modules\Product\Http\Services\Product\{
    IndexProductService,
    StoreProductService,
    UpdateProductService
};
use Modules\Product\Http\Requests\Product\{
    StoreProductRequest,
    UpdateProductRequest
    
};
use Modules\Product\Http\Resources\ProductResource;
use Modules\Product\Entities\Presentation;

class ProductController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request): JsonResponse
    {
        //if (Auth::user()->isAdmin()) {
            return IndexProductService::execute($request);            
        //}
        //return  response()->json(["message" => "Forbidden"], 403);
    }

    public function show(Product $product): JsonResponse
    {
        return response()->json($product, 200);
    }

    public function update(UpdateProductRequest $request, Product $product): JsonResponse
    {        
        //if (Auth::user()->isAdmin()) {
            return UpdateProductService::execute($request, $product);
        //}
        //return  response()->json(["message" => "Forbidden"], 403);
    }

    public function store(StoreProductRequest $request): JsonResponse
    {
        //if (Auth::user()->isAdmin()) {
            return StoreProductService::execute($request);
        //}
        //return  response()->json(["message" => "Forbidden"], 403);
    }

    public function destroy(Request $request): JsonResponse
    {
        $count = Presentation::where('product_id', $request->id)->count();           
        if (!$count){        
            Product::destroy($request->id);
            return response()->json(204);            
        }
        return  response()->json(["message" => "Sorry, there are $count associated records"], 403);
    }

    /*public function get(Request $request)
    {
        return Product::get($request);
    }

    public function index()
    {
        $products = Product::get((object)['type'=>'list']);
        return view('product.index', compact('products'));
    }

    public function create()
    {
        return view('product.create');
    }

    public function show(Product $product) { }

    public function edit(Request $request)
    {
        //$product = Product::get((object)[
        //    'type'=>'regist',
        //    'value'=>$request->id
        //]);
        $prod = (object)['id' => $request->id ];
        return view('product.edit', compact('prod'));
    }

    public function regist(Request $request)
    {
        return Product::regist($request);
    }

    public function destroy(Product $product) { }    
    
    public function photo(Request $request){
        //$name = $request->photo->getClientOriginalName();
        $ext = $request->photo->getClientOriginalExtension();
        $name = 'productId_' . $request->productId;   
        $request->photo->storeAs('public/product', $name . '.' . $ext); 
        $product = Product::find($request->productId);
        $product->photo = $name . '.' . $ext;
        return $product->save();
    }*/
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Display a listing of the resource.
     * @return Renderable
     */
    //public function index()
    //{
    //    return view('product::index');
    //}

    /**
     * Show the form for creating a new resource.
     * @return Renderable
     */
    //public function create()
    //{
    //    return view('product::create');
    //}

    /**
     * Store a newly created resource in storage.
     * @param Request $request
     * @return Renderable
     */
    //public function store(Request $request)
    //{
        //
    //}

    /**
     * Show the specified resource.
     * @param int $id
     * @return Renderable
     */
    //public function show($id)
    //{
    //    return view('product::show');
    //}

    /**
     * Show the form for editing the specified resource.
     * @param int $id
     * @return Renderable
     */
    //public function edit($id)
    //{
    //    return view('product::edit');
    //}

    /**
     * Update the specified resource in storage.
     * @param Request $request
     * @param int $id
     * @return Renderable
     */
    //public function update(Request $request, $id)
    //{
    //    //
    //}

    /**
     * Remove the specified resource from storage.
     * @param int $id
     * @return Renderable
     */
    //public function destroy($id)
    //{
    //    //
    //}
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Resources/MarkResource.php`:

```php
<?php

namespace Modules\Product\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class MarkResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function toArray($request)
    {
        return [
          'id' => $this->id,
          'name' => $this->name          
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Services/Product/UpdateProductService.php`:

```php
<?php
namespace Modules\Product\Http\Services\Product;

use Illuminate\Http\JsonResponse;
use Modules\Product\Entities\Product;
use Modules\Product\Http\Requests\Product\UpdateProductRequest;



class UpdateProductService
{
    static public function execute(UpdateProductRequest $request, Product $product) : JsonResponse           
    {
        //$data = $request->all();

        $product->update( $request->except( '_method' ) );

        return response()->json(["message"=> "Producto actualizado"], 200);      
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Services/Product/IndexProductService.php`:

```php
<?php

namespace Modules\Product\Http\Services\Product;

//use App\Http\Resources\UserCollection;
//use App\Http\Resources\UserResource;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Modules\Product\Entities\Product;

class IndexProductService
{

    /**
     * Display a listing of the resource.
     *
     * @return \Inertia\Response
     */
    static public function execute(Request $request): JsonResponse
    {          
        // Initialize query          
        $query = Product::query()
            ->select(
                "products.id",
                "products.name as product",
                "marks.name as mark",
                "view_categories.family as category"
            )       
            ->join("view_categories", "view_categories.id", "=", "products.category_id")     
            ->join("marks", "marks.id", "=", "products.mark_id");

        // search 
        $search = $request->input("search");
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                    ->where("products.name", "like", "%$search%");
                    //->orWhere("email", "like", "%$search%");
            });
        }

        // sort 
        $sort = $request->input("sort");
        $direction = $request->input("direction") === "desc" ? "desc" : "asc";        
        ($sort)
            ? $query->orderBy($sort, $direction) 
                : $query->orderBy("product", "asc");

        // get paginated results 
        $products = $query
            ->paginate(5)
            ->appends(request()->query());

        return response()->json([
            "rows" => $products,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Services/Product/StoreProductService.php`:

```php
<?php
namespace Modules\Product\Http\Services\Product;

use Illuminate\Http\JsonResponse;
use Modules\Product\Entities\Product;
use Modules\Product\Http\Requests\Product\StoreProductRequest;

class StoreProductService
{
  
    static public function execute(StoreProductRequest $request): JsonResponse
    {     
        $product = new Product();

        $product->name = $request->name;
        $product->category_id = $request->category_id;
        $product->mark_id = $request->mark_id;
        $product->measure_unit_type_id = $request->measure_unit_type_id;
        $product->measure_unit_id = $request->measure_unit_id;
        $product->measure_unit = $request->measure_unit;
        
        $product->save();
        $product->refresh();     

        return response()->json([
            'message' => 'Producto creado',
            'product_id' => $product->id
        ], 201);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Services/Presentation/StorePresentationService.php`:

```php
<?php
namespace Modules\Product\Http\Services\Presentation;

use Illuminate\Http\JsonResponse;
use Modules\Product\Entities\Presentation;
use Modules\Product\Http\Requests\Presentation\StorePresentationRequest;

class StorePresentationService
{
  
    static public function execute(StorePresentationRequest $request): JsonResponse
    {     
        $presentation = new Presentation();

        $presentation->product_id = $request->product_id;
        //$presentation->sale_type = $request->sale_type;
        //$presentation->int_cod = $request->int_cod;
        $presentation->bar_cod = $request->bar_cod;
        // $presentation->packing = $request->packing_deployed;
        // $presentation->packing_json = $request->packing_json;
        $presentation->packing = $request->packing_json;
        $presentation->price = $request->price;
        //$presentation->stock_min = $request->stock_min;
        //$presentation->stock_max = $request->stock_max;
        $presentation->status = $request->status;
        
        $presentation->save();
        $presentation->refresh();

        return response()->json([
            'message' => 'Presentación creada',
            'presentation_id' => $presentation->id
        ], 201);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Services/Presentation/UpdatePresentationService.php`:

```php
<?php
namespace Modules\Product\Http\Services\Presentation;

use Illuminate\Http\JsonResponse;
use Modules\Product\Entities\Presentation;
use Modules\Product\Http\Requests\Presentation\UpdatePresentationRequest;

class UpdatePresentationService
{
  
    static public function execute(UpdatePresentationRequest $request, Presentation $presentation): JsonResponse
    {     
        $presentation->product_id = $request->product_id;
        //$presentation->sale_type = $request->sale_type;
        //$presentation->int_cod = $request->int_cod;
        $presentation->bar_cod = $request->bar_cod;
        // $presentation->packing = $request->packing_deployed;
        // $presentation->packing_json = $request->packing_json;
        $presentation->packing = $request->packing_json;
        $presentation->price = $request->price;
        //$presentation->stock_max = $request->stock_max;
        //$presentation->stock_min = $request->stock_min;
        $presentation->status = $request->status;
        
        $presentation->save();        

        return response()->json([
            'message' => 'Presentación actualizada'            
        ], 200);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Services/Mark/IndexMarkService.php`:

```php
<?php

namespace Modules\Product\Http\Services\Mark;

//use App\Http\Resources\UserCollection;
//use App\Http\Resources\UserResource;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Modules\Product\Entities\Mark;

class IndexMarkService
{

    /**
     * Display a listing of the resource.
     *
     * @return \Inertia\Response
     */
    static public function execute(Request $request): JsonResponse
    {          
        // Initialize query 
        $query = Mark::query();

        // search 
        $search = $request->input("search");
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                    ->where("name", "like", "%$search%");
                    //->orWhere("email", "like", "%$search%");
            });
        }

        // sort 
        $sort = $request->input("sort");
        $direction = $request->input("direction") == "desc" ? "desc" : "asc";
        
        //if ($sort) { $query->orderBy($sort, $direction); } 
        if ($sort) {
            $query->orderBy($sort, $direction);
        }

        // get paginated results 
        $marks = $query
            ->paginate(5)
            ->appends(request()->query());

        return response()->json([
            "rows" => $marks,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Services/Mark/UpdateMarkService.php`:

```php
<?php
namespace Modules\Product\Http\Services\Mark;

use Illuminate\Http\JsonResponse;
use Modules\Product\Entities\Mark;
use Modules\Product\Http\Requests\Mark\UpdateMarkRequest;



class UpdateMarkService
{
    static public function execute(UpdateMarkRequest $request, Mark $mark) : JsonResponse
    {
        $data = $request->all();

        $mark->update( $request->except( '_method' ) );
            
        

        return response()->json(["message"=> "Marca actualizado"], 200);      
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Http/Services/Mark/StoreMarkService.php`:

```php
<?php
namespace Modules\Product\Http\Services\Mark;

use Illuminate\Http\JsonResponse;
use Modules\Product\Entities\Mark;
use Modules\Product\Http\Requests\Mark\StoreMarkRequest;

class StoreMarkService
{
  
    static public function execute(StoreMarkRequest $request): JsonResponse
    {     
        $mark = new Mark();
        $mark->name = $request->name;        
        $mark->save();

        return response()->json(["message"=> "Marca creada"], 201);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Providers/RouteServiceProvider.php`:

```php
<?php

namespace Modules\Product\Providers;

use Illuminate\Support\Facades\Route;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;

class RouteServiceProvider extends ServiceProvider
{
    protected string $name = 'Product';

    /**
     * Called before routes are registered.
     *
     * Register any model bindings or pattern based filters.
     */
    public function boot(): void
    {
        parent::boot();
    }

    /**
     * Define the routes for the application.
     */
    public function map(): void
    {
        $this->mapApiRoutes();
        $this->mapWebRoutes();
    }

    /**
     * Define the "web" routes for the application.
     *
     * These routes all receive session state, CSRF protection, etc.
     */
    protected function mapWebRoutes(): void
    {
        Route::middleware('web')->group(module_path($this->name, '/routes/web.php'));
    }

    /**
     * Define the "api" routes for the application.
     *
     * These routes are typically stateless.
     */
    protected function mapApiRoutes(): void
    {
        Route::middleware('api')->prefix('api')->name('api.')->group(module_path($this->name, '/routes/api.php'));
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Providers/EventServiceProvider.php`:

```php
<?php

namespace Modules\Product\Providers;

use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event handler mappings for the application.
     *
     * @var array<string, array<int, string>>
     */
    protected $listen = [];

    /**
     * Indicates if events should be discovered.
     *
     * @var bool
     */
    protected static $shouldDiscoverEvents = true;

    /**
     * Configure the proper event listeners for email verification.
     */
    protected function configureEmailVerification(): void
    {
        //
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Providers/ProductServiceProvider.php`:

```php
<?php

namespace Modules\Product\Providers;

use Illuminate\Support\Facades\Blade;
use Illuminate\Support\ServiceProvider;
use Nwidart\Modules\Traits\PathNamespace;

class ProductServiceProvider extends ServiceProvider
{
    use PathNamespace;

    protected string $name = 'Product';

    protected string $nameLower = 'product';

    /**
     * Boot the application events.
     */
    public function boot(): void
    {
        $this->registerCommands();
        $this->registerCommandSchedules();
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadMigrationsFrom(module_path($this->name, 'database/migrations'));
    }

    /**
     * Register the service provider.
     */
    public function register(): void
    {
        $this->app->register(EventServiceProvider::class);
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register commands in the format of Command::class
     */
    protected function registerCommands(): void
    {
        // $this->commands([]);
    }

    /**
     * Register command Schedules.
     */
    protected function registerCommandSchedules(): void
    {
        // $this->app->booted(function () {
        //     $schedule = $this->app->make(Schedule::class);
        //     $schedule->command('inspire')->hourly();
        // });
    }

    /**
     * Register translations.
     */
    public function registerTranslations(): void
    {
        $langPath = resource_path('lang/modules/'.$this->nameLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $this->nameLower);
            $this->loadJsonTranslationsFrom($langPath);
        } else {
            $this->loadTranslationsFrom(module_path($this->name, 'lang'), $this->nameLower);
            $this->loadJsonTranslationsFrom(module_path($this->name, 'lang'));
        }
    }

    /**
     * Register config.
     */
    protected function registerConfig(): void
    {
        $this->publishes([module_path($this->name, 'config/config.php') => config_path($this->nameLower.'.php')], 'config');
        $this->mergeConfigFrom(module_path($this->name, 'config/config.php'), $this->nameLower);
    }

    /**
     * Register views.
     */
    public function registerViews(): void
    {
        $viewPath = resource_path('views/modules/'.$this->nameLower);
        $sourcePath = module_path($this->name, 'resources/views');

        $this->publishes([$sourcePath => $viewPath], ['views', $this->nameLower.'-module-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->nameLower);

        $componentNamespace = $this->module_namespace($this->name, $this->app_path(config('modules.paths.generator.component-class.path')));
        Blade::componentNamespace($componentNamespace, $this->nameLower);
    }

    /**
     * Get the services provided by the provider.
     */
    public function provides(): array
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (config('view.paths') as $path) {
            if (is_dir($path.'/modules/'.$this->nameLower)) {
                $paths[] = $path.'/modules/'.$this->nameLower;
            }
        }

        return $paths;
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Entities/Category.php`:

```php
<?php

namespace Modules\Product\Entities;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Facades\DB;

class Category extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_product';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Product\Database\factories\CategoryFactory::new();
    }

    private static function replaceData($request, $string)
    {
        if (!empty($string) && !empty($request)) {
            foreach ($request as $campo => $valor) {
                $fields = "{fld:" . $campo . "}";
                $string = str_replace($fields, $valor, $string);
            }
        }
        return $string;
    }

    static public function get($request)
    {      
      $arr = [];
      $sql = 'SELECT id, name, family, parent_id, level
                FROM view_categories {fld:where}
                  ORDER BY 3';
      switch ($request->type) { 
          case 'list': 
              $arr['where'] = '';           
              $params = [];
              break;
          case 'regist':
              $arr['where'] = 'WHERE id = :id';
              $params = ['id' => $request->value];
              break;
          case 'nivel':
              $arr['where'] = 'WHERE parent_id = :parent_id';
              $params = ['parent_id' => $request->value];
              break;
          case 'select': 
              $arr['where'] = "WHERE final = 't'";
              $params = [];
              break;
          case 'stock':
              if (!$request->value) 
                  $request->value = 0;                                
              $array = explode(",",$request->value);
              $arrPos = [];
              $arrBind = [];
              foreach ($array as $pos => $id) {
                  $arrPos[] = ":id_{$pos}";
                  $arrBind["id_{$pos}"] = $id; 
              }
              $arr['where'] = "WHERE id IN (SELECT category_id FROM public.products
                               WHERE id IN (SELECT product_id FROM public.presentations
                               WHERE id IN (" . implode(', ' , $arrPos) . ")))";
              $params = $arrBind;               
              break;
      }
      $sql = self::replaceData($arr, $sql);
      $return = DB::connection('pgsql_product')->select($sql, $params);
      return $request->type==="regist" ? json_encode($return[0]) : $return;
    }

    static public function regist($request)
    {    
        $categories = DB::connection('pgsql_product')->select('SELECT category_register( :id, :parent_id, :name )', [
          'id'        => $request->id,
          'parent_id' => $request->parent_id,
          'name'      => $request->name
        ]);
        return json_decode($categories[0]->category_register);
    }
    
    static public function remove($id)
    {
        $categories = DB::connection('pgsql_product')->select('SELECT public.category_remove(:id)', ['id' => $id]);
        return json_decode($categories[0]->category_remove);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Entities/Presentation.php`:

```php
<?php

namespace Modules\Product\Entities;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\DB;

class Presentation extends Model
{
    use HasFactory, SoftDeletes;
    
    protected $connection = 'pgsql_product';

    //protected $fillable = [];
    protected $fillable = ['measure_unit'];

    protected $with = ['product', 'product.category', 'product.mark'];

    /**
     * Get the category for the product.
     */
    public function product()
    {        
        return $this->belongsTo(\Modules\Product\Entities\Product::class);
    }
    
    protected static function newFactory()
    {
        return \Modules\Product\Database\factories\PresentationFactory::new();
    }

    private static function replaceData($request, $string)
    {
        if (!empty($string) && !empty($request)) {
            foreach ($request as $campo => $valor) {
                $fields = "{fld:" . $campo . "}";
                $string = str_replace($fields, $valor, $string);
            }
        }
        return $string;
    }

    static public function get($request)
    {
      $arr = [];
      $sql = "SELECT      
          A.id,
          A.product_id,
          A.sale_type,
          CASE WHEN A.sale_type=true THEN 'Mayor'
               WHEN A.sale_type=false THEN 'Detal'        
               END AS sale_type,         
          A.int_cod,
          A.bar_cod,      
          A.packing as packing_json,
          (select presentation_deploy(A.id)) as packing_deployment,
          A.price,          
          A.stock_min,
          A.stock_max,          
          CASE WHEN A.status=true THEN 'Activo'
              WHEN A.status=false THEN 'Inactivo'        
              END AS status,
          B.name,
          B.photo,
          C.name AS mark,
          D.name AS category
      FROM public.presentations A
      INNER JOIN public.products B ON A.product_id = B.id
      INNER JOIN public.marks C ON B.mark_id = C.id
      INNER JOIN public.categories D ON D.id = B.category_id
      {fld:where}
      ORDER BY 2;";

      switch ($request->type) {
          case 'id':
              $arr['where'] = 'WHERE A.id = :id'; 
              $params = ['id' => $request->value0];
              break;
          case 'ids':
              if (!$request->value0) 
                  $request->value0 = 0;
              $array = explode(",",$request->value0);
              $arrPos = [];
              $arrBind = [];
              foreach ($array as $pos => $id) {
                  $arrPos[] = ":id_{$pos}";
                  $arrBind["id_{$pos}"] = $id; 
              }
              $arr['where'] = "WHERE A.id IN (" . implode(', ' , $arrPos) . ") ";              
              $params = $arrBind;
              break;
          case 'product':                
              $arr['where'] = 'WHERE A.product_id = :product_id'; 
              $params = ['product_id' => $request->value0];
              break;
          case 'search':
              $arr['where'] = 'WHERE D.name LIKE UPPER(:arg) 
              OR B.name LIKE UPPER(:arg) 
              OR C.name  LIKE UPPER(:arg)
              OR bar_cod LIKE UPPER(:arg)
              OR int_cod LIKE UPPER(:arg)';
              $params = ['arg' => '%' . $request->value0 . '%'];
              break;
           case 'stock':
              if (!$request->value0) 
                  $request->value0 = 0;
              if (!$request->value1) 
                  $request->value1 = 0;
              $array = explode(",",$request->value1);
              $arrPos = [];
              $arrBind = [];
              foreach ($array as $pos => $id) {
                  $arrPos[] = ":id_{$pos}";
                  $arrBind["id_{$pos}"] = $id; 
              }
              $arr['where'] = "WHERE A.id IN (" . implode(', ' , $arrPos) . ")
                               AND A.product_id = :product_id";
              $arrBind["product_id"] = $request->value0;
              $params = $arrBind;               
              break;
          default:
              return;
      }
      
      $sql = self::replaceData($arr, $sql);      
      return DB::select($sql, $params);
      
    }

    static public function regist($request)
    {    
      $presentations = DB::select(
          "SELECT presentation_register( 
              :id_presentation, 
              :product_id,          
              :packing,
              :bar_cod,
              :int_cod,
              :stock_min,
              :stock_max,
              :price,
              :sale_type,
              :status,          
              :user_id)", [
                  'id_presentation' => $request->id_presentation,
                  'product_id'      => $request->product_id,              
                  'packing'         => $request->packing,
                  'bar_cod'         => $request->bar_cod,
                  'int_cod'         => $request->int_cod,              
                  'stock_min'       => $request->stock_min,
                  'stock_max'       => $request->stock_max,
                  'price'           => $request->price,
                  'sale_type'       => $request->sale_type,
                  'status'          => $request->status,              
                  'user_id'         => $request->user_id,
        ]);
        return $presentations[0]->presentation_register;
    }

    static public function remove($id)
    {
        $presentations = DB::select('SELECT public.presentation_remove(:id)', ['id' => $id]);
        return json_encode($presentations[0]->presentation_remove);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Entities/Product.php`:

```php
<?php

namespace Modules\Product\Entities;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\DB;

class Product extends Model
{
    use HasFactory, SoftDeletes;

    protected $connection = 'pgsql_product';

    protected $fillable = [
        'company_id',
        'name',
        'category_id',
        'mark_id',
        'measure_unit_type_id',
        'measure_unit_id'      
        //'photo'
    ];

   protected $load = ['category', 'mark'];
  // protected $with = ['category', 'mark'];   

    protected static function newFactory()
    {
        return \Modules\Product\Database\factories\ProductFactory::new();
    }    
    
    /**
     * Get the category for the product.
     */
    public function category()
    {        
        return $this->belongsTo(\Modules\Product\Entities\Category::class);
    }

    /**
     * Get the mark for the product.
     */
    public function mark()
    {        
        return $this->belongsTo(\Modules\Product\Entities\Mark::class);
    }

    public function presentations()
    {        
        return $this->hasMany(\Modules\Product\Entities\Presentation::class);
    }


    private static function replaceData($request, $string)
    {
        if (!empty($string) && !empty($request)) {
            foreach ($request as $campo => $valor) {
                $fields = "{fld:" . $campo . "}";
                $string = str_replace($fields, $valor, $string);
            }
        }
        return $string;
    }

    static public function get($request)
    {
      $arr = [];
      $sql = 'SELECT 
                  A.id
                 ,A.name
                 ,A.mark_id
                 ,A.category_id
                 ,A.measure_unit_type_id
                 ,A.measure_unit_id
                 ,A.measure_unit
                 //,A.photo
                 ,B.name AS des_category
                 ,B.family AS des_category_family
                 ,C.name AS des_mark
             FROM public.products A
                 INNER JOIN public.view_categories B ON A.category_id=B.id
                 INNER JOIN public.marks C ON A.mark_id=C.id
             {fld:where}
             ORDER BY 2;';
      switch ($request->type) { 
          case 'list': 
              $arr['where'] = '';           
              $params = [];
              break;
          case 'category':          
                $arr['where'] = 'WHERE A.category_id = :category_id';           
                $params = ['category_id' => $request->value0];
                break;
          case 'regist':
              $arr['where'] = 'WHERE A.id = :id';
              $params = ['id' => $request->value0];
              break;
           case 'stock':
              if (!$request->value0) 
                  $request->value0 = 0;
              if (!$request->value1) 
                  $request->value1 = 0;
              $array = explode(",",$request->value1);
              $arrPos = [];
              $arrBind = [];
              foreach ($array as $pos => $id) {
                  $arrPos[] = ":id_{$pos}";
                  $arrBind["id_{$pos}"] = $id; 
              }
              $arr['where'] = "WHERE A.id IN (SELECT product_id FROM public.presentations
                               WHERE id IN (" . implode(', ' , $arrPos) . "))
                               AND A.category_id = :category_id";
              $arrBind["category_id"] = $request->value0;
              $params = $arrBind;               
              break;
          default:
              return;
      }
      $sql = self::replaceData($arr, $sql);
      $return = DB::select($sql, $params);
      return $request->type==="regist" ? json_encode($return[0]) : $return;
    }

    static public function regist($request)
    {    
        $products = DB::select(
          "SELECT product_register( :id, :name, :category_id, :mark_id, :measure_unit_type_id, :measure_unit_id, :measure_unit, :user_id )", [
          'id'                   => $request->id,
          'name'                 => $request->name,
          'category_id'          => $request->category_id,
          'mark_id'              => $request->mark_id,
          'measure_unit_type_id' => $request->measure_unit_type_id,
          'measure_unit_id'      => $request->measure_unit_id,
          'measure_unit'         => $request->measure_unit,
          'user_id'              => $request->user_id
        ]);
        return $products[0]->product_register;
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/app/Entities/Mark.php`:

```php
<?php

namespace Modules\Product\Entities;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Facades\DB;

class Mark extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_product';

    protected $fillable = ['name'];
    
    protected static function newFactory()
    {
        return \Modules\Product\Database\factories\MarkFactory::new();
    }

    /*private static function replaceData($request, $string)
    {
        if (!empty($string) && !empty($request)) {
            foreach ($request as $campo => $valor) {
                $fields = "{fld:" . $campo . "}";
                $string = str_replace($fields, $valor, $string);
            }
        }
        return $string;
    }

    static public function get($request)
    {
      $arr = [];
      $sql = 'SELECT id, name, producer_id 
                FROM public.marks {fld:where} ORDER BY 2;';
      switch ($request->type) { 
          case 'list': 
              $arr['where'] = '';           
              $params = [];
              break;
          case 'regist':
              $arr['where'] = 'WHERE id = :id';
              $params = ['id' => $request->value];
              break;
      }
      $sql = self::replaceData($arr, $sql);
      $return = DB::connection('pgsql_product')->select($sql, $params);
      return $request->type==="regist" ? json_encode($return[0]) : $return;
    }

    static public function regist($request)
    {    
        $marks = DB::select('SELECT mark_register( :id, :name, :producer_id )', [
          'id'        => $request->id,
          'name'      => $request->name,
          'producer_id' => $request->producer_id,
        ]);
        return json_decode($marks[0]->mark_register);
    }
    
    static public function remove($id)
    {
        $marks = DB::select('SELECT public.mark_remove(:id)', ['id' => $id]);
        return json_decode($marks[0]->mark_remove);
    }*/

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/package.json`:

```json
{
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "devDependencies": {
    "axios": "^1.1.2",
    "laravel-vite-plugin": "^0.7.5",
    "sass": "^1.69.5",
    "postcss": "^8.3.7",
    "vite": "^4.0.0"
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/routes/api.php`:

```php
<?php

use Illuminate\Support\Facades\Route;
//use Modules\Product\Http\Controllers\ProductController;
use Illuminate\Http\Request;
use Modules\Product\Http\Controllers\{
    CategoryController,
    MarkController,
    ProductController,
    PresentationController
};

/*
 *--------------------------------------------------------------------------
 * API Routes
 *--------------------------------------------------------------------------
 *
 * Here is where you can register API routes for your application. These
 * routes are loaded by the RouteServiceProvider within a group which
 * is assigned the "api" middleware group. Enjoy building your API!
 *
*/

//Route::middleware(['auth:sanctum'])->prefix('v1')->group(function () {
//    Route::apiResource('product', ProductController::class)->names('product');
//});

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group. Enjoy building your API!
|
*/

/*Route::middleware('auth:api')->get('/product', function (Request $request) {
    return $request->user();
});*/


Route::prefix('category')->group(function () {
    Route::get('/get/{type}/{value?}', [CategoryController::class, 'get']);
    Route::post('/regist', [CategoryController::class, 'regist']);
    Route::delete('/remove/{id}', [CategoryController::class, 'destroy']);
});

Route::prefix('marks')->group(function () {
  Route::get('/', [MarkController::class, 'index']);
  Route::get('/list', [MarkController::class, 'list']);
  Route::get('/{mark}', [MarkController::class, 'show']);
  Route::post('/', [MarkController::class, 'store']);
  Route::put('/{mark}', [MarkController::class, 'update']);
  Route::delete('/{id}', [MarkController::class,'destroy']);
});

Route::prefix('products')->group(function () {
  Route::get('/', [ProductController::class, 'index']);  
  Route::get('/{product}', [ProductController::class, 'show']);
  Route::post('/', [ProductController::class, 'store']);
  Route::put('/{product}', [ProductController::class, 'update']);
  Route::delete('/{id}', [ProductController::class,'destroy']);
});

Route::get('/presentation-search', [PresentationController::class,'search']);
Route::prefix('presentations')->group(function () {
  Route::get('/{productId}', [PresentationController::class, 'getAllByProduct']);
  Route::get('/{presentation}', [PresentationController::class, 'show']);
  Route::post('/', [PresentationController::class, 'store']);
  Route::put('/{presentation}', [PresentationController::class, 'update']);
  Route::delete('/{id}', [PresentationController::class,'destroy']);
});
Route::post('/presentation-fileupload/{presentation}', [PresentationController::class,'fileUpload']);  



/*Route::get('/product/get/{type}/{value0?}/{value1?}', [ProductController::class, 'get']);
Route::post('/product/regist', [ProductController::class, 'regist']);
Route::post('/product/photo', [ProductController::class, 'photo']);
//Route::delete('/product/remove/{id}', [ProductController::class, 'destroy']);
*/

//Route::get('/presentation/{type}/{value0?}/{value1?}', [PresentationController::class, 'get']);
//Route::post('/presentation/regist', [PresentationController::class, 'regist']);
//Route::delete('/presentation/remove/{id}', [PresentationController::class, 'destroy']);

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/routes/web.php`:

```php
<?php

use Illuminate\Support\Facades\Route;
use Modules\Product\Http\Controllers\ProductController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::group([], function () {
    Route::resource('product', ProductController::class)->names('product');
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/vite.config.js`:

```js
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    build: {
        outDir: '../../public/build-product',
        emptyOutDir: true,
        manifest: true,
    },
    plugins: [
        laravel({
            publicDirectory: '../../public',
            buildDirectory: 'build-product',
            input: [
                __dirname + '/resources/assets/sass/app.scss',
                __dirname + '/resources/assets/js/app.js'
            ],
            refresh: true,
        }),
    ],
});

//export const paths = [
//    'Modules/Product/resources/assets/sass/app.scss',
//    'Modules/Product/resources/assets/js/app.js',
//];
```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Product/module.json`:

```json
{
    "name": "Product",
    "alias": "product",
    "description": "",
    "keywords": [],
    "priority": 0,
    "providers": [
        "Modules\\Product\\Providers\\ProductServiceProvider"
    ],
    "files": []
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/resources/views/index.blade.php`:

```php
@extends('common::layouts.master')

@section('content')
    <h1>Hello World</h1>

    <p>Module: {!! config('common.name') !!}</p>
@endsection

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/resources/views/layouts/master.blade.php`:

```php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>Common Module - {{ config('app.name', 'Laravel') }}</title>

    <meta name="description" content="{{ $description ?? '' }}">
    <meta name="keywords" content="{{ $keywords ?? '' }}">
    <meta name="author" content="{{ $author ?? '' }}">

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    {{-- Vite CSS --}}
    {{-- {{ module_vite('build-common', 'resources/assets/sass/app.scss') }} --}}
</head>

<body>
    @yield('content')

    {{-- Vite JS --}}
    {{-- {{ module_vite('build-common', 'resources/assets/js/app.js') }} --}}
</body>

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/MuContainerSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class MuContainerSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (22, 'CAJA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (1, 'PAQUETE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (2, 'BOLSA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (3, 'TUBO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (5, 'PAPELETA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (6, 'BULTO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (7, 'BARRIL(ES)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (8, 'PIPETA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (9, 'PIPOTE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (10, 'FAJA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (11, 'BOTELLA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (14, 'POTE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (13, 'GABERA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (19, 'VASO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (18, 'BOMBONA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (16, 'TANQUE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (15, 'PIMPINA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (20, 'GALON(ES)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (21, 'CUÑETE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (4, 'FRASCO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (12, 'LATA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (24, 'PAILA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (23, 'TAMBOR(ES)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (25, 'BOBINA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (26, 'ROLLO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (27, 'PALETA(S) ')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (28, 'LÁMINA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (29, 'CARBOYA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (30, 'TOTEN(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (31, 'CARTUCHO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (32, 'GRANEL')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (33, 'N/A')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (35, 'BLISTER(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (36, 'PACA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (37, 'SACO(S)')");
        DB::connection('pgsql_common')->statement(
            "UPDATE public.mu_containers
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
        );
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/MunicipalitiesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class MunicipalitiesTableSeeder extends Seeder
{
  /**
   * Run the database seeds.
   *
   * @return void
   */
  public function run()
  {
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (102, 19, 'PEDERNALES', '-62.17', '9,81', NULL, NULL, '03  ', 103)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (178, 11, 'ANDRÉS BELLO', '-66.07', '10,27', NULL, NULL, '02  ', 178)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (10, 1, 'FERNANDO DE PEÑALVER', '-64.87', '10,06', NULL, NULL, '03  ', 11)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (31, 3, 'MUÑOZ', '-68.93', '7,37', NULL, NULL, '03  ', 32)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (38, 4, 'GIRARDOT', '-67.58', '10,46', NULL, NULL, '03  ', 39)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (68, 16, 'EL CALLAO', '-61.39', '7,99', NULL, NULL, '03  ', 70)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (79, 17, 'DIEGO IBARRA', '-67.68', '10,27', NULL, NULL, '03  ', 80)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (93, 18, 'GIRARDOT', '-68.3', '8,95', NULL, NULL, '03  ', 94)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (107, 7, 'BUCHIVACOA', '-70.76', '11,12', NULL, NULL, '03  ', 107)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (135, 8, 'LAS MERCEDES', '-66.48', '8,54', NULL, NULL, '06  ', 135)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (147, 9, 'IRIBARREN', '-69.34', '10,06', NULL, NULL, '03  ', 147)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (148, 9, 'JIMÉNEZ', '-69.62', '9,9', NULL, NULL, '04  ', 148)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (151, 9, 'SIMÓN PLANAS', '-69.1', '9,72', NULL, NULL, '07  ', 151)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (179, 11, 'BARUTA', '-66.85', '10,46', NULL, NULL, '03  ', 179)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (200, 20, 'BOLÍVAR', '-63.18', '9,74', NULL, NULL, '03  ', 200)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (213, 21, 'DÍAZ', '-64', '10,95', NULL, NULL, '03  ', 213)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (224, 12, 'ESTELLER', '-69.2', '9,37', NULL, NULL, '03  ', 224)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (238, 22, 'ARISMENDI', '-63.1', '10,68', NULL, NULL, '03  ', 238)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (253, 13, 'AYACUCHO', '-72.25', '8,04', NULL, NULL, '03  ', 253)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (2, 2, 'ATABAPO', '-66.66', '3,95', NULL, NULL, '02  ', 2)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (3, 2, 'ATURES', '-67.59', '5,65', NULL, NULL, '03  ', 3)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (4, 2, 'AUTANA', '-66.97', '4,8', NULL, NULL, '04  ', 5)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (6, 2, 'MANAPIARE', '-65.36', '5,33', NULL, NULL, '06  ', 7)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (7, 2, 'RÍO NEGRO', '-65.65', '1,64', NULL, NULL, '07  ', 8)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (8, 1, 'ANACO', '-64.46', '9,43', NULL, NULL, '01  ', 9)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (9, 1, 'ARAGUA', '-64.83', '9,46', NULL, NULL, '02  ', 10)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (11, 1, 'FRANCISCO DEL CARMEN CARVAJAL', '-64.72', '10,13', NULL, NULL, '04  ', 12)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (12, 1, 'FRANCISCO DE MIRANDA', '-64.31', '8,79', NULL, NULL, '05  ', 13)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (13, 1, 'GUANTA', '-64.36', '10,27', NULL, NULL, '06  ', 14)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (14, 1, 'INDEPENDENCIA', '-63.17', '8,58', NULL, NULL, '07  ', 15)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (15, 1, 'JUAN ANTONIO SOTILLO', '-64.38', '10,22', NULL, NULL, '08  ', 16)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (16, 1, 'JUAN MANUEL CAJIGAL', '-65.04', '9,88', NULL, NULL, '09  ', 17)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (17, 1, 'JOSÉ GREGORIO MONAGAS', '-65.22', '8,44', NULL, NULL, '10  ', 18)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (18, 1, 'LIBERTAD', '-64.72', '10,13', NULL, NULL, '11  ', 19)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (19, 1, 'MANUEL EZEQUIEL BRUZUAL', '-64.89', '9,96', NULL, NULL, '12  ', 20)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (21, 1, 'PÍRITU', '-64.79', '9,98', NULL, NULL, '14  ', 22)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (22, 1, 'SAN JOSÉ DE GUANIPA', '-64.1', '8,88', NULL, NULL, '15  ', 23)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (23, 1, 'SAN JUAN DE CAPISTRANO', '-65', '10,04', NULL, NULL, '16  ', 24)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (24, 1, 'SANTA ANA', '-64.35', '9,82', NULL, NULL, '17  ', 25)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (25, 1, 'SIMÓN BOLÍVAR', '-64.72', '10,13', NULL, NULL, '18  ', 26)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (26, 1, 'SIMÓN RODRÍGUEZ', '-64.26', '8,88', NULL, NULL, '19  ', 27)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (27, 1, 'SIR ARTHUR MC GREGOR', '-64.72', '-64,72', NULL, NULL, '20  ', 28)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (28, 1, 'DIEGO BAUTISTA URBANEJA', '-64.59', '10,17', NULL, NULL, '21  ', 29)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (29, 3, 'ACHAGUAS', '-68.31', '7,6', NULL, NULL, '01  ', 30)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (30, 3, 'BIRUACA', '-67.3', '7,75', NULL, NULL, '02  ', 31)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (32, 3, 'PÁEZ', '-70.71', '7,19', NULL, NULL, '04  ', 33)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (33, 3, 'PEDRO CAMEJO', '-67.66', '6,97', NULL, NULL, '05  ', 34)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (34, 3, 'RÓMULO GALLEGOS', '-69.32', '6,71', NULL, NULL, '06  ', 35)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (35, 3, 'SAN FERNANDO', '-66.91', '7,52', NULL, NULL, '07  ', 36)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (131, 8, 'CHAGUARAMAS', '-66.22', '9,49', NULL, NULL, '02  ', 131)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (67, 16, 'CEDEÑO', '-66.55', '6,55', NULL, NULL, '02  ', 69)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (146, 9, 'CRESPO', '-69.1', '10,49', NULL, NULL, '02  ', 146)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (106, 7, 'BOLÍVAR', '-69.71', '11,11', NULL, NULL, '02  ', 106)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (37, 4, 'CAMATAGUA', '-66.87', '9,9', NULL, NULL, '02  ', 38)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (155, 10, 'ANDRÉS BELLO', '-71.4', '8,68', NULL, NULL, '02  ', 155)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (55, 5, 'ANTONIO JOSÉ DE SUCRE', '-70.91', '8,09', NULL, NULL, '02  ', 56)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (78, 17, 'CARLOS ARVELO', '-67.72', '9,83', NULL, NULL, '02  ', 79)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (56, 5, 'ARISMENDI', '-68.25', '8,23', NULL, NULL, '03  ', 57)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (134, 8, 'LEONARDO INFANTE', '-66', '9,2', NULL, NULL, '05  ', 134)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (80, 17, 'GUACARA', '-67.89', '10,24', NULL, NULL, '04  ', 81)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (39, 4, 'JOSÉ ANGEL LAMAS', '-67.64', '10,23', NULL, NULL, '04  ', 40)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (109, 7, 'CARIRUBANA', '-70.02', '11,71', NULL, NULL, '05  ', 109)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (149, 9, 'MORÁN', '-69.78', '9,78', NULL, NULL, '05  ', 149)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (69, 16, 'GRAN SABANA', '-62.46', '5,87', NULL, NULL, '04  ', 71)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (103, 19, 'TUCUPITA', '-62.02', '9,05', NULL, NULL, '04  ', 104)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (94, 18, 'LIMA BLANCO', '-68.49', '9,83', NULL, NULL, '04  ', 95)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (40, 4, 'JOSÉ FÉLIX RIBAS', '-67.58', '10,18', NULL, NULL, '05  ', 41)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (58, 5, 'BOLÍVAR', '-70.51', '8,87', NULL, NULL, '05  ', 59)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (57, 5, 'BARINAS', '-70.18', '8,61', NULL, NULL, '04  ', 58)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (70, 16, 'HERES', '-63.54', '8,05', NULL, NULL, '05  ', 68)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (82, 17, 'LIBERTADOR', '-67.95', '9,74', NULL, NULL, '06  ', 83)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (95, 18, 'PAO DE SAN JUAN BAUTISTA', '-68', '9,21', NULL, NULL, '05  ', 96)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (105, 7, 'ACOSTA', '-68.36', '11,06', NULL, NULL, '01  ', 105)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (41, 4, 'JOSÉ RAFAEL REVENGA', '-67.56', '10,23', NULL, NULL, '06  ', 42)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (59, 5, 'CRUZ PAREDES', '-70.3', '8,92', NULL, NULL, '06  ', 60)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (71, 16, 'PIAR', '-62.38', '7,92', NULL, NULL, '06  ', 72)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (96, 18, 'RICAURTE', '-68.75', '9,37', NULL, NULL, '06  ', 97)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (110, 7, 'COLINA', '-69.55', '11,44', NULL, NULL, '06  ', 110)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (136, 8, 'JULIÁN MELLADO', '-67.04', '9,36', NULL, NULL, '07  ', 136)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (152, 9, 'TORRES', '-70.05', '10,16', NULL, NULL, '08  ', 152)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (42, 4, 'LIBERTADOR', '-67.61', '10,2', NULL, NULL, '07  ', 43)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (60, 5, 'EZEQUIEL ZAMORA', '-71.16', '7,79', NULL, NULL, '07  ', 61)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (72, 16, 'RAÚL LEONI', '-64.05', '5,61', NULL, NULL, '07  ', 73)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (83, 17, 'LOS GUAYOS', '-67.88', '10,11', NULL, NULL, '07  ', 84)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (97, 18, 'RÓMULO GALLEGOS', '-68.55', '9,45', NULL, NULL, '07  ', 98)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (111, 7, 'DABAJURO', '-70.53', '10,69', NULL, NULL, '07  ', 111)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (43, 4, 'MARIO BRICEÑO IRAGORRY', '-67.77', '10,44', NULL, NULL, '08  ', 44)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (61, 5, 'OBISPOS', '-70.04', '8,61', NULL, NULL, '08  ', 62)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (73, 16, 'ROSCIO', '-61.94', '7,77', NULL, NULL, '08  ', 74)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (84, 17, 'MIRANDA', '-68.39', '10,14', NULL, NULL, '08  ', 85)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (98, 18, 'SAN CARLOS', '-68.58', '9,65', NULL, NULL, '08  ', 99)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (112, 7, 'DEMOCRACIA', '-70.23', '10,76', NULL, NULL, '08  ', 112)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (137, 8, 'FRANCISCO DE MIRANDA', '-67.4', '8,9', NULL, NULL, '08  ', 137)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (44, 4, 'SAN CASIMIRO', '-66.95', '9,96', NULL, NULL, '09  ', 45)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (62, 5, 'PEDRAZA', '-70.35', '8,29', NULL, NULL, '09  ', 63)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (75, 16, 'SUCRE', '-65.01', '5,55', NULL, NULL, '10  ', 76)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (85, 17, 'MONTALBÁN', '-68.3', '10,2', NULL, NULL, '09  ', 86)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (99, 18, 'TINACO', '-68.34', '9,44', NULL, NULL, '09  ', 100)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (114, 7, 'FEDERACIÓN', '-69.76', '10,8', NULL, NULL, '10  ', 114)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (138, 8, 'JOSÉ TADEO MONAGAS', '-66.36', '9,84', NULL, NULL, '09  ', 138)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (153, 9, 'URDANETA', '-69.58', '10,59', NULL, NULL, '09  ', 153)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (45, 4, 'SAN SEBASTIÁN', '-67.09', '9,96', NULL, NULL, '10  ', 46)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (63, 5, 'ROJAS', '-69.65', '8,54', NULL, NULL, '10  ', 64)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (86, 17, 'NAGUANAGUA', '-68.15', '10,23', NULL, NULL, '10  ', 87)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (101, 19, 'CASACOIMA', '-62.33', '8,62', NULL, NULL, '02  ', 102)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (113, 7, 'FALCÓN', '-70.01', '12,06', NULL, NULL, '09  ', 113)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (139, 8, 'ORTIZ', '-67.53', '9,67', NULL, NULL, '10  ', 139)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (154, 10, 'ALBERTO ADRIANI', '-71.63', '8,61', NULL, NULL, '01  ', 154)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (36, 4, 'BOLÍVAR', '-67.28', '10,33', NULL, NULL, '01  ', 37)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (47, 4, 'SANTOS MICHELENA', '-67.47', '10,33', NULL, NULL, '12  ', 48)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (48, 4, 'SUCRE', '-67.6', '10,19', NULL, NULL, '13  ', 49)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (49, 4, 'TOVAR', '-67.37', '10,45', NULL, NULL, '14  ', 50)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (50, 4, 'URDANETA', '-66.73', '9,53', NULL, NULL, '15  ', 51)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (51, 4, 'ZAMORA', '-67.47', '10,33', NULL, NULL, '16  ', 52)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (52, 4, 'FRANCISCO LINARES ALCÁNTARA', '-67.47', '10,33', NULL, NULL, '17  ', 53)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (54, 5, 'ALBERTO ARVELO TORREALBA', '-69.84', '8,7', NULL, NULL, '01  ', 55)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (64, 5, 'SOSA', '-69.15', '8,16', NULL, NULL, '11  ', 65)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (66, 16, 'CARONÍ', '-62.9', '8,16', NULL, NULL, '01  ', 67)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (76, 16, 'PADRE PEDRO CHIEN', '-61.8', '8,38', NULL, NULL, '11  ', 77)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (77, 17, 'BEJUMA', '-68.27', '10,28', NULL, NULL, '01  ', 78)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (87, 17, 'PUERTO CABELLO', '-67.99', '10,37', NULL, NULL, '11  ', 88)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (88, 17, 'SAN DIEGO', '-68.39', '10,14', NULL, NULL, '12  ', 89)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (89, 17, 'SAN JOAQUÍN', '-67.78', '10,26', NULL, NULL, '13  ', 90)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (90, 17, 'VALENCIA', '-68', '10,17', NULL, NULL, '14  ', 91)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (92, 18, 'FALCÓN', '-68.3', '9,9', NULL, NULL, '02  ', 93)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (115, 7, 'JACURA', '-68.89', '10,94', NULL, NULL, '11  ', 115)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (116, 7, 'LOS TAQUES', '-70.22', '11,94', NULL, NULL, '12  ', 116)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (118, 7, 'MIRANDA', '-69.9', '11,37', NULL, NULL, '14  ', 118)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (119, 7, 'MONSEÑOR ITURRIZA', '-68.3', '10,93', NULL, NULL, '15  ', 119)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (120, 7, 'PALMASOLA', '-68.39', '10,69', NULL, NULL, '16  ', 120)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (121, 7, 'PETIT', '-69.5', '11,08', NULL, NULL, '17  ', 121)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (122, 7, 'PÍRITU', '-69.1', '11,4', NULL, NULL, '18  ', 122)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (123, 7, 'SAN FRANCISCO', '-68.77', '11,19', NULL, NULL, '19  ', 123)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (124, 7, 'SILVA', '-68.32', '10,77', NULL, NULL, '20  ', 124)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (126, 7, 'TOCÓPERO', '-69.27', '11,52', NULL, NULL, '22  ', 126)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (127, 7, 'UNIÓN', '-69.31', '10,78', NULL, NULL, '23  ', 127)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (128, 7, 'URUMACO', '-70.26', '11,18', NULL, NULL, '24  ', 128)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (129, 7, 'ZAMORA', '-69.68', '11,42', NULL, NULL, '25  ', 129)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (130, 8, 'CAMAGUÁN', '-67.48', '8,28', NULL, NULL, '01  ', 130)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (141, 8, 'JUAN GERMÁN ROSCIO', '-67.33', '9,88', NULL, NULL, '12  ', 141)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (142, 8, 'SAN JOSÉ DE GUARIBE', '-65.73', '9,76', NULL, NULL, '13  ', 142)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (143, 8, 'SANTA MARÍA DE IPIRE', '-65.23', '8,59', NULL, NULL, '14  ', 143)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (144, 8, 'PEDRO ZARAZA', '-65.29', '9,31', NULL, NULL, '15  ', 144)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (145, 9, 'ANDRÉS ELOY BLANCO', '-69.45', '9,65', NULL, NULL, '01  ', 145)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (5, 2, 'MAROA', '-67.28', '2,87', NULL, NULL, '05  ', 6)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (199, 20, 'AGUASAY', '-63.83', '9,36', NULL, NULL, '02  ', 199)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (180, 11, 'BRIÓN', '-66.1', '10,47', NULL, NULL, '04  ', 180)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (237, 22, 'ANDRÉS MATA', '-63.33', '10,49', NULL, NULL, '02  ', 237)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (252, 13, 'ANTONIO RÓMULO COSTA', '-72.13', '8,17', NULL, NULL, '02  ', 252)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (240, 22, 'BERMÚDEZ', '-63.24', '10,66', NULL, NULL, '05  ', 240)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (225, 12, 'GUANARE', '-69.74', '9,03', NULL, NULL, '04  ', 225)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (254, 13, 'BOLÍVAR', '-72.44', '7,8', NULL, NULL, '04  ', 254)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (214, 21, 'GARCÍA', '-63.91', '10,93', NULL, NULL, '04  ', 214)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (201, 20, 'CARIPE', '-63.5', '10,16', NULL, NULL, '04  ', 201)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (159, 10, 'CAMPO ELÍAS', '-71.22', '8,54', NULL, NULL, '06  ', 159)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (181, 11, 'BUROZ', '-66.14', '10,39', NULL, NULL, '05  ', 181)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (202, 20, 'CEDEÑO', '-63.86', '9,9', NULL, NULL, '05  ', 202)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (215, 21, 'GÓMEZ', '-63.92', '11,09', NULL, NULL, '05  ', 215)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (226, 12, 'GUANARITO', '-68.82', '8,39', NULL, NULL, '05  ', 226)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (256, 13, 'CÓRDOBA', '-72.27', '7,63', NULL, NULL, '06  ', 256)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (182, 11, 'CARRIZAL', '-66.96', '10,37', NULL, NULL, '06  ', 182)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (204, 20, 'LIBERTADOR', '-62.59', '9,01', NULL, NULL, '07  ', 204)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (157, 10, 'ARICAGUA', '-71.14', '8,21', NULL, NULL, '04  ', 157)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (216, 21, 'MANEIRO', '-63.79', '10,98', NULL, NULL, '06  ', 216)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (228, 12, 'OSPINO', '-69.46', '9,29', NULL, NULL, '07  ', 228)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (241, 22, 'BOLÍVAR', '-64.02', '10,36', NULL, NULL, '06  ', 241)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (20, 1, 'PEDRO MARÍA FREITES', '-64.36', '9,29', NULL, NULL, '13  ', 21)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (160, 10, 'CARACCIOLO PARRA OLMEDO', '-71.26', '8,9', NULL, NULL, '07  ', 160)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (183, 11, 'CHACAO', '-66.81', '10,49', NULL, NULL, '07  ', 183)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (217, 21, 'MARCANO', '-63.94', '11,06', NULL, NULL, '07  ', 217)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (242, 22, 'CAJIGAL', '-62.82', '10,56', NULL, NULL, '07  ', 242)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (257, 13, 'FERNÁNDEZ FEO', '-71.91', '7,49', NULL, NULL, '07  ', 257)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (161, 10, 'CARDENAL QUINTERO', '-70.69', '8,87', NULL, NULL, '08  ', 161)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (184, 11, 'CRISTÓBAL ROJAS', '-66.85', '10,24', NULL, NULL, '08  ', 184)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (205, 20, 'MATURÍN', '-63.18', '9,73', NULL, NULL, '08  ', 205)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (218, 21, 'MARIÑO', '-63.82', '10,96', NULL, NULL, '08  ', 218)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (229, 12, 'PÁEZ', '-69.21', '9,55', NULL, NULL, '08  ', 229)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (243, 22, 'CRUZ SALMERÓN ACOSTA', '-64.09', '10,6', NULL, NULL, '08  ', 243)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (258, 13, 'FRANCISCO DE MIRANDA', '-71.95', '8,32', NULL, NULL, '08  ', 258)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (162, 10, 'GUARAQUE', '-71.74', '8,16', NULL, NULL, '09  ', 162)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (185, 11, 'EL HATILLO', '-66.82', '10,42', NULL, NULL, '09  ', 185)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (206, 20, 'PIAR', '-63.49', '9,97', NULL, NULL, '09  ', 206)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (219, 21, 'PENÍNSULA DE MACANAO', '-64.34', '11', NULL, NULL, '09  ', 219)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (230, 12, 'PAPELÓN', '-69.16', '8,84', NULL, NULL, '09  ', 230)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (244, 22, 'LIBERTADOR', '-62.99', '10,52', NULL, NULL, '09  ', 244)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (259, 13, 'GARCÍA DE HEVIA', '-72.24', '8,21', NULL, NULL, '09  ', 259)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (163, 10, 'JULIO CÉSAR SALAS', '-70.88', '9,19', NULL, NULL, '10  ', 163)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (187, 11, 'INDEPENDENCIA', '-66.66', '10,23', NULL, NULL, '11  ', 187)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (207, 20, 'PUNCERES', '-63.18', '10,03', NULL, NULL, '10  ', 207)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (220, 21, 'TUBORES', '-64.08', '10,95', NULL, NULL, '10  ', 220)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (231, 12, 'SAN GENARO DE BOCONOITO', '-69.97', '8,84', NULL, NULL, '10  ', 231)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (245, 22, 'MARIÑO', '-62.57', '10,56', NULL, NULL, '10  ', 245)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (260, 13, 'GUÁSIMOS', '-72.23', '7,84', NULL, NULL, '10  ', 260)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (156, 10, 'ANTONIO PINTO SALINAS', '-71.63', '8,39', NULL, NULL, '03  ', 156)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (1, 2, 'ALTO ORINOCO', '-64.92', '3,2', NULL, NULL, '01  ', 4)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (46, 4, 'SANTIAGO MARIÑO', '-67.45', '10,45', NULL, NULL, '11  ', 47)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (53, 4, 'OCUMARE DE LA COSTA DE ORO', '-67.47', '10,33', NULL, NULL, '18  ', 54)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (65, 5, 'ANDRÉS ELOY BLANCO', '-70.25', '8,6', NULL, NULL, '12  ', 66)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (74, 16, 'SIFONTES', '-61.04', '7,68', NULL, NULL, '09  ', 75)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (164, 10, 'JUSTO BRICEÑO', '-70.94', '9,04', NULL, NULL, '11  ', 164)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (165, 10, 'LIBERTADOR', '-71.14', '8,57', NULL, NULL, '12  ', 165)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (166, 10, 'MIRANDA', '-70.83', '9,08', NULL, NULL, '13  ', 166)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (168, 10, 'PADRE NOGUERA', '-71.45', '7,76', NULL, NULL, '15  ', 168)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (169, 10, 'PUEBLO LLANO', '-70.64', '8,91', NULL, NULL, '16  ', 169)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (170, 10, 'RANGEL', '-70.92', '8,75', NULL, NULL, '17  ', 170)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (171, 10, 'RIVAS DÁVILA', '-71.83', '8,27', NULL, NULL, '18  ', 171)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (172, 10, 'SANTOS MARQUINA', '-71.07', '8,63', NULL, NULL, '19  ', 172)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (173, 10, 'SUCRE', '-71.42', '8,52', NULL, NULL, '20  ', 173)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (174, 10, 'TOVAR', '-71.75', '8,33', NULL, NULL, '21  ', 174)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (176, 10, 'ZEA', '-71.77', '8,37', NULL, NULL, '23  ', 176)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (177, 11, 'ACEVEDO', '-66.29', '10,39', NULL, NULL, '01  ', 177)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (188, 11, 'LANDER', '-66.78', '10,11', NULL, NULL, '12  ', 188)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (189, 11, 'LOS SALIAS', '-67.01', '10,36', NULL, NULL, '13  ', 189)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (190, 11, 'PÁEZ', '-65.99', '10,3', NULL, NULL, '14  ', 190)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (191, 11, 'PAZ CASTILLO', '-66.66', '10,29', NULL, NULL, '15  ', 191)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (192, 11, 'PEDRO GUAL', '-65.54', '10,1', NULL, NULL, '16  ', 192)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (193, 11, 'PLAZA', '-66.58', '10,49', NULL, NULL, '17  ', 193)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (195, 11, 'SUCRE', '-66.65', '10,5', NULL, NULL, '19  ', 195)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (196, 11, 'URDANETA', '-66.87', '10,12', NULL, NULL, '20  ', 196)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (197, 11, 'ZAMORA', '-66.54', '10,47', NULL, NULL, '21  ', 197)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (198, 20, 'ACOSTA', '-63.97', '10,11', NULL, NULL, '01  ', 198)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (208, 20, 'SANTA BÁRBARA', '-63.61', '9,61', NULL, NULL, '11  ', 208)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (209, 20, 'SOTILLO', '-62.38', '8,67', NULL, NULL, '12  ', 209)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (210, 20, 'URACOA', '-62.34', '8,96', NULL, NULL, '13  ', 210)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (212, 21, 'ARISMENDI', '-63.85', '11,03', NULL, NULL, '02  ', 212)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (223, 12, 'ARAURE', '-69.28', '9,72', NULL, NULL, '02  ', 223)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (232, 12, 'SAN RAFAEL DE ONOTO', '-68.98', '9,75', NULL, NULL, '11  ', 232)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (233, 12, 'SANTA ROSALÍA', '-68.88', '8,87', NULL, NULL, '12  ', 233)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (234, 12, 'SUCRE', '-70.03', '9,32', NULL, NULL, '13  ', 234)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (235, 12, 'TURÉN', '-69.1', '9,32', NULL, NULL, '14  ', 235)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (236, 22, 'ANDRÉS ELOY BLANCO', '-63.29', '10,29', NULL, NULL, '01  ', 236)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (246, 22, 'MEJÍA', '-63.69', '10,33', NULL, NULL, '11  ', 246)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (247, 22, 'MONTES', '-63.55', '10,48', NULL, NULL, '12  ', 247)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (249, 22, 'SUCRE', '-63.49', '10,47', NULL, NULL, '14  ', 249)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (250, 22, 'VALDEZ', '-62.26', '10,59', NULL, NULL, '15  ', 250)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (251, 13, 'ANDRÉS BELLO', '-72.2', '7,85', NULL, NULL, '01  ', 251)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (261, 13, 'INDEPENDENCIA', '-72.25', '7,87', NULL, NULL, '11  ', 261)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (262, 13, 'JÁUREGUI', '-71.86', '8,33', NULL, NULL, '12  ', 262)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (264, 13, 'JUNÍN', '-72.35', '7,68', NULL, NULL, '14  ', 264)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (316, 24, 'BARALT', '-71.06', '9,86', NULL, NULL, '02  ', 312)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (284, 14, 'CARACHE', '-70.21', '9,63', NULL, NULL, '05  ', 283)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (301, 23, 'BOLÍVAR', '-68.88', '10,43', NULL, NULL, '02  ', 298)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (221, 21, 'VILLALBA', '-63.95', '10,77', NULL, NULL, '11  ', 221)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (104, 6, 'LIBERTADOR', '-66.9', '10,5', NULL, NULL, '01  ', 1)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (100, 19, 'ANTONIO DÍAZ', '-61.23', '8,93', NULL, NULL, '01  ', 101)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (315, 24, 'ALMIRANTE PADILLA', '-71.65', '11', NULL, NULL, '01  ', 311)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (302, 23, 'BRUZUAL', '-68.89', '10,15', NULL, NULL, '03  ', 299)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (317, 24, 'CABIMAS', '-71.46', '10,41', NULL, NULL, '03  ', 313)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (117, 7, 'MAUROA', '-71.01', '10,9', NULL, NULL, '13  ', 117)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (140, 8, 'JOSÉ FÉLIX RIBAS', '-65.68', '9,35', NULL, NULL, '11  ', 140)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (318, 24, 'CATATUMBO', '-72.21', '9,05', NULL, NULL, '04  ', 314)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (133, 8, 'SAN GERÓNIMO DE GUAYABAL', '-66.74', '7,8', NULL, NULL, '04  ', 133)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (303, 23, 'COCOROTE', '-68.78', '10,24', NULL, NULL, '04  ', 300)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (248, 22, 'RIBERO', '-64.15', '10,46', NULL, NULL, '13  ', 248)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (304, 23, 'INDEPENDENCIA', '-68.77', '10,28', NULL, NULL, '05  ', 301)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (319, 24, 'COLÓN', '-71.88', '9,02', NULL, NULL, '05  ', 315)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (91, 18, 'ANZOÁTEGUI', '-68.7', '9,57', NULL, NULL, '01  ', 92)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (167, 10, 'OBISPO RAMOS DE LORA', '-71.4', '8,76', NULL, NULL, '14  ', 167)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (263, 13, 'JOSÉ MARÍA VARGAS', '-72.07', '8,1', NULL, NULL, '13  ', 263)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (305, 23, 'JOSÉ ANTONIO PÁEZ', '-69', '10,06', NULL, NULL, '06  ', 302)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (285, 14, 'ESCUQUE', '-70.67', '9,3', NULL, NULL, '06  ', 281)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (320, 24, 'FRANCISCO JAVIER PULGAR', '-71.61', '8,92', NULL, NULL, '06  ', 316)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (158, 10, 'ARZOBISPO CHACÓN', '-71.33', '8,13', NULL, NULL, '05  ', 158)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (211, 21, 'ANTOLÍN DEL CAMPO', '-63.88', '11,15', NULL, NULL, '01  ', 211)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (239, 22, 'BENÍTEZ', '-63.06', '10,4', NULL, NULL, '04  ', 239)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (306, 23, 'LA TRINIDAD', '-68.81', '10,2', NULL, NULL, '07  ', 303)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (286, 14, 'JOSÉ FELIPE MÁRQUEZ CAÑIZALES', '-70.51', '9,79', NULL, NULL, '07  ', 282)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (321, 24, 'JESÚS ENRIQUE LOSSADA', '-72.22', '10,69', NULL, NULL, '07  ', 317)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (307, 23, 'MANUEL MONGE', '-68.77', '10,66', NULL, NULL, '08  ', 304)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (287, 14, 'JUAN VICENTE CAMPO ELÍAS', '-70.12', '9,37', NULL, NULL, '08  ', 284)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (322, 24, 'JESÚS MARÍA SEMPRÚN', '-72.74', '9,24', NULL, NULL, '08  ', 318)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (288, 14, 'LA CEIBA', '-70.99', '9,48', NULL, NULL, '09  ', 285)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (308, 23, 'NIRGUA', '-68.56', '10,14', NULL, NULL, '09  ', 305)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (323, 24, 'LA CAÑADA DE URDANETA', '-71.9', '10,43', NULL, NULL, '09  ', 319)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (290, 14, 'MONTE CARMELO', '-70.84', '9,17', NULL, NULL, '11  ', 286)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (309, 23, 'PEÑA', '-69.13', '10,06', NULL, NULL, '10  ', 306)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (324, 24, 'LAGUNILLAS', '-71.24', '10,13', NULL, NULL, '10  ', 320)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (81, 17, 'JUAN JOSÉ MORA', '-68.21', '10,36', NULL, NULL, '05  ', 82)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (108, 7, 'CACIQUE MANAURE', '-68.57', '10,88', NULL, NULL, '04  ', 108)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (125, 7, 'SUCRE', '-69.91', '11,18', NULL, NULL, '21  ', 125)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (132, 8, 'EL SOCORRO', '-65.61', '9', NULL, NULL, '03  ', 132)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (150, 9, 'PALAVECINO', '-69.24', '10', NULL, NULL, '06  ', 150)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (175, 10, 'TULIO FEBRES CORDERO', '-71.06', '9,12', NULL, NULL, '22  ', 175)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (186, 11, 'GUAICAIPURO', '-67.03', '10,34', NULL, NULL, '10  ', 186)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (194, 11, 'SIMÓN BOLÍVAR', '-66.74', '10,18', NULL, NULL, '18  ', 194)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (203, 20, 'EZEQUIEL ZAMORA', '-63.95', '9,61', NULL, NULL, '06  ', 203)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (222, 12, 'AGUA BLANCA', '-69.1', '9,72', NULL, NULL, '01  ', 222)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (227, 12, 'MONSEÑOR JOSÉ VICENTE DE UNDA', '-69.9', '9,55', NULL, NULL, '06  ', 227)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (255, 13, 'CÁRDENAS', '-72.22', '7,81', NULL, NULL, '05  ', 255)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (265, 13, 'LIBERTAD', '-72.39', '7,81', NULL, NULL, '15  ', 265)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (266, 13, 'LIBERTADOR', '-71.51', '7,61', NULL, NULL, '16  ', 266)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (267, 13, 'LOBATERA', '-72.24', '7,93', NULL, NULL, '17  ', 267)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (268, 13, 'MICHELENA', '-72.24', '7,95', NULL, NULL, '18  ', 268)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (269, 13, 'PANAMERICANO', '-72.05', '8,52', NULL, NULL, '19  ', 269)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (270, 13, 'PEDRO MARÍA UREÑA', '-72.32', '7,88', NULL, NULL, '20  ', 270)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (271, 13, 'RAFAEL URDANETA', '-72.42', '7,49', NULL, NULL, '21  ', 271)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (272, 13, 'SAMUEL DARÍO MALDONADO', '-71.86', '8,54', NULL, NULL, '22  ', 272)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (273, 13, 'SAN CRISTÓBAL', '-72.21', '7,76', NULL, NULL, '23  ', 273)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (274, 13, 'SEBORUCO', '-72.06', '8,13', NULL, NULL, '24  ', 274)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (275, 13, 'SIMÓN RODRÍGUEZ', '-71.8', '8,42', NULL, NULL, '25  ', 275)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (276, 13, 'SUCRE', '-72.02', '7,91', NULL, NULL, '26  ', 276)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (277, 13, 'TORBES', '-72.16', '7,55', NULL, NULL, '27  ', 277)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (278, 13, 'URIBANTE', '-71.6', '7,89', NULL, NULL, '28  ', 278)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (279, 13, 'SAN JUDAS TADEO', '-72.2', '7,792', NULL, NULL, '29  ', 279)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (280, 14, 'ANDRÉS BELLO', '-70.77', '9,56', NULL, NULL, '01  ', 280)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (282, 14, 'BOLÍVAR', '-70.81', '9,38', NULL, NULL, '03  ', 334)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (283, 14, 'CANDELARIA', '-70.34', '9,62', NULL, NULL, '04  ', 335)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (289, 14, 'MIRANDA', '-70.72', '9,48', NULL, NULL, '10  ', 288)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (281, 14, 'BOCONÓ', '-70.26', '9,24', NULL, NULL, '02  ', 333)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (291, 14, 'MOTATÁN', '-70.59', '9,38', NULL, NULL, '12  ', 287)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (292, 14, 'PAMPÁN', '-70.47', '9,44', NULL, NULL, '13  ', 289)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (293, 14, 'PAMPANITO', '-70.51', '9,4', NULL, NULL, '14  ', 290)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (294, 14, 'RAFAEL RANGEL', '-70.73', '9,37', NULL, NULL, '15  ', 291)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (295, 14, 'SAN RAFAEL DE CARVAJAL', '-70.58', '9,35', NULL, NULL, '16  ', 292)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (296, 14, 'SUCRE', '-70.77', '9,43', NULL, NULL, '17  ', 293)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (297, 14, 'TRUJILLO', '-70.43', '9,37', NULL, NULL, '18  ', 294)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (298, 14, 'URDANETA', '-70.61', '9,13', NULL, NULL, '19  ', 296)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (299, 14, 'VALERA', '-70.61', '9,31', NULL, NULL, '20  ', 295)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (300, 23, 'ARÍSTIDES BASTIDAS', '-68.85', '10,24', NULL, NULL, '01  ', 297)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (310, 23, 'SAN FELIPE', '-68.74', '10,33', NULL, NULL, '11  ', 307)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (311, 23, 'SUCRE', '-68.84', '10,27', NULL, NULL, '12  ', 308)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (312, 23, 'URACHICHE', '-69.01', '10,15', NULL, NULL, '13  ', 309)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (313, 23, 'VEROES', '-68.61', '10,44', NULL, NULL, '14  ', 310)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (314, 15, 'VARGAS', '-66.92', '10,58', NULL, NULL, '01  ', 332)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (325, 24, 'MACHIQUES DE PERIJÁ', '-72.53', '10,04', NULL, NULL, '11  ', 321)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (326, 24, 'MARA', '-72.33', '11,01', NULL, NULL, '12  ', 322)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (327, 24, 'MARACAIBO', '-71.61', '10,63', NULL, NULL, '13  ', 323)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (328, 24, 'MIRANDA', '-71.27', '10,85', NULL, NULL, '14  ', 324)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (329, 24, 'PÁEZ', '-72.03', '11,37', NULL, NULL, '15  ', 325)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (330, 24, 'ROSARIO DE PERIJÁ', '-72.32', '10,33', NULL, NULL, '16  ', 326)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (331, 24, 'SAN FRANCISCO', '-71.63', '10,5', NULL, NULL, '17  ', 327)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (332, 24, 'SANTA RITA', '-71.47', '10,5', NULL, NULL, '18  ', 328)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (333, 24, 'SIMÓN BOLÍVAR', '-71.29', '10,18', NULL, NULL, '19  ', 329)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (334, 24, 'SUCRE', '-71.14', '9,14', NULL, NULL, '20  ', 330)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (335, 24, 'VALMORE RODRÍGUEZ', '-71.21', '10,03', NULL, NULL, '21  ', 331)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (999, 99, '',                  '',       '',      NULL, NULL, '', 999)");
    DB::connection('pgsql_common')->statement(
        "UPDATE public.municipalities
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
    );
  }
}









```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/RouteTypesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Modules\Common\Entities\GeoLocation\RouteType;

class RouteTypesTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        RouteType::create(['id' =>  1, 'description' => 'CARRETERA' ]);
        RouteType::create(['id' =>  2, 'description' => 'CALLE'     ]);
        RouteType::create(['id' =>  3, 'description' => 'AVENIDA'   ]);
        RouteType::create(['id' =>  4, 'description' => 'AUTOPISTAS']);        
        RouteType::create(['id' =>  5, 'description' => 'CAÑADA'    ]);
        RouteType::create(['id' =>  6, 'description' => 'CARRIL'    ]);
        RouteType::create(['id' =>  7, 'description' => 'PISTA'     ]);
        RouteType::create(['id' =>  8, 'description' => 'RUTA'      ]);
        RouteType::create(['id' =>  9, 'description' => 'TRAYECTO'  ]);
        RouteType::create(['id' => 10, 'description' => 'PASEO'     ]);
        RouteType::create(['id' => 11, 'description' => 'CAMINO'    ]);
        RouteType::create(['id' => 12, 'description' => 'SENDA'     ]);
        RouteType::create(['id' => 13, 'description' => 'BOULEVAR'  ]);
        RouteType::create(['id' => 14, 'description' => 'CALZADA'   ]);
        RouteType::create(['id' => 15, 'description' => 'CONDUCTO'  ]);
        RouteType::create(['id' => 16, 'description' => 'VÍA'       ]);
        RouteType::create(['id' => 17, 'description' => 'ENTRADA'   ]);
        RouteType::create(['id' => 18, 'description' => 'TRONCAL'   ]);
        RouteType::create(['id' => 19, 'description' => 'ESQUINAS'  ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/ParishesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class ParishesTableSeeder extends Seeder
{
  /**
   * Run the database seeds.
   *
   * @return void
   */
  public function run()
  {
  
  //now()::timestamp(0) without time zone;
  
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (8, 2, 'UCATA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (142, 47, 'LAS TEJERIAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (12, 3, 'ALBERTO GOMEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (9, 2, 'YAPACANA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (6, 2, 'CANAME', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (10, 3, 'FERNANDO GIRON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (15, 4, 'GUAYAPO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (13, 3, 'PARHUEÑA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (14, 3, 'PLATANILLAL', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (11, 3, 'TOVAR LUIS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (18, 4, 'SAMARIAPO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (20, 5, 'COMUNIDAD', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (19, 4, 'SIPAPO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (17, 4, 'MUNDUAPO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (23, 6, 'ALTO VENTUARI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (22, 5, 'VICTORINO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (26, 6, 'SAN JUAN DE MANAPIARE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (62, 20, 'CANTAURA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (25, 6, 'MEDIO VENTUARI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (30, 7, 'SOLANO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (28, 7, 'COCUY', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (29, 7, 'SAN CARLOS DE RIO NEG', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (41, 12, 'PARIAGUAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (27, 7, 'CASIQUIARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (31, 8, 'ANACO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (33, 9, 'ARAGUA DE BARCELONA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (34, 9, 'CACHIPO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (40, 12, 'EL PAO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (36, 10, 'SAN MIGUEL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (37, 10, 'SUCRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (91, 31, 'BRUZUAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (43, 13, 'GUANTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (39, 12, 'BOCA DEL PAO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (44, 14, 'MAMO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (42, 13, 'CHORRERON', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (54, 17, 'UVERITO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (46, 15, 'CM. PUERTO LA CRUZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (47, 15, 'POZUELOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (48, 16, 'ONOTO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (49, 16, 'SAN PABLO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (50, 17, 'MAPIRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (51, 17, 'PIAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (53, 17, 'SAN DIEGO DE CABRUTICA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (55, 17, 'ZUATA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (57, 18, 'SAN MATEO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (65, 20, 'URICA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (56, 18, 'EL CARITO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (59, 19, 'CLARINES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (60, 19, 'GUANAPE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (61, 19, 'SABANA DE UCHIRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (66, 21, 'PIRITU', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (63, 20, 'LIBERTADOR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (69, 23, 'BOCA DE CHAVEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (2, 1, 'HUACHAMACARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (35, 10, 'PUERTO PIRITU', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (92, 31, 'MANTECAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (93, 31, 'QUINTERO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (94, 31, 'RINCON HONDO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (116, 38, 'JOSE CASANOVA GODOY', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (114, 38, 'CHORONI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (119, 38, 'MADRE MARIA DE SAN JOSE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (120, 38, 'PEDRO JOSE OVALLES', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (121, 39, 'JOSE ANGEL LAMAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (117, 38, 'LAS DELICIAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (115, 38, 'JOAQUIN CRESPO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (7, 2, 'SAN FERNANDO DE ATABA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (67, 21, 'SAN FRANCISCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (68, 22, 'SAN JOSE DE GUANIPA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (72, 24, 'SANTA ANA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (75, 25, 'EL CARMEN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (71, 24, 'PUEBLO NUEVO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (74, 25, 'CAIGUA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (76, 25, 'EL PILAR', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (78, 25, 'SAN CRISTOBAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (79, 26, 'EL TIGRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (73, 25, 'BERGANTIN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (82, 28, 'EL MORRO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (80, 27, 'EL CHAPARRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (98, 32, 'GUASDUALITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (83, 28, 'LECHERIAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (81, 27, 'TOMAS ALFARO CALATRAVA', '0', '0', NULL, 'Z', '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (85, 29, 'APURITO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (86, 29, 'EL YAGUAL', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (87, 29, 'GUACHARA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (88, 29, 'MUCURITAS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (90, 30, 'BIRUACA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (97, 32, 'EL AMPARO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (103, 33, 'SAN JUAN DE PAYARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (96, 32, 'ARAMENDI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (99, 32, 'SAN CAMILO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (100, 32, 'URDANETA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (106, 35, 'EL RECREO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (101, 33, 'CODAZZI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (104, 34, 'ELORZA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (105, 34, 'LA TRINIDAD', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (107, 35, 'PEÑALVER', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (113, 38, 'ANDRES ELOY BLANCO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (109, 35, 'SAN RAFAEL DE ATAMAICA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (111, 37, 'CAMATAGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (112, 37, 'CARMEN DE CURA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (110, 36, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (123, 40, 'LAS GUACAMAYAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (127, 41, 'EL CONSEJO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (125, 40, 'PAO DE ZARATE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (126, 40, 'ZUATA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (128, 42, 'PALO NEGRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (130, 43, 'CAÑA DE AZUCAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (129, 42, 'SAN MARTIN DE PORRES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (134, 44, 'SAN CASIMIRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (133, 44, 'OLLAS DE CARAMACATE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (137, 46, 'ALFREDO PACHECO M', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (132, 44, 'GUIRIPA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (135, 44, 'VALLE MORIN', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (122, 40, 'CASTOR NIEVES RIOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (144, 48, 'BELLA VISTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (143, 47, 'TIARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (145, 48, 'CAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (147, 50, 'BARBACOAS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (146, 49, 'COLONIA TOVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (151, 51, 'AUGUSTO MIJARES', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (149, 50, 'SAN FRANCISCO DE CARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (150, 50, 'TAGUAY', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (152, 51, 'MAGDALENO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (21, 5, 'MAROA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (138, 46, 'AREVALO APONTE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (139, 46, 'CHUAO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (140, 46, 'SAMAN DE GUERE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (141, 46, 'TURMERO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (4, 1, 'MARAWAKA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (264, 79, 'AGUAS CALIENTES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (265, 79, 'MARIARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (300, 93, 'SUCRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (222, 67, 'ASCENSION FARRERAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (223, 67, 'CAICARA DEL ORINOCO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (227, 67, 'PIJIGUAOS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (221, 67, 'ALTAGRACIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (226, 67, 'CEDEÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (230, 69, 'SANTA ELENA DE UAIREN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (171, 57, 'BARINAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (163, 55, 'NICOLAS PULIDO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (162, 55, 'ANDRES BELLO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (272, 82, 'U TOCUYITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (261, 78, 'BELEN', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (165, 56, 'ARISMENDI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (166, 56, 'GUADARRAMA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (167, 56, 'LA UNION', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (168, 56, 'SAN ANTONIO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (266, 80, 'CIUDAD ALIANZA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (267, 80, 'GUACARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (229, 69, 'IKABARU', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (238, 70, 'VISTA HERMOSA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (305, 96, 'LIBERTAD DE COJEDES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (301, 94, 'LA AGUADITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (192, 60, 'SANTA BARBARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (185, 58, 'CALDERAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (180, 57, 'SANTA INES', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (176, 57, 'MANUEL P FAJARDO', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (169, 57, 'ALFREDO A LARRIVA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (184, 58, 'BARINITAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (178, 57, 'ROMULO BETANCOURT', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (173, 57, 'DOMINGA ORTIZ P', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (175, 57, 'JUAN A RODRIGUEZ D', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (170, 57, 'ALTO BARINAS', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (177, 57, 'RAMON I MENDEZ', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (181, 57, 'SANTA LUCIA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (182, 57, 'TORUNOS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (174, 57, 'EL CARMEN', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (231, 70, 'AGUA SALADA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (232, 70, 'CATEDRAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (234, 70, 'LA SABANITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (235, 70, 'MARHUANTA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (237, 70, 'PANAPANA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (240, 71, 'ANDRES ELOY BLANCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (236, 70, 'ORINOCO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (239, 70, 'ZEA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (280, 87, 'FRATERNIDAD', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (303, 95, 'EL PAO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (186, 59, 'BARRANCAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (187, 59, 'EL SOCORRO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (188, 59, 'MASPARRITO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (241, 71, 'PEDRO COVA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (243, 72, 'BARCELONETA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (304, 96, 'EL AMPARO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (191, 60, 'RAMON IGNACIO MENDEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (193, 61, 'EL REAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (189, 60, 'JOSE IGNACIO DEL PUMAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (247, 73, 'GUASIPATI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (244, 72, 'RAUL LEÓN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (245, 72, 'SAN FRANCISCO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (246, 72, 'SANTA BARBARA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (273, 83, 'U LOS GUAYOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (196, 61, 'OBISPOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (210, 65, 'SANTA CRUZ DE GUACAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (195, 61, 'LOS GUASIMITOS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (249, 74, 'DALLA COSTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (248, 73, 'SALOM', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (274, 84, 'MIRANDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (198, 62, 'IGNACIO BRICEÑO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (199, 62, 'JOSE FELIX RIBAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (200, 62, 'PAEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (253, 75, 'GUARATARO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (256, 75, 'MOITACO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (262, 78, 'GUIGUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (255, 75, 'MARIPA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (275, 85, 'MONTALBAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (202, 63, 'DOLORES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (216, 66, 'SIMON BOLIVAR', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (276, 86, 'NAGUANAGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (154, 51, 'VALLES DE TUCUTUNEMO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (156, 52, 'FRANCISCO DE MIRANDA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (157, 52, 'MONS FELICIANO G', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (158, 52, 'SANTA RITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (161, 54, 'SABANETA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (164, 55, 'TICOPORO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (160, 54, 'RODRIGUEZ DOMINGUEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (205, 64, 'EL REGALO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (206, 64, 'PUERTO DE NUTRIAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (207, 64, 'SANTA CATALINA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (211, 66, 'CACHAMAY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (212, 66, 'CHIRICA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (213, 66, 'DALLA COSTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (225, 67, 'LA URBANA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (217, 66, 'UNARE', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (218, 66, 'UNIVERSIDAD', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (219, 66, 'VISTA AL SOL', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (215, 66, 'POZO VERDE', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (220, 66, 'YOCOIMA', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (258, 77, 'BEJUMA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (259, 77, 'CANOABO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (260, 77, 'SIMON BOLIVAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (277, 87, 'BARTOLOME SALOM', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (281, 87, 'GOAIGOAZA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (278, 87, 'BORBURATA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (282, 87, 'JUAN JOSE FLORES', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (284, 87, 'UNION', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (293, 90, 'SAN BLAS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (283, 87, 'PATANEMO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (286, 89, 'SAN JOAQUIN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (287, 90, 'CANDELARIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (288, 90, 'CATEDRAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (289, 90, 'EL SOCORRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (290, 90, 'MIGUEL PEÑA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (302, 94, 'MACAPO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (294, 90, 'SAN JOSE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (295, 90, 'SANTA ROSA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (291, 90, 'NEGRO PRIMERO', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (298, 92, 'TINAQUILLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (159, 53, 'OCUMARE DE LA COSTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (208, 65, 'EL CANTON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (201, 63, 'LIBERTAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (250, 74, 'SAN ISIDRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (251, 74, 'TUMEREMO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (252, 75, 'ARIPAO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (296, 91, 'COJEDES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (269, 81, 'MORON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (270, 81, 'URAMA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (155, 51, 'VILLA DE CURA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (329, 103, 'SAN JOSE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (362, 107, 'BOROJO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (367, 108, 'YARACAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (364, 107, 'GUAJIRO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (365, 107, 'SEQUE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (366, 107, 'ZAZARIDA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (309, 98, 'SAN CARLOS DE AUSTRIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (445, 135, 'CABRUTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (439, 131, 'CHAGUARAMAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (359, 106, 'LA PEÑA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (361, 107, 'BARIRO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (358, 106, 'ARACUA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (444, 134, 'VALLE DE LA PASCUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (446, 135, 'LAS MERCEDES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (368, 109, 'CARIRUBANA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (369, 109, 'NORTE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (371, 109, 'SANTA ANA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (325, 103, 'JUAN MILLAN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (326, 103, 'LEONARDO RUIZ PINEDA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (328, 103, 'MONS. ARGIMIRO GARCIA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (354, 105, 'CAPADARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (324, 103, 'JOSE VIDAL MARCANO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (330, 103, 'SAN RAFAEL', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (331, 103, 'VIRGEN DEL VALLE', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (355, 105, 'LA PASTORA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (356, 105, 'LIBERTADOR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (360, 106, 'SAN LUIS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (373, 110, 'GUAIBACOA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (380, 112, 'PEDREGAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (372, 110, 'ACURIGUA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (375, 110, 'LAS CALDERAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (376, 110, 'MACORUCA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (448, 136, 'EL SOMBRERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (449, 136, 'SOSA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (377, 111, 'DABAJURO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (308, 98, 'MANUEL MANRIQUE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (311, 100, 'ALMIRANTE LUIS BRION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (307, 98, 'JUAN ANGEL BRAVO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (379, 112, 'AVARIA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (390, 113, 'MORUY', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (378, 112, 'AGUA CLARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (382, 112, 'PURURECHE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (450, 137, 'CALABOZO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (451, 137, 'EL CALVARIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (452, 137, 'EL RASTRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (453, 137, 'GUARDATINAJAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (347, 104, 'SAN BERNARDINO', '0', '0', NULL, NULL, '15  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (350, 104, 'SAN PEDRO', '0', '0', NULL, NULL, '18  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (394, 114, 'EL PAUJI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (395, 114, 'INDEPENDENCIA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (396, 114, 'MAPARARI', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (454, 138, 'ALTAGRACIA DE ORITUCO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (455, 138, 'LEZAMA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (457, 138, 'PASO REAL DE MACAIRA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (458, 138, 'SAN FCO DE MACAIRA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (318, 101, 'IMATACA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (323, 102, 'PEDERNALES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (319, 101, 'JUAN BAUTISTA ARISMEN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (320, 101, 'MANUEL PIAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (321, 101, 'ROMULO GALLEGOS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (387, 113, 'EL HATO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (385, 113, 'BARAIVED', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (386, 113, 'BUENA VISTA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (388, 113, 'EL VINCULO', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (391, 113, 'PUEBLO NUEVO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (383, 113, 'ADAURE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (399, 115, 'JACURA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (400, 116, 'JUDIBANA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (398, 115, 'ARAURIMA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (402, 117, 'CASIGUA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (406, 118, 'MITARE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (407, 118, 'RIO SECO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (408, 118, 'SABANETA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (412, 119, 'BOCA DE TOCUYO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (411, 118, 'SANTA ANA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (405, 118, 'GUZMAN GUILLERMO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (413, 119, 'CHICHIRIVICHE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (421, 123, 'SAN FRANCISCO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (414, 119, 'TOCUYO DE LA COSTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (415, 120, 'PALMA SOLA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (416, 121, 'CABURE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (417, 121, 'COLINA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (419, 122, 'PIRITU', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (420, 122, 'SAN JOSE DE LA COSTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (422, 124, 'BOCA DE AROA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (423, 124, 'TUCACAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (425, 125, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (429, 127, 'STA.CRUZ DE BUCARAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (427, 127, 'EL CHARAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (430, 128, 'BRUZUAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (431, 128, 'URUMACO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (435, 129, 'ZAZARIDA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (434, 129, 'PUEBLO CUMAREBO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (433, 129, 'LA SOLEDAD', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (442, 133, 'SAN GERONIMO DE GUAYABAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (436, 130, 'CAMAGUAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (438, 130, 'UVERITO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (333, 104, 'ALTAGRACIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (334, 104, 'ANTIMANO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (335, 104, 'CANDELARIA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (336, 104, 'CARICUAO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (338, 104, 'COCHE', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (339, 104, 'EL JUNQUITO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (340, 104, 'EL PARAISO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (341, 104, 'EL RECREO', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (342, 104, 'EL VALLE', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (343, 104, 'LA PASTORA', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (345, 104, 'MACARAO', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (346, 104, 'SAN AGUSTIN', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (392, 114, 'AGUA LARGA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (348, 104, 'SAN JOSE', '0', '0', NULL, NULL, '16  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (393, 114, 'CHURUGUARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (351, 104, 'SANTA ROSALIA', '0', '0', NULL, NULL, '19  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (352, 104, 'SANTA TERESA', '0', '0', NULL, NULL, '20  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (353, 104, 'SUCRE', '0', '0', NULL, NULL, '21  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (397, 115, 'AGUA LINDA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (312, 100, 'ANICETO LUGO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (317, 101, '5 DE JULIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (314, 100, 'MANUEL RENAUD', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (315, 100, 'PADRE BARRAL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (316, 100, 'SANTOS DE ABELGAS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (403, 117, 'MENE DE MAUROA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (409, 118, 'SAN ANTONIO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (443, 134, 'ESPINO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (441, 133, 'CAZORLA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (374, 110, 'LA VELA DE CORO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (428, 127, 'LAS VEGAS DEL TUY', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (424, 125, 'PECAYA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (332, 104, '23 DE ENERO', '0', '0', NULL, NULL, '22  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (486, 147, 'JUAREZ', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (487, 147, 'LA CONCEPCION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (488, 147, 'SANTA ROSA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (495, 148, 'JUAN B RODRIGUEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (485, 147, 'JUAN DE VILLEGAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (489, 147, 'TAMACA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (490, 147, 'UNION', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (482, 147, 'BUENA VISTA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (492, 148, 'CUARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (493, 148, 'DIEGO DE LOZADA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (500, 149, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (496, 148, 'PARAISO DE SAN JOSE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (497, 148, 'SAN MIGUEL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (494, 148, 'JOSE BERNARDO DURANTE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (511, 151, 'GUSTAVO VEGAS LEON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (528, 152, 'TRINIDAD SAMUEL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (510, 151, 'BURIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (479, 146, 'FREITEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (480, 146, 'JOSE MARIA BLANCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (542, 156, 'MESA DE LAS PALMAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (508, 150, 'CABUDARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (501, 149, 'GUARICO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (502, 149, 'HILARIO LUNA Y LUNA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (503, 149, 'HUMOCARO ALTO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (505, 149, 'LA CANDELARIA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (506, 149, 'MORAN', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (531, 153, 'SIQUISIQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (514, 152, 'ANTONIO DIAZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (515, 152, 'CAMACARO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (516, 152, 'CASTAÑEDA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (518, 152, 'CHIQUINQUIRA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (519, 152, 'EL BLANCO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (520, 152, 'ESPINOZA LOS MONTEROS', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (527, 152, 'REYES VARCAS TORRES', '0', '0', NULL, NULL, '16  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (523, 152, 'LAS MERCEDES', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (524, 152, 'MANUEL MORILLO', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (526, 152, 'MONTES DE OCA', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (521, 152, 'HERIBERTO ARROYO', '0', '0', NULL, NULL, '15  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (513, 152, 'ALTAGRACIA', '0', '0', NULL, NULL, '17  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (522, 152, 'LARA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (464, 139, 'SAN FCO. DE TIZNADOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (465, 139, 'SAN JOSE DE TIZNADOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (460, 138, 'SAN RAFAEL DE ORITUCO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (536, 154, 'PRESIDENTE BETANCOURT', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (530, 153, 'SAN MIGUEL', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (532, 153, 'XAGUAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (462, 139, 'ORTIZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (466, 140, 'SAN RAFAEL DE LAYA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (467, 140, 'TUCUPIDO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (534, 154, 'HECTOR AMABLE MORA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (535, 154, 'JOSE NUCETE SARDI', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (540, 155, 'ANDRÉS BELLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (537, 154, 'PRESIDENTE PAEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (538, 154, 'PTE. ROMULO GALLEGOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (533, 154, 'GABRIEL PICON G.', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (539, 154, 'PULIDO MENDEZ', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (472, 143, 'ALTAMIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (469, 141, 'PARAPARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (471, 142, 'SAN JOSE DE GUARIBE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (474, 144, 'SAN JOSE DE UNARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (475, 144, 'ZARAZA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (483, 147, 'CATEDRAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (476, 145, 'PIO TAMAYO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (477, 145, 'QBDA. HONDA DE GUACHE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (478, 145, 'YACAMBU', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (555, 159, 'JAJI', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (557, 159, 'MATRIZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (563, 161, 'CAPITAL CARDENAL QUINTERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (558, 159, 'MONTALBAN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (553, 159, 'ACEQUIAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (559, 159, 'SAN JOSE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (544, 157, 'ARICAGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (545, 157, 'SAN ANTONIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (561, 160, 'CAPITAL CARACCIOLO PARRA OLMEDO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (567, 163, 'CAPITAL JULIO CESAR SALAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (562, 161, 'LAS PIEDRAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (564, 162, 'GUARAQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (565, 162, 'MESA DE QUINTERO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (566, 162, 'RIO NEGRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (569, 164, 'SAN CRISTOBAL DE TORONDOY', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (551, 158, 'MUCUCHACHI', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (543, 156, 'CAPITAL PINO SALINAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (541, 156, 'MESA BOLIVAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (570, 164, 'CAPITAL JUSTO BRICEÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (577, 165, 'GONZALO PICON FEBRES', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (572, 165, 'ARIAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (573, 165, 'CARACCIOLO PARRA P', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (574, 165, 'DOMINGO PEÑA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (575, 165, 'EL LLANO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (581, 165, 'LOS NEVADOS', '0', '0', NULL, NULL, '15  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (578, 165, 'JACINTO PLAZA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (580, 165, 'LASSO DE LA VEGA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (582, 165, 'MARIANO PICON SALAS', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (587, 166, 'LA VENTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (583, 165, 'MILLA', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (584, 165, 'OSUNA RODRIGUEZ', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (585, 165, 'SAGRARIO', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (576, 165, 'EL MORRO', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (588, 166, 'PIÑANGO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (593, 168, 'PADRE NOGUERA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (589, 166, 'CAPITAL MIRANDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (595, 170, 'CACUTE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (594, 169, 'PUEBLO LLANO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (599, 170, 'SAN RAFAEL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (600, 171, 'CAPITAL RIVAS DÁVILA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (598, 170, 'MUCURUBA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (597, 170, 'CAPITAL RANGEL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (602, 172, 'SANTOS MARQUINA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (601, 171, 'GERONIMO MALDONADO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (604, 173, 'ESTANQUES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (606, 173, 'LA TRAMPA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (605, 173, 'CAPITAL SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (607, 173, 'PUEBLO NUEVO DEL SUR', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (470, 141, 'SAN JUAN DE LOS MORROS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (507, 150, 'AGUA VIVA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (591, 167, 'SAN RAFAEL DE ALCAZAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (554, 159, 'FERNANDEZ PEÑA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (547, 158, 'CAPURI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (548, 158, 'CHACANTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (549, 158, 'EL MOLINO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (552, 158, 'MUCUTUY', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (546, 158, 'CAPITAL ARZOBISPO CHACON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (512, 151, 'SARARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (461, 138, 'SOUBLETTE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (633, 180, 'HIGUEROTE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (629, 179, 'BARUTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (630, 179, 'EL CAFETAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (631, 179, 'LAS MINAS DE BARUTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (684, 202, 'AREO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (720, 213, 'ZABALA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (745, 225, 'GUANARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (743, 224, 'UVERAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (676, 199, 'AGUASAY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (644, 186, 'LOS TEQUES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (632, 180, 'CURIEPE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (749, 226, 'DIVINA PASTORA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (744, 225, 'CORDOBA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (746, 225, 'SAN JOSE DE LA MONTAÑA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (748, 225, 'VIRGEN DE LA COROMOTO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (722, 214, 'CAPITAL GARCIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (721, 214, 'FRANCISCO FAJARDO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (678, 201, 'CARIPE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (679, 201, 'EL GUACHARO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (680, 201, 'LA GUANOTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (681, 201, 'SABANA DE PIEDRA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (683, 201, 'TERESEN', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (635, 181, 'MAMPORAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (686, 202, 'SAN FELIX', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (685, 202, 'CAPITAL CEDEÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (689, 203, 'CAPITAL EZEQUIEL ZAMORA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (724, 215, 'GUEVARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (725, 215, 'MATASIETE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (728, 216, 'AGUIRRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (726, 215, 'CAPITAL GÓMEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (727, 215, 'SUCRE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (751, 226, 'TRINIDAD DE LA CAPILLA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (753, 227, 'PEÑAS BLANCA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (636, 182, 'CARRIZAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (691, 204, 'LAS ALHUACAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (692, 204, 'TABASCA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (695, 205, 'BOQUERON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (729, 216, 'CAPITAL MANEIRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (731, 217, 'CAPITAL MARCANO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (755, 228, 'LA ESTACION', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (757, 229, 'CAPITAL PÁEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (754, 228, 'APARICION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (637, 183, 'CHACAO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (732, 218, 'MARIÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (638, 184, 'CHARALLAVE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (639, 184, 'LAS BRISAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (696, 205, 'EL COROZO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (697, 205, 'EL FURRIAL', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (700, 205, 'LAS COCUIZAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (699, 205, 'LA PICA', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (703, 205, 'SAN VICENTE', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (701, 205, 'SAN SIMON', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (698, 205, 'JUSEPIN', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (705, 206, 'CAPITAL PIAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (733, 219, 'CAPITAL PENINSULA DE MACANAO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (758, 229, 'PAYARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (759, 229, 'PIMPINELA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (640, 185, 'EL HATILLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (711, 207, 'CACHIPO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (704, 206, 'APARICIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (706, 206, 'CHAGUARAMAL', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (707, 206, 'EL PINTO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (708, 206, 'GUANAGUANA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (709, 206, 'LA TOSCANA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (735, 220, 'LOS BARALES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (734, 219, 'SAN FRANCISCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (650, 188, 'LA DEMOCRACIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (648, 187, 'EL CARTANAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (714, 209, 'CAPITAL SOTILLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (737, 221, 'CAPITAL VILLALBA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (742, 224, 'CAPITAL ESTELLER', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (608, 173, 'SAN JUAN', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (609, 174, 'EL AMPARO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (610, 174, 'EL LLANO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (612, 174, 'TOVAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (618, 176, 'ZEA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (619, 177, 'ARAGUITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (620, 177, 'AREVALO GONZALEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (621, 177, 'CAPAYA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (649, 187, 'STA TERESA DEL TUY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (623, 177, 'EL CAFE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (624, 177, 'MARIZAPA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (625, 177, 'PANAQUIRE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (626, 177, 'RIBAS', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (656, 190, 'RIO CHICO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (652, 188, 'SANTA BARBARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (653, 189, 'SAN ANTONIO LOS ALTOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (658, 190, 'TACARIGUA DE LA LAGUNA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (665, 195, 'CAUCAGUITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (654, 190, 'EL GUAPO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (655, 190, 'PAPARO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (659, 191, 'SANTA LUCIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (660, 192, 'CUPIRA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (661, 192, 'MACHURUCUTO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (662, 193, 'GUARENAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (669, 195, 'PETARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (667, 195, 'LA DOLORITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (670, 196, 'CUA NUEVA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (666, 195, 'FILAS DE MARICHES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (671, 196, 'CUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (672, 197, 'BOLIVAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (673, 197, 'GUATIRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (677, 200, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (675, 198, 'SAN FRANCISCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (713, 208, 'SANTA BARBARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (718, 212, 'ARISMENDI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (715, 209, 'LOS BARRANCOS DE FAJARDO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (716, 210, 'URACOA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (723, 215, 'BOLIVAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (741, 223, 'RIO ACARIGUA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (752, 227, 'MONSEÑOR JOSÉ VICENTE DE UNDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (738, 221, 'VICENTE FUENTES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (614, 175, 'MARIA C PALACIOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (616, 175, 'SANTA APOLONIA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (617, 176, 'CAÑO EL TIGRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (615, 175, 'CAPITAL TULIO  FEBRES CORDERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (642, 186, 'CECILIO ACOSTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (643, 186, 'EL JARILLO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (641, 186, 'ALTAGRACIA DE LA MONTAÑA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (688, 203, 'EL TEJERO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (645, 186, 'PARACOTOS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (646, 186, 'SAN PEDRO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (663, 194, 'SAN FCO DE YARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (664, 194, 'SAN ANTONIO DE YARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (690, 204, 'CHAGUARAMAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (756, 228, 'OSPINO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (613, 175, 'INDEPENDENCIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (786, 238, 'PUERTO SANTO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (800, 241, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (785, 238, 'EL MORRO DE PTO SANTO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (788, 238, 'SAN JUAN GALDONAS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (844, 254, 'PALOTAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (840, 253, 'RIVAS BERTI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (782, 237, 'SAN JOSE DE AREOCUAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (783, 237, 'TAVERA ACOSTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (839, 253, 'AYACUCHO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (795, 240, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (796, 240, 'MACARAPANA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (797, 240, 'SANTA CATALINA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (798, 240, 'SANTA ROSA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (845, 254, 'BOLÍVAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (842, 254, 'ISAIAS MEDINA ANGARITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (843, 254, 'JUAN VICENTE GOMEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (846, 255, 'AMENODORO RANGEL LAMU', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (803, 242, 'YAGUARAPARO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (808, 244, 'TUNAPUY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (802, 242, 'PAUJIL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (801, 242, 'LIBERTAD', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (851, 257, 'FERNÁNDEZ FEO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (853, 258, 'FRANCISCO DE MIRANDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (852, 257, 'SANTO DOMINGO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (804, 243, 'ARAYA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (806, 243, 'MANICUARE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (854, 259, 'BOCA DE GRITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (764, 231, 'BOCONOITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (761, 230, 'CAÑO DELGADITO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (810, 245, 'IRAPA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (855, 259, 'JOSE ANTONIO PAEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (857, 260, 'GUASIMOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (856, 259, 'GARCIA DE HEVIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (768, 233, 'SANTA ROSALIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (814, 246, 'MEJIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (809, 245, 'CAMPO CLARO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (811, 245, 'MARABAL', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (812, 245, 'SAN ANTONIO DE IRAPA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (813, 245, 'SORO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (858, 261, 'INDEPENDENCIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (766, 232, 'SANTA FE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (767, 232, 'THERMO MORLES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (773, 234, 'SAN RAFAEL PALO ALZADO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (769, 233, 'FLORIDA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (776, 235, 'CANELONES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (771, 234, 'CONCEPCION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (774, 234, 'UVENCIO A VELASQUEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (770, 234, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (775, 234, 'VILLA ROSA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (777, 235, 'SAN ISIDRO LABRADOR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (787, 238, 'RIO CARIBE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (778, 235, 'SANTA CRUZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (780, 236, 'MARIÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (781, 236, 'ROMULO GALLEGOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (815, 247, 'ARENAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (816, 247, 'ARICAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (817, 247, 'COCOLLAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (819, 247, 'SAN FERNANDO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (831, 249, 'SANTA INES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (820, 247, 'SAN LORENZO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (826, 249, 'ALTAGRACIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (827, 249, 'AYACUCHO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (835, 250, 'GUIRIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (828, 249, 'SANTA FÉ', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (832, 249, 'VALENTIN VALIENTE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (829, 249, 'RAUL LEONI', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (834, 250, 'CRISTOBAL COLON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (837, 251, 'ANDRÉS BELLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (833, 250, 'BIDEAU', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (838, 252, 'ANTONIO RÓMULO COSTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (861, 262, 'EMILIO C. GUERRERO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (859, 261, 'JUAN GERMAN ROSCIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (860, 261, 'ROMAN CARDENAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (862, 262, 'JAUREGUI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (864, 263, 'JOSÉ MARÍA VARGAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (868, 264, 'JUNIN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (866, 264, 'LA PETROLEA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (867, 264, 'QUINIMARI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (869, 265, 'LIBERTAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (821, 248, 'CARIACO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (822, 248, 'CATUARO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (823, 248, 'RENDON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (825, 248, 'SANTA MARIA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (865, 264, 'BRAMON', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (789, 239, 'EL PILAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (790, 239, 'EL RINCON', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (792, 239, 'GUARAUNOS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (793, 239, 'TUNAPUICITO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (794, 239, 'UNION', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (848, 255, 'CARDENAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (850, 257, 'ALBERTO ADRIANI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (847, 255, 'LA FLORIDA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (874, 266, 'EMETERIO OCHOA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (871, 265, 'MANUEL FELIPE RUGELES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (876, 267, 'CONSTITUCION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (872, 266, 'LIBERTADOR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (873, 266, 'DORADAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (875, 266, 'SAN JOAQUIN DE NAVAY', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (879, 269, 'PANAMERICANO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (878, 268, 'MICHELENA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (882, 270, 'UREÑA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (880, 269, 'LA PALMITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (883, 271, 'RAFAEL URDANETA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (881, 270, 'NUEVA ARCADIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (884, 272, 'BOCONO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (888, 273, 'LA CONCORDIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (889, 273, 'PEDRO MARIA MORANTES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (893, 275, 'SIMÓN RODRÍGUEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (887, 273, 'DR. FCO. ROMERO LOBO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (894, 276, 'ELEAZAR LOPEZ CONTRERA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (890, 273, 'SAN SEBASTIAN', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (892, 274, 'SEBORUCO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (895, 276, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (897, 277, 'TORBES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (898, 278, 'CARDENAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (896, 276, 'SAN PABLO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (900, 278, 'POTOSI', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (901, 278, 'URIBANTE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (902, 279, 'SAN JUDAS TADEO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (906, 280, 'SANTA ISABEL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (903, 280, 'ARAGUANEY', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (904, 280, 'EL JAGUITO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (905, 280, 'LA ESPERANZA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (910, 281, 'EL CARMEN', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (907, 281, 'AYACUCHO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (909, 281, 'BURBUSAY', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (762, 230, 'PAPELON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1022, 316, 'MANUEL GUANIPA MATOS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1023, 316, 'MARCELINO BRICEÑO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1024, 316, 'PUEBLO NUEVO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1029, 317, 'GERMAN RIOS LINARES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (929, 284, 'CARACHE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (930, 284, 'CUICAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (931, 284, 'LA CONCEPCION', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (932, 284, 'PANAMERICANA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (933, 284, 'SANTA CRUZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1002, 305, 'SABANA DE PARRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1019, 315, 'MONAGAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (999, 302, 'CHIVACOA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (996, 300, 'SAN PABLO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1026, 317, 'AMBROSIO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1032, 317, 'PUNTA GORDA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1031, 317, 'LA ROSA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1030, 317, 'JORGE HERNANDEZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1034, 317, 'SAN BENITO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1037, 319, 'MORALITO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1027, 317, 'ARISTIDES CALVANI', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1035, 318, 'ENCONTRADOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1036, 318, 'UDON PEREZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1000, 303, 'COROTE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1001, 304, 'INDEPENDENCIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1039, 319, 'SANTA BARBARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1044, 320, 'SIMON RODRIGUEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1040, 319, 'SANTA CRUZ DEL ZULIA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1041, 319, 'URRIBARRI', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1003, 306, 'BORAURE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (934, 285, 'ESCUQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (935, 285, 'LA UNION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (936, 285, 'SABANA LIBRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (937, 285, 'SANTA RITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1046, 321, 'LA CONCEPCION', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1043, 320, 'FRANCISCO J PULGAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1004, 307, 'YUMARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (942, 287, 'CAMPO ELIAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (938, 286, 'ANTONIO JOSE DE SUCRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1050, 322, 'JESUS M SEMPRUN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1045, 321, 'JOSE RAMON YEPEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1047, 321, 'MARIANO PARRA LEON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1048, 321, 'SAN JOSE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1008, 309, 'SAN ANDRES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (943, 288, 'EL PROGRESO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (941, 287, 'ARNOLDO GABALDON', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1053, 323, 'CONCEPCION', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (944, 288, 'LA CEIBA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (945, 288, 'SANTA APOLONIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1005, 308, 'NIRGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1006, 308, 'SALOM', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1007, 308, 'TEMERLA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1052, 323, 'CHIQUINQUIRA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1059, 324, 'LIBERTAD', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1051, 323, 'ANDRES BELLO (KM 48)', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1055, 323, 'POTRERITOS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (957, 291, 'MOTATAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (952, 290, 'BUENA VISTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (954, 290, 'STA MARIA DEL HORCON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1009, 309, 'YARITAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1011, 310, 'SAN FELIPE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1058, 324, 'ELEAZAR LOPEZ C', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1061, 325, 'BARTOLOME DE LAS CASAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1057, 324, 'CAMPO LARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1060, 324, 'VENEZUELA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (920, 282, 'GRANADOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (926, 283, 'CHEJENDE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (923, 283, 'BOLIVIA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (924, 283, 'CARRILLO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (925, 283, 'CEGARRA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (928, 283, 'SAN JOSÉ', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (922, 283, 'ARNOLDO GABALDON', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (939, 286, 'EL SOCORRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (949, 289, 'EL CENIZO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (948, 289, 'AGUA SANTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (953, 290, 'MONTE CARMELO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (947, 289, 'AGUA CALIENTE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (951, 289, 'VALERITA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (913, 281, 'LA VEGA DE GUARAMACAL', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (914, 281, 'MONSEÑOR JAUREGUI', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (918, 281, 'SAN MIGUEL', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (911, 281, 'GENERAL RIVAS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (916, 281, 'RAFAEL RANGEL', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (919, 282, 'CHEREGUE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (917, 281, 'SAN JOSÉ', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (958, 292, 'FLOR DE PATRIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (956, 291, 'JALISCO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (959, 292, 'LA PAZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (962, 293, 'LA CONCEPCION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (960, 292, 'PAMPAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (963, 293, 'PAMPANITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (968, 294, 'LA PUEBLITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (964, 293, 'PAMPANITO II', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (965, 294, 'BETIJOQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (971, 295, 'CARVAJAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (966, 294, 'EL CEDRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (970, 295, 'CAMPO ALEGRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (973, 296, 'EL PARAISO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (969, 295, 'ANTONIO N BRICEÑO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (972, 295, 'JOSE LEONARDO SUAREZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (974, 296, 'JUNIN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (987, 298, 'LA QUEBRADA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (976, 296, 'VALMORE RODRIGUEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (977, 297, 'ANDRES LINARES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (978, 297, 'CHIQUINQUIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (979, 297, 'CRISTOBAL MENDOZA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (980, 297, 'CRUZ CARRILLO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (981, 297, 'MATRIZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (983, 297, 'TRES ESQUINAS', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (985, 298, 'JAJO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (986, 298, 'LA MESA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (994, 299, 'MERCEDES DIAZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (984, 298, 'CABIMBU', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (988, 298, 'SANTIAGO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (989, 298, 'TUÑAME', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (991, 299, 'LA BEATRIZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (995, 299, 'SAN LUIS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (998, 302, 'CAMPO ELIAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (992, 299, 'LA PUERTA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (993, 299, 'MENDOZA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (997, 301, 'AROA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1013, 311, 'GUAMA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1012, 310, 'SAN JAVIER', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1015, 313, 'EL GUAYABO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1014, 312, 'URACHICHE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1016, 313, 'FARRIAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1021, 316, 'LIBERTADOR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (915, 281, 'MOSQUEY', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (950, 289, 'EL DIVIDIVE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (504, 149, 'HUMOCARO BAJO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (233, 70, 'JOSE ANTONIO PAEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1127, 314, 'CARAYACA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (95, 31, 'SAN VICENTE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (299, 93, 'EL BAUL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (447, 135, 'STA RITA DE MANAPIRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (841, 253, 'SAN PEDRO DEL RIO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (16, 4, 'ISLA DE RATON', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (38, 12, 'ATAPIRIRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (32, 8, 'SAN JOAQUIN', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1124, 11, 'VALLE DE GUANAPE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1125, 11, 'SANTA BARBARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (45, 14, 'SOLEDAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (52, 17, 'SANTA CLARA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (70, 23, 'BOCA UCHIRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (58, 18, 'SANTA INES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (84, 29, 'ACHAGUAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (89, 29, 'QUESERAS DEL MEDIO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (263, 78, 'TACARIGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (268, 80, 'YAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (370, 109, 'PUNTA CARDON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (517, 152, 'CECILIO ZUBILLAGA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (306, 97, 'ROMULO GALLEGOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (381, 112, 'PIEDRA GRANDE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (197, 62, 'CIUDAD BOLIVIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (310, 99, 'GRL/JEFE JOSE L SILVA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (456, 138, 'LIBERTAD DE ORITUCO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (136, 45, 'SAN SEBASTIAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (384, 113, 'ADICORA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (148, 50, 'LAS PEÑITAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (153, 51, 'SAN FRANCISCO DE ASIS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (204, 64, 'CIUDAD DE NUTRIAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (24, 6, 'BAJO VENTUARI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1128, 314, 'CARUAO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1129, 314, 'CATIA LA MAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1130, 314, 'EL JUNKO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1131, 314, 'LA GUAIRA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1132, 314, 'MACUTO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1134, 314, 'NAIGUATÁ', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1135, 314, 'RAUL LEONI', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1136, 314, 'CARLOS SOUBLETTE', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1070, 326, 'SAN RAFAEL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1063, 325, 'RIO NEGRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1066, 326, 'LAS PARCELAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1067, 326, 'LUIS DE VICENTE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1069, 326, 'RICAURTE', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1077, 327, 'CHIQUINQUIRA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1068, 326, 'MONS.MARCOS SERGIO G', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1088, 327, 'SANTA LUCIA', '0', '0', NULL, NULL, '16  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1071, 326, 'TAMARE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1073, 327, 'BOLIVAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1074, 327, 'CACIQUE MARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1075, 327, 'CARACCIOLO PARRA PEREZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1076, 327, 'CECILIO ACOSTA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1089, 327, 'VENANCIO PULGAR', '0', '0', NULL, NULL, '17  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1078, 327, 'COQUIVACOA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1080, 327, 'FRANCISCO EUGENIO B', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1081, 327, 'IDELFONZO VASQUEZ', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1082, 327, 'JUANA DE AVILA', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1083, 327, 'LUIS HURTADO HIGUERA', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1084, 327, 'MANUEL DAGNINO', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1085, 327, 'OLEGARIO VILLALOBOS', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1086, 327, 'RAUL LEONI', '0', '0', NULL, NULL, '15  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1098, 329, 'SINAMAICA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1095, 329, 'ALTA GUAJIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1090, 328, 'ALTAGRACIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1091, 328, 'ANA MARIA CAMPOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1092, 328, 'FARIA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1094, 328, 'SAN JOSE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1096, 329, 'ELIAS SANCHEZ RUBIO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1097, 329, 'GOAJIRA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1100, 330, 'EL ROSARIO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1107, 331, 'SAN FRANCISCO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1103, 331, 'EL BAJO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1101, 330, 'SIXTO ZAMBRANO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1105, 331, 'LOS CORTIJOS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1102, 331, 'DOMITILA FLORES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1106, 331, 'MARCIAL HERNANDEZ', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1111, 332, 'SANTA RITA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1108, 332, 'EL MENE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1109, 332, 'JOSE CENOVIO URRIBARR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1110, 332, 'PEDRO LUCAS URRIBARRI', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1126, 314, 'CARABALLEDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1113, 333, 'RAFAEL MARIA BARALT', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1114, 333, 'RAFAEL URDANETA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1115, 334, 'BOBURES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1116, 334, 'EL BATEY', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1117, 334, 'GIBRALTAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1118, 334, 'HERAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1120, 334, 'ROMULO GALLEGOS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1121, 335, 'LA VICTORIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1122, 335, 'RAFAEL URDANETA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1123, 335, 'RAUL CUENCA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (77, 25, 'NARICUAL', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (463, 139, 'SAN LORENZO DE TIZNADOS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (102, 33, 'CUNAVICHE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (108, 35, 'SAN FERNANDO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (484, 147, 'EL CUJI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (481, 147, 'AGUEDO F. ALVARADO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (498, 148, 'TINTORERO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (118, 38, 'LOS TACARIGUAS', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (491, 148, 'CRNEL. MARIANO PERAZA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (499, 149, 'ANZOATEGUI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (525, 152, 'MONTA A VERDE', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (124, 40, 'LA VICTORIA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (529, 153, 'MOROTURO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (131, 43, 'EL LIMON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (172, 57, 'CORAZON DE JESUS', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (183, 58, 'ALTAMIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (190, 60, 'PEDRO BRICEÑO MENDEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (194, 61, 'LA LUZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (627, 178, 'CUMBO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (203, 63, 'PALACIO FAJARDO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (224, 67, 'GUANIAMO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (228, 68, 'EL CALLAO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (242, 71, 'UPATA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (254, 75, 'LAS MAJADAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (271, 82, 'U INDEPENDENCIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (719, 213, 'CAPITAL DÍAZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (322, 102, 'LUIS B PRIETO FIGUERO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (327, 103, 'MCL.ANTONIO J DE SUCRE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (357, 105, 'SAN JUAN DE LOS CAYOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (363, 107, 'CAPATARIDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (784, 238, 'ANTONIO JOSE DE SUCRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (389, 113, 'JADACAQUIVA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1062, 325, 'LIBERTAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (214, 66, 'ONCE DE ABRIL', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (285, 88, 'URB SAN DIEGO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (418, 121, 'CURIMAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (426, 126, 'TOCOPERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (437, 130, 'PUERTO MIRANDA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (634, 180, 'TACARIGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (799, 240, 'SANTA TERESA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (747, 225, 'SAN JUAN GUANAGUANARE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (682, 201, 'SAN AGUSTIN', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (687, 202, 'VIENTO FRESCO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (760, 229, 'RAMON PERAZA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (805, 243, 'CHACOPATA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (710, 206, 'TAGUAYA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (568, 163, 'PALMIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (571, 165, 'ANTONIO SPINETTI DINI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (611, 174, 'SAN FRANCISCO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (740, 223, 'ARAURE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (765, 232, 'SAN RAFAEL DE ONOTO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (830, 249, 'SAN JUAN', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (836, 250, 'PUNTA DE PIEDRA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (863, 262, 'MONS. MIGUEL A SALAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1018, 315, 'ISLA DE TOAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (404, 117, 'SAN FELIX', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (824, 248, 'SANTA CRUZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (297, 91, 'JUAN DE MATA SUAREZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (550, 158, 'GUAIMARAL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (791, 239, 'GRAL FCO. A VASQUEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (940, 286, 'LOS CAPRICHOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (946, 288, 'TRES DE FEBRERO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1054, 323, 'EL CARMELO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1056, 324, 'ALONSO DE OJEDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (440, 132, 'EL SOCORRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (647, 186, 'TACATA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (739, 222, 'AGUA BLANCA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (870, 265, 'CIPRIANO CASTRO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (927, 283, 'MANUEL SALVADOR ULLOA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (982, 297, 'MONSEÑOR CARRILLO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (990, 299, 'JUAN IGNACIO MONTILLA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1064, 325, 'SAN JOSE DE PERIJA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1072, 327, 'ANTONIO BORJAS ROMERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1093, 328, 'SAN ANTONIO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1112, 333, 'MANUEL MANRIQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1119, 334, 'M.ARTURO CELESTINO A', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (3, 1, 'LA ESMERALDA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1, 1, 'MAVACA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (5, 1, 'SIERRA PARIMA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (337, 104, 'CATEDRAL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (344, 104, 'LA VEGA', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (349, 104, 'SAN JUAN', '0', '0', NULL, NULL, '17  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (401, 116, 'LOS TAQUES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (410, 118, 'SAN GABRIEL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1137, 12, 'MACURA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (64, 20, 'SANTA ROSA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (432, 129, 'LA CIENAGA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1138, 129, 'PUERTO CUMAREBO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1144, 42, 'LIBERTADOR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1140, 26, 'MIGUEL CERO SILVA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1139, 26, 'EDMUNDO BARRIOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (468, 141, 'CANTAGALLO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (473, 143, 'SANTA MARIA DE IPIRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (509, 150, 'JOSE G. BASTIDAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1141, 38, 'GIRARDOT', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (459, 152, 'TORRES', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1142, 40, 'JOSE FELIX RIBAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1143, 41, 'JOSE RAFAEL REVENGA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1145, 43, 'MARIO BRICEÑO IRAGORRY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1146, 46, 'SANTIAGO MARIÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1147, 47, 'SANTOS MICHELENA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1148, 48, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (556, 159, 'LA MESA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1149, 50, 'URDANETA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (560, 160, 'FLORENCIO RAMIREZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1150, 51, 'ZAMORA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (579, 165, 'JUAN RODRIGUEZ SUAREZ', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1151, 52, 'FRANCISCO LINARES ALCANTARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (586, 166, 'ANDRES ELOY BLANCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (590, 167, 'ELOY PAREDES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (179, 57, 'SAN SILVESTRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (592, 167, 'CAPITAL OBISPO RAMOS DE LORA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (596, 170, 'LA TOMA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (603, 173, 'CHIGUARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (209, 65, 'PUERTO VIVAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (622, 177, 'CAUCAGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (628, 178, 'SAN JOSE DE BARLOVENTO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1152, 63, 'SANTA ROSA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (651, 188, 'OCUMARE DEL TUY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (657, 190, 'SAN FERNANDO DEL GUAPO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (668, 195, 'LEONCIO MARTINEZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (674, 198, 'CAPITAL ACOSTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1153, 69, 'GRAN SABANA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (694, 205, 'ALTO DE LOS GODOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (702, 205, 'SANTA CRUZ', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (257, 76, 'EL PALMAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (279, 87, 'DEMOCRACIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (717, 211, 'ANTOLIN DEL CAMPO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (292, 90, 'RAFAEL URDANETA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (730, 217, 'ADRIAN', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (313, 100, 'CURIAPO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (750, 226, 'GUANARITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (763, 231, 'ANTOLIN TOVAR AQUINO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (772, 234, 'SAN JOSE DE SAGUAZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (779, 235, 'TUREN', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (955, 291, 'EL BAÑO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (967, 294, 'JOSE G HERNANDEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (961, 292, 'SANTA ANA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (975, 296, 'SABANA DE MENDOZA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1010, 310, 'ALBARICO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1025, 316, 'SAN TIMOTEO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1020, 316, 'GENERAL URDANETA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1028, 317, 'CARMEN HERRERA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1033, 317, 'ROMULO BETANCOURT', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1042, 320, 'CARLOS QUEVEDO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1049, 322, 'BARI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1079, 327, 'CRISTO DE ARANZA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1087, 327, 'SAN ISIDRO', '0', '0', NULL, NULL, '18  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1099, 330, 'DONALDO GARCIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1104, 331, 'FRANCISCO OCHOA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1133, 314, 'MAIQUETIA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1017, 314, 'VARGAS', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (807, 244, 'CAMPO ELIAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (818, 247, 'CUMANACOA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (849, 256, 'CORDOBA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (877, 267, 'LOBATERA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (885, 272, 'HERNANDEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (891, 273, 'SAN JUAN BAUTISTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (899, 278, 'JUAN PABLO PEÑALOZA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (908, 281, 'BOCONO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (912, 281, 'GUARAMACAL', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (921, 282, 'SABANA GRANDE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1154, 71, 'PIAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1155, 73, 'ROSCIO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1156, 74, 'SIFONTES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1157, 75, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1158, 76, 'PADRE PEDRO CH', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1160, 108, 'CACIQUE MANUARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (693, 204, 'CAPITAL LIBERTADOR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1159, 205, 'CAPITAL MATURIN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (712, 207, 'CAPITAL PUNCERES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (736, 220, 'CAPITAL TUBORES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1161, 300, 'ARISTIDES BASTIDAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1162, 301, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1163, 302, 'BRUZUAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1164, 305, 'JOSE ANTONIO PAEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1165, 306, 'TRINIDAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1166, 307, 'MANUEL MORGE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1167, 309, 'PEÑA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1168, 311, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1169, 313, 'VEROES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1038, 319, 'SAN CARLOS DEL ZULIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1065, 326, 'LA SIERRITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (886, 272, 'SAMUEL DARIO MALDONADO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (9999, 999, 'Sin descripción',        '', '', NULL, NULL, '')");
    DB::connection('pgsql_common')->statement(
        "UPDATE public.parishes
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
    );
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/CommonDatabaseSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;

class CommonDatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Model::unguard();

        $this->call([
            //OthersTableSeeder:class,
            StatesTableSeeder::class,
            MunicipalitiesTableSeeder::class,
            ParishesTableSeeder::class,
            CitiesTableSeeder::class,
            ZoneTypesTableSeeder::class,
            RouteTypesTableSeeder::class,
            DomicileTypesTableSeeder::class,
            MuContainerSeeder::class,
            MuMeasureUnitTypeSeeder::class,
            MuMeasureUnitSeeder::class
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/MuMeasureUnitSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class MuMeasureUnitSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {        
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (1, 1, 'Kilómetro(s)', 'km', '1000 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (2, 1, 'Hectómetro(s)', 'hm', '100 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (3, 1, 'Decámetro(s)', 'dam', '10 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (4, 1, 'Metro(s)', 'm', '1 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (5, 1, 'Decímetro(s)', 'dm', '0.1 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (6, 1, 'Centímetro(s)', 'cm', '0.01 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (7, 1, 'Milímetro(s)', 'mm', '0.001 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (8, 1, 'Pulgada(s)', 'pul', '1 pul')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (9, 1, 'Pie(s)', 'pie', '12 pulgadas = 30.48 cm.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (10, 1, 'Yarda(s)', 'yar', 'Yarda = 3 pies = 91.44 cm.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (11, 1, 'Braza(s)', 'bz', 'Braza = dos yardas = 1. 829 m.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (12, 1, 'Milla(s) Terrestre', 'mllt', 'Milla terrestre = 880 brazas = 1.609 kilómetros.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (13, 1, 'Milla(s) Náutica', 'mlln', 'Milla náutica = 1.853 m.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (14, 2, 'Kilogramo(s)', 'kg', '1000 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (15, 2, 'Hectogramo(s)', 'hg', '100 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (16, 2, 'Decagramo(s)', 'dag', '10 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (17, 2, 'Gramo(s)', 'g', '1 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (18, 2, 'Decigramo(s)', 'dg', '0.1 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (19, 2, 'Centigramo(s)', 'cg', '0.01 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (20, 2, 'Miligramo(s)', 'mg', '0.001 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (21, 2, 'Tonelada(s) Métrica', 't', '1 t = 1000 kg')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (22, 2, 'Quintal Métrico', 'qm', '1 q = 100 kg')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (23, 3, 'Kilolitro(s)', 'kl', '1000 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (24, 3, 'Hectolitro(s)', 'hl', '100 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (25, 3, 'Decalitro(s)', 'dal', '10 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (26, 3, 'Litro(s)', 'l', '1 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (27, 3, 'Decilitro(s)', 'dl', '0.1 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (28, 3, 'Centilitro(s)', 'cl', '0.01 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (29, 3, 'Mililitro(s)', 'ml', '0.001 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (30, 3, 'Barril', 'b', '159 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (31, 4, 'Kilómetro(s) Cuadrado', 'km2', '1 000 000 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (32, 4, 'Hectómetro(s) Cuadrado', 'hm2', '10 000 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (33, 4, 'Decámetro(s) Cuadrado', 'dam2', '100 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (34, 4, 'Metro(s) Cuadrado', 'm2', '1 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (35, 4, 'Decímetro(s) Cuadrado', 'dm2', '0.01 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (36, 4, 'Centímetro(s) Cuadrado', 'cm2', '0.0001 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (37, 4, 'Milímetro(s) Cuadrado', 'mm2', '0.000001 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (38, 5, 'Hectárea', 'h', '1 Ha = 1 Hm2 = 10 000 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (39, 5, 'Área', 'a', '1 a = 1 dam2 = 100 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (40, 5, 'Centiárea', 'ca', '1 ca = 1 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (41, 6, 'Kilómetro(s) Cúbico', 'km3', '1 000 000 000 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (42, 6, 'Hectómetro(s) Cúbico', 'hm3', '1 000 000m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (43, 6, 'Decámetro(s) Cúbico', 'dam3', '1 000 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (44, 6, 'Metro(s) Cúbico', 'm3', '1 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (45, 6, 'Decímetro(s) Cúbico', 'dm3', '0.001 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (46, 6, 'Centímetro(s) Cúbico', 'cm3', '0.000001 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (47, 6, 'Milímetro(s) Cúbico', 'mm3', '0.000000001 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (48, 7, 'Unidades', 'Unid', '1')");
        DB::connection('pgsql_common')->statement(
            "UPDATE public.mu_measure_units
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
        );
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/CitiesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class CitiesTableSeeder extends Seeder
{
  /**
  * Run the database seeds.
  *
  * @return void
  */
  public function run()
  {
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (2, 'SAN FERNANDO DE ATABAPO', 2, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (3, 'PUERTO AYACUCHO', 2, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (4, 'LA ESMERALDA', 2, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (5, 'ISLA RATÓN', 2, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (6, 'MAROA', 2, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (7, 'SAN JUAN DE MANAPIARE', 2, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (8, 'SAN CARLOS DE RÍO NEGRO', 2, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (9, 'ANACO', 1, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (10, 'ARAGUA DE BARCELONA', 1, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (11, 'PUERTO PÍRITU', 1, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (12, 'VALLE DE GUANAPE', 1, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (13, 'PARIAGUÁN', 1, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (14, 'GUANTA', 1, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (15, 'SOLEDAD', 1, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (17, 'ONOTO', 1, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (18, 'MAPIRE', 1, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (19, 'SAN MATEO', 1, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (20, 'CLARINES', 1, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (21, 'CANTAURA', 1, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (22, 'PÍRITU', 1, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (23, 'SAN JOSÉ DE GUANIPA (EL TIGRITO)', 1, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (24, 'BOCA DE UCHIRE', 1, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (37, 'SAN MATEO', 4, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (26, 'BARCELONA', 1, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (27, 'EL TIGRE', 1, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (28, 'EL CHAPARRO', 1, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (29, 'LECHERÍAS', 1, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (31, 'BIRUACA', 3, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (32, 'BRUZUAL', 3, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (33, 'GUASDUALITO', 3, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (34, 'SAN JUAN DE PAYARA', 3, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (35, 'ELORZA', 3, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (36, 'SAN FERNANDO DE APURE', 3, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (25, 'SANTA ANA', 1, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (38, 'CAMATAGUA', 4, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (39, 'MARACAY', 4, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (40, 'SANTA CRUZ', 4, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (41, 'LA VICTORIA', 4, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (42, 'EL CONSEJO', 4, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (43, 'PALO NEGRO', 4, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (45, 'SAN CASIMIRO', 4, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (46, 'SAN SEBASTIÁN', 4, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (47, 'TURMERO', 4, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (48, 'LAS TEJERÍAS', 4, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (49, 'CAGUA', 4, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (50, 'LA COLONIA TOVAR', 4, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (51, 'BARBACOAS', 4, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (52, 'VILLA DE CURA', 4, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (53, 'SANTA RITA', 4, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (54, 'OCUMARE DE LA COSTA', 4, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (55, 'SABANETA', 5, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (56, 'SOCOPÓ', 5, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (57, 'ARISMENDI', 5, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (58, 'BARINAS', 5, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (60, 'BARRANCAS', 5, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (61, 'SANTA BÁRBARA', 5, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (62, 'OBISPOS', 5, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (63, 'CIUDAD BOLIVIA', 5, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (64, 'LIBERTAD', 5, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (65, 'CIUDAD DE NUTRIAS', 5, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (66, 'EL CANTÓN', 5, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (67, 'CIUDAD GUAYANA', 16, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (68, 'CIUDAD BOLÍVAR', 16, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (69, 'CAICARA DEL ORINOCO', 16, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (70, 'EL CALLAO', 16, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (72, 'UPATA', 16, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (73, 'CIUDAD PIAR', 16, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (74, 'GUASIPATI', 16, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (75, 'TUMEREMO', 16, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (76, 'MARIPA', 16, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (77, 'EL PALMAR', 16, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (79, 'GÜIGÜE', 17, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (78, 'BEJUMA', 17, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (80, 'MARIARA', 17, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (81, 'GUACARA', 17, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (82, 'MORÓN', 17, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (83, 'TOCUYITO', 17, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (84, 'LOS GUAYOS', 17, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (85, 'MIRANDA', 17, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (86, 'MONTALBÁN', 17, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (87, 'NAGUANAGUA', 17, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (89, 'SAN DIEGO', 17, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (90, 'SAN JOAQUÍN', 17, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (91, 'VALENCIA', 17, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (92, 'COJEDES', 18, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (93, 'TINAQUILLO', 18, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (94, 'EL BAÚL', 18, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (95, 'MACAPO', 18, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (96, 'EL PAO', 18, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (97, 'LIBERTAD', 18, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (98, 'LAS VEGAS', 18, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (99, 'SAN CARLOS', 18, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (100, 'TINACO', 18, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (101, 'CURIAPO', 19, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (102, 'SIERRA IMATACA', 19, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (103, 'PEDERNALES', 19, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (105, 'SAN JUAN DE LOS CAYOS', 7, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (106, 'SAN LUIS', 7, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (107, 'CAPATÁRIDA', 7, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (108, 'YARACAL', 7, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (109, 'PUNTO FIJO', 7, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (110, 'LA VELA DE CORO', 7, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (111, 'DABAJURO', 7, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (112, 'PEDREGAL', 7, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (113, 'PUEBLO NUEVO', 7, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (114, 'CHURUGUARA', 7, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (115, 'JACURA', 7, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (117, 'MENE DE MAUROA', 7, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (118, 'SANTA ANA DE CORO', 7, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (119, 'CHICHIRIVICHE', 7, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (120, 'PALMASOLA', 7, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (121, 'CABURE', 7, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (122, 'PÍRITU', 7, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (123, 'MIRIMIRE', 7, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (124, 'TUCACAS', 7, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (125, 'LA CRUZ DE TARATARA', 7, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (126, 'TOCÓPERO', 7, true, false, '22')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (127, 'SANTA CRUZ DE BUCARAL', 7, true, false, '23')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (128, 'URUMACO', 7, true, false, '24')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (129, 'PUERTO CUMAREBO', 7, true, false, '25')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (130, 'CAMAGUÁN', 8, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (131, 'CHAGUARAMAS', 8, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (132, 'EL SOCORRO', 8, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (133, 'GUAYABAL', 8, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (135, 'LAS MERCEDES', 8, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (136, 'EL SOMBRERO', 8, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (137, 'CALABOZO', 8, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (138, 'ALTAGRACIA DE ORITUCO', 8, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (139, 'ORTIZ', 8, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (140, 'TUCUPIDO', 8, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (141, 'SAN JUAN DE LOS MORROS', 8, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (142, 'SAN JOSÉ DE GUARIBE', 8, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (236, 'CASANAY', 19, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (237, 'SAN JOSÉ DE AEROCUAR', 19, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (144, 'ZARAZA', 8, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (145, 'SANARE', 9, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (146, 'DUACA', 9, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (147, 'BARQUISIMETO', 9, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (148, 'QUÍBOR', 9, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (149, 'EL TOCUYO', 9, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (150, 'CABUDARE', 9, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (151, 'SARARE', 9, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (152, 'CARORA', 9, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (154, 'EL VIGÍA', 10, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (155, 'LA AZULITA', 10, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (156, 'SANTA CRUZ DE MORA', 10, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (157, 'ARICAGUA', 10, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (158, 'CANAGUÁ', 10, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (159, 'EJIDO', 10, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (160, 'TUCANÍ', 10, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (161, 'SANTO DOMINGO', 10, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (162, 'GUARAQUE', 10, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (163, 'ARAPUEY', 10, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (164, 'TORONDOY', 10, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (165, 'MÉRIDA', 10, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (166, 'TIMOTES', 10, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (168, 'SANTA MARÍA DE CAPARO', 10, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (169, 'PUEBLO LLANO', 10, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (170, 'MUCUCHÍES', 10, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (171, 'BAILADORES', 10, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (172, 'TABAY', 10, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (173, 'LAGUNILLAS', 10, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (174, 'TOVAR', 10, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (175, 'NUEVA BOLIVIA', 10, true, false, '22')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (176, 'ZEA', 10, true, false, '23')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (197, 'GUATIRE', 11, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (196, 'CÚA', 11, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (194, 'SAN FRANCISCO DE YARE', 11, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (193, 'GUARENAS', 11, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (192, 'CÚPIRA', 11, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (191, 'SANTA LUCÍA', 11, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (190, 'RÍO CHICO', 11, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (188, 'OCUMARE DEL TUY', 11, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (187, 'SANTA TERESA DEL TUY', 11, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (186, 'LOS TEQUES', 11, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (184, 'CHARALLAVE', 11, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (182, 'CARRIZAL', 11, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (181, 'MAMPORAL', 11, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (180, 'HIGUEROTE', 11, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (198, 'SAN ANTONIO', 20, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (199, 'AGUASAY', 20, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (200, 'CARIPITO', 20, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (202, 'CAICARA', 20, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (201, 'CARIPE', 20, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (203, 'PUNTA DE MATA', 20, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (204, 'TEMBLADOR', 20, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (205, 'MATURÍN', 20, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (206, 'ARAGUA', 20, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (207, 'QUIRIQUIRE', 20, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (209, 'BARRANCAS', 20, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (210, 'URACOA', 20, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (221, 'SAN PEDRO DE COCHE', 21, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (220, 'PUNTA DE PIEDRAS', 21, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (219, 'BOCA DEL RÍO', 21, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (218, 'PORLAMAR', 21, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (217, 'JUANGRIEGO', 21, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (216, 'PAMPATAR', 21, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (215, 'SANTA ANA', 21, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (213, 'SAN JUAN BAUTISTA', 21, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (212, 'LA ASUNCIÓN', 21, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (234, 'BISCUCUY', 12, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (211, 'PLAZA PARAGUACHÍ', 21, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (235, 'VILLA BRUZUAL', 12, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (233, 'EL PLAYÓN', 12, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (232, 'SAN RAFAEL DE ONOTO', 12, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (231, 'BOCONOITO', 12, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (230, 'PAPELÓN', 12, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (229, 'ACARIGUA', 12, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (228, 'OSPINO', 12, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (227, 'PARAÍSO DE CHABASQUÉN', 12, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (226, 'GUANARITO', 12, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (225, 'GUANARE', 12, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (224, 'PÍRITU', 12, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (223, 'ARAURE', 12, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (222, 'AGUA BLANCA', 12, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (250, 'GÜIRIA', 22, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (249, 'CUMANÁ', 22, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (248, 'CARIACO', 22, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (247, 'CUMANACOA', 22, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (245, 'IRAPA', 22, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (244, 'TUNAPUY', 22, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (243, 'ARAYA', 22, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (242, 'YAGUARAPARO', 22, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (241, 'MARIGÜITAR', 22, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (240, 'CARÚPANO', 22, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (239, 'EL PILAR', 22, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (238, 'RÍO CARIBE', 22, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (279, 'UMUQUENA', 13, true, false, '29')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (278, 'PREGONERO', 13, true, false, '28')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (276, 'QUENIQUEA', 13, true, false, '26')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (277, 'SAN JOSECITO', 13, true, false, '27')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (275, 'SAN SIMÓN', 13, true, false, '25')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (274, 'SEBORUCO', 13, true, false, '24')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (273, 'SAN CRISTÓBAL', 13, true, false, '23')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (272, 'LA TENDIDA', 13, true, false, '22')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (271, 'DELICIAS', 13, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (270, 'UREÑA', 13, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (268, 'MICHELENA', 13, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (267, 'LOBATERA', 13, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (266, 'ABEJALES', 13, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (265, 'CAPACHO VIEJO', 13, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (264, 'RUBIO', 13, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (263, 'EL COBRE', 13, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (262, 'LA GRITA', 13, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (261, 'CAPACHO NUEVO', 13, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (260, 'PALMIRA', 13, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (259, 'LA FRÍA', 13, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (257, 'SAN RAFAEL DEL PIÑAL', 13, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (256, 'SANTA ANA', 13, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (255, 'TÁRIBA', 13, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (254, 'SAN ANTONIO DEL TÁCHIRA', 13, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (253, 'COLÓN', 13, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (252, 'LAS MESAS', 13, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (251, 'CORDERO', 13, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (289, 'PAMPÁN', 14, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (288, 'EL DIVIDIVE', 14, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (287, 'MOTATÁN', 14, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (286, 'MONTE CARMELO', 14, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (285, 'SANTA APOLONIA', 14, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (284, 'CAMPO ELÍAS', 14, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (283, 'CARACHE', 14, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (282, 'EL PARADERO', 14, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (281, 'ESCUQUE', 14, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (280, 'SANTA ISABEL', 14, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (1, 'CARACAS', 6, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (16, 'PUERTO LA CRUZ', 1, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (30, 'ACHAGUAS', 3, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (44, 'EL LIMÓN', 4, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (59, 'BARINITAS', 5, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (71, 'SANTA ELENA DE UAIRÉN', 16, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (88, 'PUERTO CABELLO', 17, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (104, 'TUCUPITA', 19, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (116, 'SANTA CRUZ DE LOS TAQUES', 7, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (134, 'VALLE DE LA PASCUA', 8, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (143, 'SANTA MARÍA DE IPIRE', 8, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (153, 'SIQUISIQUE', 9, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (167, 'SANTA ELENA DE ARENALES', 10, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (195, 'PETARE', 11, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (189, 'SAN ANTONIO DE LOS ALTOS', 11, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (185, 'EL HATILLO', 11, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (183, 'CHACAO', 11, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (208, 'SANTA BÁRBARA', 20, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (214, 'EL VALLE DEL ESPÍRITU SANTO', 21, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (246, 'SAN ANTONIO DEL GOLFO', 22, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (269, 'COLONCITO', 13, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (258, 'SAN JOSÉ DE BOLÍVAR', 13, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (296, 'LA QUEBRADA', 14, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (295, 'VALERA', 14, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (294, 'TRUJILLO', 14, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (293, 'SABANA DE MENDOZA', 14, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (292, 'CARVAJAL', 14, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (291, 'BETIJOQUE', 14, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (290, 'PAMPANITO', 14, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (310, 'FARRIAR', 23, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (311, 'EL TORO', 24, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (309, 'URACHICHE', 23, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (308, 'GUAMA', 23, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (307, 'SAN FELIPE', 23, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (306, 'YARITAGUA', 23, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (305, 'NIRGUA', 23, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (304, 'YUMARE', 23, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (303, 'BORAURE', 23, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (302, 'SABANA DE PARRA', 23, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (301, 'INDEPENDENCIA', 23, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (300, 'COCOROTE', 23, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (299, 'CHIVACOA', 23, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (298, 'AROA', 23, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (297, 'SAN PABLO', 23, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (332, 'LA GUAIRA', 15, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (331, 'BACHAQUERO', 24, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (330, 'BOBURES', 24, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (329, 'TÍA JUANA', 24, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (328, 'SANTA RITA', 24, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (327, 'SAN FRANCISCO', 24, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (326, 'LA VILLA DEL ROSARIO', 24, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (325, 'SINAMAICA', 24, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (324, 'LOS PUERTOS DE ALTAGRACIA', 24, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (323, 'MARACAIBO', 24, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (322, 'SAN RAFAEL DE EL MOJÁN', 24, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (321, 'MACHIQUES', 24, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (320, 'CIUDAD  OJEDA', 24, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (319, 'CONCEPCIÓN', 24, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (318, 'CASIGUA (EL CUBO)', 24, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (317, 'LA CONCEPCIÓN', 24, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (316, 'PUEBLO NUEVO (EL CHIVO)', 24, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (315, 'SAN CARLOS DEL ZULIA', 24, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (314, 'ENCONTRADOS', 24, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (313, 'CABIMAS', 24, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (312, 'SAN TIMOTEO', 24, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (177, 'CAUCAGUA', 11, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (178, 'SAN JOSÉ DE BARLOVENTO', 11, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (179, 'NUESTRA SEÑORA DEL ROSARIO', 11, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (333, 'BOCONÓ', 14, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (335, 'CHEJENDÉ', 14, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (334, 'SABANA GRANDE', 14, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (999, 'Sin descripción', 99, true, false, '')");
    DB::connection('pgsql_common')->statement(
        "UPDATE public.cities
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
    );
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/MuMeasureUnitTypeSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class MuMeasureUnitTypeSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (1, 'Longitud')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (2, 'Masa')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (3, 'Capacidad')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (4, 'Superficie')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (5, 'Superficie Agrarias')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (6, 'Volumen')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (7, 'Cantidad')");       
        DB::connection('pgsql_common')->statement(
            "UPDATE public.mu_measure_unit_types
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
        );
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/ZoneTypesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Modules\Common\Entities\GeoLocation\ZoneType;

class ZoneTypesTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {        
        ZoneType::create(['id' => 1,  'description' => 'SECTOR'      ]);
        ZoneType::create(['id' => 2,  'description' => 'CASERIO'     ]);
        ZoneType::create(['id' => 3,  'description' => 'POBLADO'     ]);
        ZoneType::create(['id' => 4,  'description' => 'ZONA'        ]);
        ZoneType::create(['id' => 5,  'description' => 'PARCELA'     ]);
        ZoneType::create(['id' => 6,  'description' => 'TRAMO'       ]);
        ZoneType::create(['id' => 7,  'description' => 'SECCIÓN'     ]);
        ZoneType::create(['id' => 8,  'description' => 'URBANISMO'   ]);
        ZoneType::create(['id' => 9,  'description' => 'DESARROLLO'  ]);
        ZoneType::create(['id' => 10, 'description' => 'COMARCA'     ]);
        ZoneType::create(['id' => 11, 'description' => 'CONDADO'     ]);
        ZoneType::create(['id' => 12, 'description' => 'REGIÓN'      ]);
        ZoneType::create(['id' => 13, 'description' => 'PUEBLO'      ]);
        ZoneType::create(['id' => 14, 'description' => 'VILLA'       ]);
        ZoneType::create(['id' => 15, 'description' => 'CONJUNTO'    ]);
        ZoneType::create(['id' => 16, 'description' => 'URBANIZACIÓN']);
        ZoneType::create(['id' => 17, 'description' => 'ÁREA'        ]);
        ZoneType::create(['id' => 18, 'description' => 'ALDEA'       ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/StatesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Modules\Common\Entities\GeoLocation\State;

class StatesTableSeeder extends Seeder
{
    /**
    * Run the database seeds.
    *
    * @return void
    */
    public function run()
    {
        State::create([
            'id' => 1,
            'description' => 'ANZOATEGUI',
            'latitud' => '10.13',
            'longitud' => '-64.72',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '8;16;20;22',
            'siex_estado' => '03  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 2,
            'description' => 'AMAZONAS',
            'latitud' => '5.21',
            'longitud' => '-66.23',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '3;16',
            'siex_estado' => '02  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 3,
            'description' => 'APURE',
            'latitud' => '7.6',
            'longitud' => '-67.43',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '2;5;8;13;16',
            'siex_estado' => '04  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 4,
            'description' => 'ARAGUA',
            'latitud' => '10.33',
            'longitud' => '-67.47',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '8;11;15;17',
            'siex_estado' => '05  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 5,
            'description' => 'BARINAS',
            'latitud' => '8.60',
            'longitud' => '-70.25',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '3;8;10;12;13;14;18',
            'siex_estado' => '06  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 6,
            'description' => 'DISTRITO CAPITAL',
            'latitud' => '10.50',
            'longitud' => '-66.90',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '11;15',
            'siex_estado' => '01  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 7,
            'description' => 'FALCON',
            'latitud' => '11.42',
            'longitud' => '-69.68',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '9;17;23;24',
            'siex_estado' => '11  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 8,
            'description' => 'GUARICO',
            'latitud' => '9.45',
            'longitud' => '-67.33',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '1;3;4;5;11;16;17;18',
            'siex_estado' => '12  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 9,
            'description' => 'LARA',
            'latitud' => '10.03',
            'longitud' => '-69.34',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '7;12;14;23;24',
            'siex_estado' => '13  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 10,
            'description' => 'MERIDA',
            'latitud' => '8.59',
            'longitud' => '-71.14',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '5;13;14;24',
            'siex_estado' => '14  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 11,
            'description' => 'MIRANDA',
            'latitud' => '10.34',
            'longitud' => '-67.02',
            'egoogle' => '', 'coordinates' => '',
            'colindante' => '4;6;1;8;15',
            'siex_estado' => '15  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 12,
            'description' => 'PORTUGUESA',
            'latitud' => '9.05',
            'longitud' => '-69.75',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '5;9;14;18',
            'siex_estado' => '18  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 13,
            'description' => 'TACHIRA',
            'latitud' => '7.792',
            'longitud' => '-72.20',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '3;5;10;24',
            'siex_estado' => '20  ',
            'geo_country_id' => 206]
        );

        State::create([
            'id' => 14,
            'description' => 'TRUJILLO',
            'latitud' => '9.31',
            'longitud' => '-70.60',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '5;9;10;12;24',
            'siex_estado' => '21  ',
            'geo_country_id' => 206]
        );

        State::create([
            'id' => 15,
            'description' => 'VARGAS',
            'latitud' => '10.59',
            'longitud' => '-66.94',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '4;6;11',
            'siex_estado' => '24  ',
            'geo_country_id' => 206]
        );

        State::create([
            'id' => 16,
            'description' => 'BOLIVAR',
            'latitud' => '7.50',
            'longitud' => '-64.43',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '1;2;3;18;19;20',
            'siex_estado' => '07  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 17,
            'description' => 'CARABOBO',
            'latitud' => '10.16',
            'longitud' => '-67.98',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '4;7;8;18;23',
            'siex_estado' => '08  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 18,
            'description' => 'COJEDES',
            'latitud' => '9.64',
            'longitud' => '-68.58',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '5;8;9;12;17;23',
            'siex_estado' => '09  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 19,
            'description' => 'DELTA AMACURO',
            'latitud' => '9.06',
            'longitud' => '-62.05',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '16;20',
            'siex_estado' => '10  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 20,
            'description' => 'MONAGAS',
            'latitud' => '9.74',
            'longitud' => '-63.18',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '16;19',
            'siex_estado' => '16  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 21,
            'description' => 'NUEVA ESPARTA',
            'latitud' => '10.96',
            'longitud' => '-64.02',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '1;4;7;11;15;17;19;20;22;24;14',
            'siex_estado' => '17  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 22,
            'description' => 'SUCRE',
            'latitud' => '10.47',
            'longitud' => '-63.43',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '1;20;21',
            'siex_estado' => '19  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 23,
            'description' => 'YARACUY',
            'latitud' => '10.23',
            'longitud' => '-68.70',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '7;9;18;17',
            'siex_estado' => '22  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 24,
            'description' => 'ZULIA',
            'latitud' => '9.85',
            'longitud' => '-71.55',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '7;9;10;13;14',
            'siex_estado' => '23  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 99,
            'description' => 'Sin descripción',
            'latitud' => '0',
            'longitud' => '0',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '0',
            'siex_estado' => '0   ',
            'geo_country_id' => 0
        ]);
        
    }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/seeders/DomicileTypesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Modules\Common\Entities\GeoLocation\DomicileType;

class DomicileTypesTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DomicileType::create(['id' => 1, 'description' => 'CASA'      ]);
        DomicileType::create(['id' => 2, 'description' => 'EDIFICIO'  ]);        
        DomicileType::create(['id' => 3, 'description' => 'TOWNHOUSE' ]);
        DomicileType::create(['id' => 4, 'description' => 'RESIDENCIA']);
        DomicileType::create(['id' => 5, 'description' => 'CHALÉ'     ]);
        DomicileType::create(['id' => 6, 'description' => 'FINCA'     ]);
        DomicileType::create(['id' => 7, 'description' => 'PENSIÓN'   ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_10_19_181949_create_states_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStatesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('parishes');
        Schema::connection('pgsql_common')->dropIfExists('municipalities');
        Schema::connection('pgsql_common')->dropIfExists('cities');
        Schema::connection('pgsql_common')->dropIfExists('states');
        Schema::connection('pgsql_common')->create('states', function (Blueprint $table) {            
            $table->id();
            $table->string('description', 60)->unique();
            $table->string('latitud', 20);
            $table->string('longitud', 20);
            $table->string('egoogle', 30);            
            $table->string('coordinates', 30);
            $table->string('colindante', 50);
            $table->string('siex_estado', 4);
            $table->integer('geo_country_id');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('parishes');
        Schema::connection('pgsql_common')->dropIfExists('municipalities');
        Schema::connection('pgsql_common')->dropIfExists('cities');
        Schema::connection('pgsql_common')->dropIfExists('states');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_11_10_210636_create_mu_measure_units_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMuMeasureUnitsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_units');
        Schema::connection('pgsql_common')->create('mu_measure_units', function (Blueprint $table) {
            $table->id();
            $table->integer('mu_measure_unit_types_id')->unsignedInteger();
            $table->string('description');
            $table->string('abbreviate');
            $table->string('comment');
            $table->timestamps();
            $table->foreign('mu_measure_unit_types_id')->references('id')->on('mu_measure_unit_types');
            $table->unique('description');            
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_units');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_10_19_211621_create_municipalities_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMunicipalitiesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('municipalities');
        Schema::connection('pgsql_common')->create('municipalities', function (Blueprint $table) {
            $table->id();          
            $table->integer('state_id')->unsignedInteger();                        
            $table->string('description', 60);
            $table->string('longitud', 20);
            $table->string('latitud', 20);
            $table->string('egoogle', 30)->nullable();
            $table->string('coordinates', 30)->nullable();
            $table->string('siex_municipality', 4);
            $table->integer('city_id');
            $table->timestamps();
            $table->foreign('state_id')->references('id')->on('states');    
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('municipalities');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_11_10_210517_create_mu_measure_unit_types_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMuMeasureUnitTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_units');
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_unit_types');
        Schema::connection('pgsql_common')->create('mu_measure_unit_types', function (Blueprint $table) {
            $table->id();
            $table->string('description');
            $table->timestamps();
            $table->unique('description');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_units');
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_unit_types');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_10_20_165454_create_domicile_types_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateDomicileTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('domicile_types');
        Schema::connection('pgsql_common')->create('domicile_types', function (Blueprint $table) {
            $table->id();
            $table->string('description', 50)->unique();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('domicile_types');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_10_20_165412_create_zone_types_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateZoneTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('zone_types');
        Schema::connection('pgsql_common')->create('zone_types', function (Blueprint $table) {
            $table->id();
            $table->string('description', 50)->unique();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('zone_types');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_10_20_165432_create_route_types_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateRouteTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('route_types');
        Schema::connection('pgsql_common')->create('route_types', function (Blueprint $table) {
            $table->id();
            $table->string('description', 50)->unique();               
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('route_types');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_11_10_205407_create_mu_containers_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMuContainersTable extends Migration
{
    // protected $connection = 'pgsql_common';
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {   // https://github.com/nWidart/laravel-modules/issues/1520
        Schema::connection('pgsql_common')->dropIfExists('mu_containers');
        Schema::connection('pgsql_common')->create('mu_containers', function (Blueprint $table) {
            $table->id();           
            $table->string('description');
            $table->timestamps();
            $table->unique('description');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_containers');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_10_19_211743_create_parishes_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateParishesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('parishes');
        Schema::connection('pgsql_common')->create('parishes', function (Blueprint $table) {
            $table->id();
            $table->integer('municipality_id')->unsignedInteger();            
            $table->string('description', 60);
            $table->string('latitud', 20);
            $table->string('longitud', 20);            
            $table->string('egoogle', 30)->nullable();
            $table->string('coordinates', 30)->nullable();
            $table->string('siex_parish', 4);           
            $table->foreign('municipality_id')->references('id')->on('municipalities');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('parishes');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/database/migrations/2020_10_20_163038_create_cities_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateCitiesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('cities');
        Schema::connection('pgsql_common')->create('cities', function (Blueprint $table) {
            $table->id();
            $table->string('description', 100);   
            $table->integer('state_id')->unsignedInteger();     
            $table->boolean('status')->default(true);
            $table->boolean('borr')->default(false);
            $table->string('cod_city', 2);
            $table->foreign('state_id')->references('id')->on('states');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('cities');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/config/config.php`:

```php
<?php

return [
    'name' => 'Common',
];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Config/config.php`:

```php
<?php

return [
    'name' => 'Common'
];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/MuContainerSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class MuContainerSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (22, 'CAJA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (1, 'PAQUETE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (2, 'BOLSA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (3, 'TUBO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (5, 'PAPELETA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (6, 'BULTO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (7, 'BARRIL(ES)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (8, 'PIPETA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (9, 'PIPOTE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (10, 'FAJA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (11, 'BOTELLA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (14, 'POTE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (13, 'GABERA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (19, 'VASO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (18, 'BOMBONA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (16, 'TANQUE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (15, 'PIMPINA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (20, 'GALON(ES)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (21, 'CUÑETE(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (4, 'FRASCO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (12, 'LATA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (24, 'PAILA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (23, 'TAMBOR(ES)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (25, 'BOBINA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (26, 'ROLLO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (27, 'PALETA(S) ')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (28, 'LÁMINA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (29, 'CARBOYA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (30, 'TOTEN(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (31, 'CARTUCHO(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (32, 'GRANEL')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (33, 'N/A')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (35, 'BLISTER(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (36, 'PACA(S)')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_containers VALUES (37, 'SACO(S)')");
        DB::connection('pgsql_common')->statement(
            "UPDATE public.mu_containers
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
        );
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/MunicipalitiesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class MunicipalitiesTableSeeder extends Seeder
{
  /**
   * Run the database seeds.
   *
   * @return void
   */
  public function run()
  {
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (102, 19, 'PEDERNALES', '-62.17', '9,81', NULL, NULL, '03  ', 103)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (178, 11, 'ANDRÉS BELLO', '-66.07', '10,27', NULL, NULL, '02  ', 178)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (10, 1, 'FERNANDO DE PEÑALVER', '-64.87', '10,06', NULL, NULL, '03  ', 11)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (31, 3, 'MUÑOZ', '-68.93', '7,37', NULL, NULL, '03  ', 32)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (38, 4, 'GIRARDOT', '-67.58', '10,46', NULL, NULL, '03  ', 39)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (68, 16, 'EL CALLAO', '-61.39', '7,99', NULL, NULL, '03  ', 70)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (79, 17, 'DIEGO IBARRA', '-67.68', '10,27', NULL, NULL, '03  ', 80)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (93, 18, 'GIRARDOT', '-68.3', '8,95', NULL, NULL, '03  ', 94)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (107, 7, 'BUCHIVACOA', '-70.76', '11,12', NULL, NULL, '03  ', 107)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (135, 8, 'LAS MERCEDES', '-66.48', '8,54', NULL, NULL, '06  ', 135)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (147, 9, 'IRIBARREN', '-69.34', '10,06', NULL, NULL, '03  ', 147)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (148, 9, 'JIMÉNEZ', '-69.62', '9,9', NULL, NULL, '04  ', 148)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (151, 9, 'SIMÓN PLANAS', '-69.1', '9,72', NULL, NULL, '07  ', 151)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (179, 11, 'BARUTA', '-66.85', '10,46', NULL, NULL, '03  ', 179)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (200, 20, 'BOLÍVAR', '-63.18', '9,74', NULL, NULL, '03  ', 200)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (213, 21, 'DÍAZ', '-64', '10,95', NULL, NULL, '03  ', 213)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (224, 12, 'ESTELLER', '-69.2', '9,37', NULL, NULL, '03  ', 224)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (238, 22, 'ARISMENDI', '-63.1', '10,68', NULL, NULL, '03  ', 238)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (253, 13, 'AYACUCHO', '-72.25', '8,04', NULL, NULL, '03  ', 253)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (2, 2, 'ATABAPO', '-66.66', '3,95', NULL, NULL, '02  ', 2)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (3, 2, 'ATURES', '-67.59', '5,65', NULL, NULL, '03  ', 3)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (4, 2, 'AUTANA', '-66.97', '4,8', NULL, NULL, '04  ', 5)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (6, 2, 'MANAPIARE', '-65.36', '5,33', NULL, NULL, '06  ', 7)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (7, 2, 'RÍO NEGRO', '-65.65', '1,64', NULL, NULL, '07  ', 8)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (8, 1, 'ANACO', '-64.46', '9,43', NULL, NULL, '01  ', 9)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (9, 1, 'ARAGUA', '-64.83', '9,46', NULL, NULL, '02  ', 10)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (11, 1, 'FRANCISCO DEL CARMEN CARVAJAL', '-64.72', '10,13', NULL, NULL, '04  ', 12)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (12, 1, 'FRANCISCO DE MIRANDA', '-64.31', '8,79', NULL, NULL, '05  ', 13)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (13, 1, 'GUANTA', '-64.36', '10,27', NULL, NULL, '06  ', 14)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (14, 1, 'INDEPENDENCIA', '-63.17', '8,58', NULL, NULL, '07  ', 15)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (15, 1, 'JUAN ANTONIO SOTILLO', '-64.38', '10,22', NULL, NULL, '08  ', 16)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (16, 1, 'JUAN MANUEL CAJIGAL', '-65.04', '9,88', NULL, NULL, '09  ', 17)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (17, 1, 'JOSÉ GREGORIO MONAGAS', '-65.22', '8,44', NULL, NULL, '10  ', 18)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (18, 1, 'LIBERTAD', '-64.72', '10,13', NULL, NULL, '11  ', 19)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (19, 1, 'MANUEL EZEQUIEL BRUZUAL', '-64.89', '9,96', NULL, NULL, '12  ', 20)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (21, 1, 'PÍRITU', '-64.79', '9,98', NULL, NULL, '14  ', 22)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (22, 1, 'SAN JOSÉ DE GUANIPA', '-64.1', '8,88', NULL, NULL, '15  ', 23)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (23, 1, 'SAN JUAN DE CAPISTRANO', '-65', '10,04', NULL, NULL, '16  ', 24)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (24, 1, 'SANTA ANA', '-64.35', '9,82', NULL, NULL, '17  ', 25)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (25, 1, 'SIMÓN BOLÍVAR', '-64.72', '10,13', NULL, NULL, '18  ', 26)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (26, 1, 'SIMÓN RODRÍGUEZ', '-64.26', '8,88', NULL, NULL, '19  ', 27)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (27, 1, 'SIR ARTHUR MC GREGOR', '-64.72', '-64,72', NULL, NULL, '20  ', 28)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (28, 1, 'DIEGO BAUTISTA URBANEJA', '-64.59', '10,17', NULL, NULL, '21  ', 29)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (29, 3, 'ACHAGUAS', '-68.31', '7,6', NULL, NULL, '01  ', 30)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (30, 3, 'BIRUACA', '-67.3', '7,75', NULL, NULL, '02  ', 31)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (32, 3, 'PÁEZ', '-70.71', '7,19', NULL, NULL, '04  ', 33)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (33, 3, 'PEDRO CAMEJO', '-67.66', '6,97', NULL, NULL, '05  ', 34)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (34, 3, 'RÓMULO GALLEGOS', '-69.32', '6,71', NULL, NULL, '06  ', 35)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (35, 3, 'SAN FERNANDO', '-66.91', '7,52', NULL, NULL, '07  ', 36)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (131, 8, 'CHAGUARAMAS', '-66.22', '9,49', NULL, NULL, '02  ', 131)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (67, 16, 'CEDEÑO', '-66.55', '6,55', NULL, NULL, '02  ', 69)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (146, 9, 'CRESPO', '-69.1', '10,49', NULL, NULL, '02  ', 146)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (106, 7, 'BOLÍVAR', '-69.71', '11,11', NULL, NULL, '02  ', 106)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (37, 4, 'CAMATAGUA', '-66.87', '9,9', NULL, NULL, '02  ', 38)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (155, 10, 'ANDRÉS BELLO', '-71.4', '8,68', NULL, NULL, '02  ', 155)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (55, 5, 'ANTONIO JOSÉ DE SUCRE', '-70.91', '8,09', NULL, NULL, '02  ', 56)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (78, 17, 'CARLOS ARVELO', '-67.72', '9,83', NULL, NULL, '02  ', 79)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (56, 5, 'ARISMENDI', '-68.25', '8,23', NULL, NULL, '03  ', 57)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (134, 8, 'LEONARDO INFANTE', '-66', '9,2', NULL, NULL, '05  ', 134)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (80, 17, 'GUACARA', '-67.89', '10,24', NULL, NULL, '04  ', 81)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (39, 4, 'JOSÉ ANGEL LAMAS', '-67.64', '10,23', NULL, NULL, '04  ', 40)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (109, 7, 'CARIRUBANA', '-70.02', '11,71', NULL, NULL, '05  ', 109)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (149, 9, 'MORÁN', '-69.78', '9,78', NULL, NULL, '05  ', 149)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (69, 16, 'GRAN SABANA', '-62.46', '5,87', NULL, NULL, '04  ', 71)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (103, 19, 'TUCUPITA', '-62.02', '9,05', NULL, NULL, '04  ', 104)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (94, 18, 'LIMA BLANCO', '-68.49', '9,83', NULL, NULL, '04  ', 95)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (40, 4, 'JOSÉ FÉLIX RIBAS', '-67.58', '10,18', NULL, NULL, '05  ', 41)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (58, 5, 'BOLÍVAR', '-70.51', '8,87', NULL, NULL, '05  ', 59)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (57, 5, 'BARINAS', '-70.18', '8,61', NULL, NULL, '04  ', 58)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (70, 16, 'HERES', '-63.54', '8,05', NULL, NULL, '05  ', 68)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (82, 17, 'LIBERTADOR', '-67.95', '9,74', NULL, NULL, '06  ', 83)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (95, 18, 'PAO DE SAN JUAN BAUTISTA', '-68', '9,21', NULL, NULL, '05  ', 96)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (105, 7, 'ACOSTA', '-68.36', '11,06', NULL, NULL, '01  ', 105)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (41, 4, 'JOSÉ RAFAEL REVENGA', '-67.56', '10,23', NULL, NULL, '06  ', 42)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (59, 5, 'CRUZ PAREDES', '-70.3', '8,92', NULL, NULL, '06  ', 60)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (71, 16, 'PIAR', '-62.38', '7,92', NULL, NULL, '06  ', 72)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (96, 18, 'RICAURTE', '-68.75', '9,37', NULL, NULL, '06  ', 97)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (110, 7, 'COLINA', '-69.55', '11,44', NULL, NULL, '06  ', 110)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (136, 8, 'JULIÁN MELLADO', '-67.04', '9,36', NULL, NULL, '07  ', 136)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (152, 9, 'TORRES', '-70.05', '10,16', NULL, NULL, '08  ', 152)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (42, 4, 'LIBERTADOR', '-67.61', '10,2', NULL, NULL, '07  ', 43)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (60, 5, 'EZEQUIEL ZAMORA', '-71.16', '7,79', NULL, NULL, '07  ', 61)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (72, 16, 'RAÚL LEONI', '-64.05', '5,61', NULL, NULL, '07  ', 73)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (83, 17, 'LOS GUAYOS', '-67.88', '10,11', NULL, NULL, '07  ', 84)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (97, 18, 'RÓMULO GALLEGOS', '-68.55', '9,45', NULL, NULL, '07  ', 98)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (111, 7, 'DABAJURO', '-70.53', '10,69', NULL, NULL, '07  ', 111)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (43, 4, 'MARIO BRICEÑO IRAGORRY', '-67.77', '10,44', NULL, NULL, '08  ', 44)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (61, 5, 'OBISPOS', '-70.04', '8,61', NULL, NULL, '08  ', 62)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (73, 16, 'ROSCIO', '-61.94', '7,77', NULL, NULL, '08  ', 74)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (84, 17, 'MIRANDA', '-68.39', '10,14', NULL, NULL, '08  ', 85)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (98, 18, 'SAN CARLOS', '-68.58', '9,65', NULL, NULL, '08  ', 99)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (112, 7, 'DEMOCRACIA', '-70.23', '10,76', NULL, NULL, '08  ', 112)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (137, 8, 'FRANCISCO DE MIRANDA', '-67.4', '8,9', NULL, NULL, '08  ', 137)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (44, 4, 'SAN CASIMIRO', '-66.95', '9,96', NULL, NULL, '09  ', 45)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (62, 5, 'PEDRAZA', '-70.35', '8,29', NULL, NULL, '09  ', 63)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (75, 16, 'SUCRE', '-65.01', '5,55', NULL, NULL, '10  ', 76)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (85, 17, 'MONTALBÁN', '-68.3', '10,2', NULL, NULL, '09  ', 86)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (99, 18, 'TINACO', '-68.34', '9,44', NULL, NULL, '09  ', 100)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (114, 7, 'FEDERACIÓN', '-69.76', '10,8', NULL, NULL, '10  ', 114)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (138, 8, 'JOSÉ TADEO MONAGAS', '-66.36', '9,84', NULL, NULL, '09  ', 138)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (153, 9, 'URDANETA', '-69.58', '10,59', NULL, NULL, '09  ', 153)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (45, 4, 'SAN SEBASTIÁN', '-67.09', '9,96', NULL, NULL, '10  ', 46)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (63, 5, 'ROJAS', '-69.65', '8,54', NULL, NULL, '10  ', 64)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (86, 17, 'NAGUANAGUA', '-68.15', '10,23', NULL, NULL, '10  ', 87)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (101, 19, 'CASACOIMA', '-62.33', '8,62', NULL, NULL, '02  ', 102)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (113, 7, 'FALCÓN', '-70.01', '12,06', NULL, NULL, '09  ', 113)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (139, 8, 'ORTIZ', '-67.53', '9,67', NULL, NULL, '10  ', 139)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (154, 10, 'ALBERTO ADRIANI', '-71.63', '8,61', NULL, NULL, '01  ', 154)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (36, 4, 'BOLÍVAR', '-67.28', '10,33', NULL, NULL, '01  ', 37)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (47, 4, 'SANTOS MICHELENA', '-67.47', '10,33', NULL, NULL, '12  ', 48)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (48, 4, 'SUCRE', '-67.6', '10,19', NULL, NULL, '13  ', 49)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (49, 4, 'TOVAR', '-67.37', '10,45', NULL, NULL, '14  ', 50)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (50, 4, 'URDANETA', '-66.73', '9,53', NULL, NULL, '15  ', 51)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (51, 4, 'ZAMORA', '-67.47', '10,33', NULL, NULL, '16  ', 52)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (52, 4, 'FRANCISCO LINARES ALCÁNTARA', '-67.47', '10,33', NULL, NULL, '17  ', 53)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (54, 5, 'ALBERTO ARVELO TORREALBA', '-69.84', '8,7', NULL, NULL, '01  ', 55)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (64, 5, 'SOSA', '-69.15', '8,16', NULL, NULL, '11  ', 65)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (66, 16, 'CARONÍ', '-62.9', '8,16', NULL, NULL, '01  ', 67)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (76, 16, 'PADRE PEDRO CHIEN', '-61.8', '8,38', NULL, NULL, '11  ', 77)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (77, 17, 'BEJUMA', '-68.27', '10,28', NULL, NULL, '01  ', 78)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (87, 17, 'PUERTO CABELLO', '-67.99', '10,37', NULL, NULL, '11  ', 88)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (88, 17, 'SAN DIEGO', '-68.39', '10,14', NULL, NULL, '12  ', 89)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (89, 17, 'SAN JOAQUÍN', '-67.78', '10,26', NULL, NULL, '13  ', 90)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (90, 17, 'VALENCIA', '-68', '10,17', NULL, NULL, '14  ', 91)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (92, 18, 'FALCÓN', '-68.3', '9,9', NULL, NULL, '02  ', 93)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (115, 7, 'JACURA', '-68.89', '10,94', NULL, NULL, '11  ', 115)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (116, 7, 'LOS TAQUES', '-70.22', '11,94', NULL, NULL, '12  ', 116)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (118, 7, 'MIRANDA', '-69.9', '11,37', NULL, NULL, '14  ', 118)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (119, 7, 'MONSEÑOR ITURRIZA', '-68.3', '10,93', NULL, NULL, '15  ', 119)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (120, 7, 'PALMASOLA', '-68.39', '10,69', NULL, NULL, '16  ', 120)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (121, 7, 'PETIT', '-69.5', '11,08', NULL, NULL, '17  ', 121)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (122, 7, 'PÍRITU', '-69.1', '11,4', NULL, NULL, '18  ', 122)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (123, 7, 'SAN FRANCISCO', '-68.77', '11,19', NULL, NULL, '19  ', 123)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (124, 7, 'SILVA', '-68.32', '10,77', NULL, NULL, '20  ', 124)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (126, 7, 'TOCÓPERO', '-69.27', '11,52', NULL, NULL, '22  ', 126)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (127, 7, 'UNIÓN', '-69.31', '10,78', NULL, NULL, '23  ', 127)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (128, 7, 'URUMACO', '-70.26', '11,18', NULL, NULL, '24  ', 128)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (129, 7, 'ZAMORA', '-69.68', '11,42', NULL, NULL, '25  ', 129)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (130, 8, 'CAMAGUÁN', '-67.48', '8,28', NULL, NULL, '01  ', 130)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (141, 8, 'JUAN GERMÁN ROSCIO', '-67.33', '9,88', NULL, NULL, '12  ', 141)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (142, 8, 'SAN JOSÉ DE GUARIBE', '-65.73', '9,76', NULL, NULL, '13  ', 142)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (143, 8, 'SANTA MARÍA DE IPIRE', '-65.23', '8,59', NULL, NULL, '14  ', 143)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (144, 8, 'PEDRO ZARAZA', '-65.29', '9,31', NULL, NULL, '15  ', 144)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (145, 9, 'ANDRÉS ELOY BLANCO', '-69.45', '9,65', NULL, NULL, '01  ', 145)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (5, 2, 'MAROA', '-67.28', '2,87', NULL, NULL, '05  ', 6)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (199, 20, 'AGUASAY', '-63.83', '9,36', NULL, NULL, '02  ', 199)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (180, 11, 'BRIÓN', '-66.1', '10,47', NULL, NULL, '04  ', 180)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (237, 22, 'ANDRÉS MATA', '-63.33', '10,49', NULL, NULL, '02  ', 237)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (252, 13, 'ANTONIO RÓMULO COSTA', '-72.13', '8,17', NULL, NULL, '02  ', 252)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (240, 22, 'BERMÚDEZ', '-63.24', '10,66', NULL, NULL, '05  ', 240)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (225, 12, 'GUANARE', '-69.74', '9,03', NULL, NULL, '04  ', 225)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (254, 13, 'BOLÍVAR', '-72.44', '7,8', NULL, NULL, '04  ', 254)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (214, 21, 'GARCÍA', '-63.91', '10,93', NULL, NULL, '04  ', 214)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (201, 20, 'CARIPE', '-63.5', '10,16', NULL, NULL, '04  ', 201)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (159, 10, 'CAMPO ELÍAS', '-71.22', '8,54', NULL, NULL, '06  ', 159)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (181, 11, 'BUROZ', '-66.14', '10,39', NULL, NULL, '05  ', 181)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (202, 20, 'CEDEÑO', '-63.86', '9,9', NULL, NULL, '05  ', 202)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (215, 21, 'GÓMEZ', '-63.92', '11,09', NULL, NULL, '05  ', 215)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (226, 12, 'GUANARITO', '-68.82', '8,39', NULL, NULL, '05  ', 226)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (256, 13, 'CÓRDOBA', '-72.27', '7,63', NULL, NULL, '06  ', 256)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (182, 11, 'CARRIZAL', '-66.96', '10,37', NULL, NULL, '06  ', 182)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (204, 20, 'LIBERTADOR', '-62.59', '9,01', NULL, NULL, '07  ', 204)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (157, 10, 'ARICAGUA', '-71.14', '8,21', NULL, NULL, '04  ', 157)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (216, 21, 'MANEIRO', '-63.79', '10,98', NULL, NULL, '06  ', 216)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (228, 12, 'OSPINO', '-69.46', '9,29', NULL, NULL, '07  ', 228)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (241, 22, 'BOLÍVAR', '-64.02', '10,36', NULL, NULL, '06  ', 241)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (20, 1, 'PEDRO MARÍA FREITES', '-64.36', '9,29', NULL, NULL, '13  ', 21)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (160, 10, 'CARACCIOLO PARRA OLMEDO', '-71.26', '8,9', NULL, NULL, '07  ', 160)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (183, 11, 'CHACAO', '-66.81', '10,49', NULL, NULL, '07  ', 183)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (217, 21, 'MARCANO', '-63.94', '11,06', NULL, NULL, '07  ', 217)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (242, 22, 'CAJIGAL', '-62.82', '10,56', NULL, NULL, '07  ', 242)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (257, 13, 'FERNÁNDEZ FEO', '-71.91', '7,49', NULL, NULL, '07  ', 257)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (161, 10, 'CARDENAL QUINTERO', '-70.69', '8,87', NULL, NULL, '08  ', 161)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (184, 11, 'CRISTÓBAL ROJAS', '-66.85', '10,24', NULL, NULL, '08  ', 184)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (205, 20, 'MATURÍN', '-63.18', '9,73', NULL, NULL, '08  ', 205)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (218, 21, 'MARIÑO', '-63.82', '10,96', NULL, NULL, '08  ', 218)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (229, 12, 'PÁEZ', '-69.21', '9,55', NULL, NULL, '08  ', 229)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (243, 22, 'CRUZ SALMERÓN ACOSTA', '-64.09', '10,6', NULL, NULL, '08  ', 243)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (258, 13, 'FRANCISCO DE MIRANDA', '-71.95', '8,32', NULL, NULL, '08  ', 258)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (162, 10, 'GUARAQUE', '-71.74', '8,16', NULL, NULL, '09  ', 162)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (185, 11, 'EL HATILLO', '-66.82', '10,42', NULL, NULL, '09  ', 185)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (206, 20, 'PIAR', '-63.49', '9,97', NULL, NULL, '09  ', 206)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (219, 21, 'PENÍNSULA DE MACANAO', '-64.34', '11', NULL, NULL, '09  ', 219)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (230, 12, 'PAPELÓN', '-69.16', '8,84', NULL, NULL, '09  ', 230)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (244, 22, 'LIBERTADOR', '-62.99', '10,52', NULL, NULL, '09  ', 244)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (259, 13, 'GARCÍA DE HEVIA', '-72.24', '8,21', NULL, NULL, '09  ', 259)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (163, 10, 'JULIO CÉSAR SALAS', '-70.88', '9,19', NULL, NULL, '10  ', 163)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (187, 11, 'INDEPENDENCIA', '-66.66', '10,23', NULL, NULL, '11  ', 187)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (207, 20, 'PUNCERES', '-63.18', '10,03', NULL, NULL, '10  ', 207)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (220, 21, 'TUBORES', '-64.08', '10,95', NULL, NULL, '10  ', 220)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (231, 12, 'SAN GENARO DE BOCONOITO', '-69.97', '8,84', NULL, NULL, '10  ', 231)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (245, 22, 'MARIÑO', '-62.57', '10,56', NULL, NULL, '10  ', 245)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (260, 13, 'GUÁSIMOS', '-72.23', '7,84', NULL, NULL, '10  ', 260)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (156, 10, 'ANTONIO PINTO SALINAS', '-71.63', '8,39', NULL, NULL, '03  ', 156)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (1, 2, 'ALTO ORINOCO', '-64.92', '3,2', NULL, NULL, '01  ', 4)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (46, 4, 'SANTIAGO MARIÑO', '-67.45', '10,45', NULL, NULL, '11  ', 47)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (53, 4, 'OCUMARE DE LA COSTA DE ORO', '-67.47', '10,33', NULL, NULL, '18  ', 54)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (65, 5, 'ANDRÉS ELOY BLANCO', '-70.25', '8,6', NULL, NULL, '12  ', 66)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (74, 16, 'SIFONTES', '-61.04', '7,68', NULL, NULL, '09  ', 75)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (164, 10, 'JUSTO BRICEÑO', '-70.94', '9,04', NULL, NULL, '11  ', 164)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (165, 10, 'LIBERTADOR', '-71.14', '8,57', NULL, NULL, '12  ', 165)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (166, 10, 'MIRANDA', '-70.83', '9,08', NULL, NULL, '13  ', 166)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (168, 10, 'PADRE NOGUERA', '-71.45', '7,76', NULL, NULL, '15  ', 168)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (169, 10, 'PUEBLO LLANO', '-70.64', '8,91', NULL, NULL, '16  ', 169)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (170, 10, 'RANGEL', '-70.92', '8,75', NULL, NULL, '17  ', 170)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (171, 10, 'RIVAS DÁVILA', '-71.83', '8,27', NULL, NULL, '18  ', 171)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (172, 10, 'SANTOS MARQUINA', '-71.07', '8,63', NULL, NULL, '19  ', 172)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (173, 10, 'SUCRE', '-71.42', '8,52', NULL, NULL, '20  ', 173)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (174, 10, 'TOVAR', '-71.75', '8,33', NULL, NULL, '21  ', 174)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (176, 10, 'ZEA', '-71.77', '8,37', NULL, NULL, '23  ', 176)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (177, 11, 'ACEVEDO', '-66.29', '10,39', NULL, NULL, '01  ', 177)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (188, 11, 'LANDER', '-66.78', '10,11', NULL, NULL, '12  ', 188)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (189, 11, 'LOS SALIAS', '-67.01', '10,36', NULL, NULL, '13  ', 189)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (190, 11, 'PÁEZ', '-65.99', '10,3', NULL, NULL, '14  ', 190)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (191, 11, 'PAZ CASTILLO', '-66.66', '10,29', NULL, NULL, '15  ', 191)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (192, 11, 'PEDRO GUAL', '-65.54', '10,1', NULL, NULL, '16  ', 192)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (193, 11, 'PLAZA', '-66.58', '10,49', NULL, NULL, '17  ', 193)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (195, 11, 'SUCRE', '-66.65', '10,5', NULL, NULL, '19  ', 195)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (196, 11, 'URDANETA', '-66.87', '10,12', NULL, NULL, '20  ', 196)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (197, 11, 'ZAMORA', '-66.54', '10,47', NULL, NULL, '21  ', 197)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (198, 20, 'ACOSTA', '-63.97', '10,11', NULL, NULL, '01  ', 198)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (208, 20, 'SANTA BÁRBARA', '-63.61', '9,61', NULL, NULL, '11  ', 208)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (209, 20, 'SOTILLO', '-62.38', '8,67', NULL, NULL, '12  ', 209)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (210, 20, 'URACOA', '-62.34', '8,96', NULL, NULL, '13  ', 210)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (212, 21, 'ARISMENDI', '-63.85', '11,03', NULL, NULL, '02  ', 212)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (223, 12, 'ARAURE', '-69.28', '9,72', NULL, NULL, '02  ', 223)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (232, 12, 'SAN RAFAEL DE ONOTO', '-68.98', '9,75', NULL, NULL, '11  ', 232)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (233, 12, 'SANTA ROSALÍA', '-68.88', '8,87', NULL, NULL, '12  ', 233)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (234, 12, 'SUCRE', '-70.03', '9,32', NULL, NULL, '13  ', 234)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (235, 12, 'TURÉN', '-69.1', '9,32', NULL, NULL, '14  ', 235)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (236, 22, 'ANDRÉS ELOY BLANCO', '-63.29', '10,29', NULL, NULL, '01  ', 236)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (246, 22, 'MEJÍA', '-63.69', '10,33', NULL, NULL, '11  ', 246)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (247, 22, 'MONTES', '-63.55', '10,48', NULL, NULL, '12  ', 247)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (249, 22, 'SUCRE', '-63.49', '10,47', NULL, NULL, '14  ', 249)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (250, 22, 'VALDEZ', '-62.26', '10,59', NULL, NULL, '15  ', 250)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (251, 13, 'ANDRÉS BELLO', '-72.2', '7,85', NULL, NULL, '01  ', 251)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (261, 13, 'INDEPENDENCIA', '-72.25', '7,87', NULL, NULL, '11  ', 261)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (262, 13, 'JÁUREGUI', '-71.86', '8,33', NULL, NULL, '12  ', 262)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (264, 13, 'JUNÍN', '-72.35', '7,68', NULL, NULL, '14  ', 264)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (316, 24, 'BARALT', '-71.06', '9,86', NULL, NULL, '02  ', 312)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (284, 14, 'CARACHE', '-70.21', '9,63', NULL, NULL, '05  ', 283)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (301, 23, 'BOLÍVAR', '-68.88', '10,43', NULL, NULL, '02  ', 298)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (221, 21, 'VILLALBA', '-63.95', '10,77', NULL, NULL, '11  ', 221)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (104, 6, 'LIBERTADOR', '-66.9', '10,5', NULL, NULL, '01  ', 1)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (100, 19, 'ANTONIO DÍAZ', '-61.23', '8,93', NULL, NULL, '01  ', 101)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (315, 24, 'ALMIRANTE PADILLA', '-71.65', '11', NULL, NULL, '01  ', 311)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (302, 23, 'BRUZUAL', '-68.89', '10,15', NULL, NULL, '03  ', 299)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (317, 24, 'CABIMAS', '-71.46', '10,41', NULL, NULL, '03  ', 313)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (117, 7, 'MAUROA', '-71.01', '10,9', NULL, NULL, '13  ', 117)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (140, 8, 'JOSÉ FÉLIX RIBAS', '-65.68', '9,35', NULL, NULL, '11  ', 140)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (318, 24, 'CATATUMBO', '-72.21', '9,05', NULL, NULL, '04  ', 314)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (133, 8, 'SAN GERÓNIMO DE GUAYABAL', '-66.74', '7,8', NULL, NULL, '04  ', 133)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (303, 23, 'COCOROTE', '-68.78', '10,24', NULL, NULL, '04  ', 300)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (248, 22, 'RIBERO', '-64.15', '10,46', NULL, NULL, '13  ', 248)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (304, 23, 'INDEPENDENCIA', '-68.77', '10,28', NULL, NULL, '05  ', 301)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (319, 24, 'COLÓN', '-71.88', '9,02', NULL, NULL, '05  ', 315)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (91, 18, 'ANZOÁTEGUI', '-68.7', '9,57', NULL, NULL, '01  ', 92)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (167, 10, 'OBISPO RAMOS DE LORA', '-71.4', '8,76', NULL, NULL, '14  ', 167)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (263, 13, 'JOSÉ MARÍA VARGAS', '-72.07', '8,1', NULL, NULL, '13  ', 263)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (305, 23, 'JOSÉ ANTONIO PÁEZ', '-69', '10,06', NULL, NULL, '06  ', 302)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (285, 14, 'ESCUQUE', '-70.67', '9,3', NULL, NULL, '06  ', 281)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (320, 24, 'FRANCISCO JAVIER PULGAR', '-71.61', '8,92', NULL, NULL, '06  ', 316)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (158, 10, 'ARZOBISPO CHACÓN', '-71.33', '8,13', NULL, NULL, '05  ', 158)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (211, 21, 'ANTOLÍN DEL CAMPO', '-63.88', '11,15', NULL, NULL, '01  ', 211)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (239, 22, 'BENÍTEZ', '-63.06', '10,4', NULL, NULL, '04  ', 239)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (306, 23, 'LA TRINIDAD', '-68.81', '10,2', NULL, NULL, '07  ', 303)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (286, 14, 'JOSÉ FELIPE MÁRQUEZ CAÑIZALES', '-70.51', '9,79', NULL, NULL, '07  ', 282)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (321, 24, 'JESÚS ENRIQUE LOSSADA', '-72.22', '10,69', NULL, NULL, '07  ', 317)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (307, 23, 'MANUEL MONGE', '-68.77', '10,66', NULL, NULL, '08  ', 304)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (287, 14, 'JUAN VICENTE CAMPO ELÍAS', '-70.12', '9,37', NULL, NULL, '08  ', 284)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (322, 24, 'JESÚS MARÍA SEMPRÚN', '-72.74', '9,24', NULL, NULL, '08  ', 318)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (288, 14, 'LA CEIBA', '-70.99', '9,48', NULL, NULL, '09  ', 285)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (308, 23, 'NIRGUA', '-68.56', '10,14', NULL, NULL, '09  ', 305)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (323, 24, 'LA CAÑADA DE URDANETA', '-71.9', '10,43', NULL, NULL, '09  ', 319)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (290, 14, 'MONTE CARMELO', '-70.84', '9,17', NULL, NULL, '11  ', 286)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (309, 23, 'PEÑA', '-69.13', '10,06', NULL, NULL, '10  ', 306)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (324, 24, 'LAGUNILLAS', '-71.24', '10,13', NULL, NULL, '10  ', 320)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (81, 17, 'JUAN JOSÉ MORA', '-68.21', '10,36', NULL, NULL, '05  ', 82)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (108, 7, 'CACIQUE MANAURE', '-68.57', '10,88', NULL, NULL, '04  ', 108)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (125, 7, 'SUCRE', '-69.91', '11,18', NULL, NULL, '21  ', 125)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (132, 8, 'EL SOCORRO', '-65.61', '9', NULL, NULL, '03  ', 132)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (150, 9, 'PALAVECINO', '-69.24', '10', NULL, NULL, '06  ', 150)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (175, 10, 'TULIO FEBRES CORDERO', '-71.06', '9,12', NULL, NULL, '22  ', 175)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (186, 11, 'GUAICAIPURO', '-67.03', '10,34', NULL, NULL, '10  ', 186)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (194, 11, 'SIMÓN BOLÍVAR', '-66.74', '10,18', NULL, NULL, '18  ', 194)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (203, 20, 'EZEQUIEL ZAMORA', '-63.95', '9,61', NULL, NULL, '06  ', 203)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (222, 12, 'AGUA BLANCA', '-69.1', '9,72', NULL, NULL, '01  ', 222)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (227, 12, 'MONSEÑOR JOSÉ VICENTE DE UNDA', '-69.9', '9,55', NULL, NULL, '06  ', 227)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (255, 13, 'CÁRDENAS', '-72.22', '7,81', NULL, NULL, '05  ', 255)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (265, 13, 'LIBERTAD', '-72.39', '7,81', NULL, NULL, '15  ', 265)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (266, 13, 'LIBERTADOR', '-71.51', '7,61', NULL, NULL, '16  ', 266)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (267, 13, 'LOBATERA', '-72.24', '7,93', NULL, NULL, '17  ', 267)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (268, 13, 'MICHELENA', '-72.24', '7,95', NULL, NULL, '18  ', 268)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (269, 13, 'PANAMERICANO', '-72.05', '8,52', NULL, NULL, '19  ', 269)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (270, 13, 'PEDRO MARÍA UREÑA', '-72.32', '7,88', NULL, NULL, '20  ', 270)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (271, 13, 'RAFAEL URDANETA', '-72.42', '7,49', NULL, NULL, '21  ', 271)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (272, 13, 'SAMUEL DARÍO MALDONADO', '-71.86', '8,54', NULL, NULL, '22  ', 272)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (273, 13, 'SAN CRISTÓBAL', '-72.21', '7,76', NULL, NULL, '23  ', 273)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (274, 13, 'SEBORUCO', '-72.06', '8,13', NULL, NULL, '24  ', 274)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (275, 13, 'SIMÓN RODRÍGUEZ', '-71.8', '8,42', NULL, NULL, '25  ', 275)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (276, 13, 'SUCRE', '-72.02', '7,91', NULL, NULL, '26  ', 276)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (277, 13, 'TORBES', '-72.16', '7,55', NULL, NULL, '27  ', 277)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (278, 13, 'URIBANTE', '-71.6', '7,89', NULL, NULL, '28  ', 278)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (279, 13, 'SAN JUDAS TADEO', '-72.2', '7,792', NULL, NULL, '29  ', 279)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (280, 14, 'ANDRÉS BELLO', '-70.77', '9,56', NULL, NULL, '01  ', 280)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (282, 14, 'BOLÍVAR', '-70.81', '9,38', NULL, NULL, '03  ', 334)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (283, 14, 'CANDELARIA', '-70.34', '9,62', NULL, NULL, '04  ', 335)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (289, 14, 'MIRANDA', '-70.72', '9,48', NULL, NULL, '10  ', 288)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (281, 14, 'BOCONÓ', '-70.26', '9,24', NULL, NULL, '02  ', 333)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (291, 14, 'MOTATÁN', '-70.59', '9,38', NULL, NULL, '12  ', 287)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (292, 14, 'PAMPÁN', '-70.47', '9,44', NULL, NULL, '13  ', 289)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (293, 14, 'PAMPANITO', '-70.51', '9,4', NULL, NULL, '14  ', 290)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (294, 14, 'RAFAEL RANGEL', '-70.73', '9,37', NULL, NULL, '15  ', 291)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (295, 14, 'SAN RAFAEL DE CARVAJAL', '-70.58', '9,35', NULL, NULL, '16  ', 292)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (296, 14, 'SUCRE', '-70.77', '9,43', NULL, NULL, '17  ', 293)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (297, 14, 'TRUJILLO', '-70.43', '9,37', NULL, NULL, '18  ', 294)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (298, 14, 'URDANETA', '-70.61', '9,13', NULL, NULL, '19  ', 296)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (299, 14, 'VALERA', '-70.61', '9,31', NULL, NULL, '20  ', 295)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (300, 23, 'ARÍSTIDES BASTIDAS', '-68.85', '10,24', NULL, NULL, '01  ', 297)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (310, 23, 'SAN FELIPE', '-68.74', '10,33', NULL, NULL, '11  ', 307)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (311, 23, 'SUCRE', '-68.84', '10,27', NULL, NULL, '12  ', 308)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (312, 23, 'URACHICHE', '-69.01', '10,15', NULL, NULL, '13  ', 309)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (313, 23, 'VEROES', '-68.61', '10,44', NULL, NULL, '14  ', 310)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (314, 15, 'VARGAS', '-66.92', '10,58', NULL, NULL, '01  ', 332)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (325, 24, 'MACHIQUES DE PERIJÁ', '-72.53', '10,04', NULL, NULL, '11  ', 321)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (326, 24, 'MARA', '-72.33', '11,01', NULL, NULL, '12  ', 322)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (327, 24, 'MARACAIBO', '-71.61', '10,63', NULL, NULL, '13  ', 323)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (328, 24, 'MIRANDA', '-71.27', '10,85', NULL, NULL, '14  ', 324)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (329, 24, 'PÁEZ', '-72.03', '11,37', NULL, NULL, '15  ', 325)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (330, 24, 'ROSARIO DE PERIJÁ', '-72.32', '10,33', NULL, NULL, '16  ', 326)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (331, 24, 'SAN FRANCISCO', '-71.63', '10,5', NULL, NULL, '17  ', 327)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (332, 24, 'SANTA RITA', '-71.47', '10,5', NULL, NULL, '18  ', 328)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (333, 24, 'SIMÓN BOLÍVAR', '-71.29', '10,18', NULL, NULL, '19  ', 329)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (334, 24, 'SUCRE', '-71.14', '9,14', NULL, NULL, '20  ', 330)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (335, 24, 'VALMORE RODRÍGUEZ', '-71.21', '10,03', NULL, NULL, '21  ', 331)");
    DB::connection('pgsql_common')->statement("INSERT INTO public.municipalities VALUES (999, 99, '',                  '',       '',      NULL, NULL, '', 999)");
    DB::connection('pgsql_common')->statement(
        "UPDATE public.municipalities
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
    );
  }
}









```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/RouteTypesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Modules\Common\Entities\GeoLocation\RouteType;

class RouteTypesTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        RouteType::create(['id' =>  1, 'description' => 'CARRETERA' ]);
        RouteType::create(['id' =>  2, 'description' => 'CALLE'     ]);
        RouteType::create(['id' =>  3, 'description' => 'AVENIDA'   ]);
        RouteType::create(['id' =>  4, 'description' => 'AUTOPISTAS']);        
        RouteType::create(['id' =>  5, 'description' => 'CAÑADA'    ]);
        RouteType::create(['id' =>  6, 'description' => 'CARRIL'    ]);
        RouteType::create(['id' =>  7, 'description' => 'PISTA'     ]);
        RouteType::create(['id' =>  8, 'description' => 'RUTA'      ]);
        RouteType::create(['id' =>  9, 'description' => 'TRAYECTO'  ]);
        RouteType::create(['id' => 10, 'description' => 'PASEO'     ]);
        RouteType::create(['id' => 11, 'description' => 'CAMINO'    ]);
        RouteType::create(['id' => 12, 'description' => 'SENDA'     ]);
        RouteType::create(['id' => 13, 'description' => 'BOULEVAR'  ]);
        RouteType::create(['id' => 14, 'description' => 'CALZADA'   ]);
        RouteType::create(['id' => 15, 'description' => 'CONDUCTO'  ]);
        RouteType::create(['id' => 16, 'description' => 'VÍA'       ]);
        RouteType::create(['id' => 17, 'description' => 'ENTRADA'   ]);
        RouteType::create(['id' => 18, 'description' => 'TRONCAL'   ]);
        RouteType::create(['id' => 19, 'description' => 'ESQUINAS'  ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/ParishesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class ParishesTableSeeder extends Seeder
{
  /**
   * Run the database seeds.
   *
   * @return void
   */
  public function run()
  {
  
  //now()::timestamp(0) without time zone;
  
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (8, 2, 'UCATA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (142, 47, 'LAS TEJERIAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (12, 3, 'ALBERTO GOMEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (9, 2, 'YAPACANA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (6, 2, 'CANAME', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (10, 3, 'FERNANDO GIRON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (15, 4, 'GUAYAPO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (13, 3, 'PARHUEÑA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (14, 3, 'PLATANILLAL', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (11, 3, 'TOVAR LUIS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (18, 4, 'SAMARIAPO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (20, 5, 'COMUNIDAD', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (19, 4, 'SIPAPO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (17, 4, 'MUNDUAPO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (23, 6, 'ALTO VENTUARI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (22, 5, 'VICTORINO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (26, 6, 'SAN JUAN DE MANAPIARE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (62, 20, 'CANTAURA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (25, 6, 'MEDIO VENTUARI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (30, 7, 'SOLANO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (28, 7, 'COCUY', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (29, 7, 'SAN CARLOS DE RIO NEG', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (41, 12, 'PARIAGUAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (27, 7, 'CASIQUIARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (31, 8, 'ANACO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (33, 9, 'ARAGUA DE BARCELONA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (34, 9, 'CACHIPO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (40, 12, 'EL PAO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (36, 10, 'SAN MIGUEL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (37, 10, 'SUCRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (91, 31, 'BRUZUAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (43, 13, 'GUANTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (39, 12, 'BOCA DEL PAO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (44, 14, 'MAMO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (42, 13, 'CHORRERON', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (54, 17, 'UVERITO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (46, 15, 'CM. PUERTO LA CRUZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (47, 15, 'POZUELOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (48, 16, 'ONOTO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (49, 16, 'SAN PABLO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (50, 17, 'MAPIRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (51, 17, 'PIAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (53, 17, 'SAN DIEGO DE CABRUTICA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (55, 17, 'ZUATA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (57, 18, 'SAN MATEO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (65, 20, 'URICA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (56, 18, 'EL CARITO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (59, 19, 'CLARINES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (60, 19, 'GUANAPE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (61, 19, 'SABANA DE UCHIRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (66, 21, 'PIRITU', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (63, 20, 'LIBERTADOR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (69, 23, 'BOCA DE CHAVEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (2, 1, 'HUACHAMACARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (35, 10, 'PUERTO PIRITU', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (92, 31, 'MANTECAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (93, 31, 'QUINTERO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (94, 31, 'RINCON HONDO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (116, 38, 'JOSE CASANOVA GODOY', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (114, 38, 'CHORONI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (119, 38, 'MADRE MARIA DE SAN JOSE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (120, 38, 'PEDRO JOSE OVALLES', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (121, 39, 'JOSE ANGEL LAMAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (117, 38, 'LAS DELICIAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (115, 38, 'JOAQUIN CRESPO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (7, 2, 'SAN FERNANDO DE ATABA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (67, 21, 'SAN FRANCISCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (68, 22, 'SAN JOSE DE GUANIPA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (72, 24, 'SANTA ANA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (75, 25, 'EL CARMEN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (71, 24, 'PUEBLO NUEVO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (74, 25, 'CAIGUA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (76, 25, 'EL PILAR', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (78, 25, 'SAN CRISTOBAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (79, 26, 'EL TIGRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (73, 25, 'BERGANTIN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (82, 28, 'EL MORRO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (80, 27, 'EL CHAPARRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (98, 32, 'GUASDUALITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (83, 28, 'LECHERIAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (81, 27, 'TOMAS ALFARO CALATRAVA', '0', '0', NULL, 'Z', '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (85, 29, 'APURITO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (86, 29, 'EL YAGUAL', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (87, 29, 'GUACHARA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (88, 29, 'MUCURITAS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (90, 30, 'BIRUACA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (97, 32, 'EL AMPARO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (103, 33, 'SAN JUAN DE PAYARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (96, 32, 'ARAMENDI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (99, 32, 'SAN CAMILO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (100, 32, 'URDANETA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (106, 35, 'EL RECREO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (101, 33, 'CODAZZI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (104, 34, 'ELORZA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (105, 34, 'LA TRINIDAD', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (107, 35, 'PEÑALVER', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (113, 38, 'ANDRES ELOY BLANCO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (109, 35, 'SAN RAFAEL DE ATAMAICA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (111, 37, 'CAMATAGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (112, 37, 'CARMEN DE CURA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (110, 36, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (123, 40, 'LAS GUACAMAYAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (127, 41, 'EL CONSEJO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (125, 40, 'PAO DE ZARATE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (126, 40, 'ZUATA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (128, 42, 'PALO NEGRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (130, 43, 'CAÑA DE AZUCAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (129, 42, 'SAN MARTIN DE PORRES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (134, 44, 'SAN CASIMIRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (133, 44, 'OLLAS DE CARAMACATE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (137, 46, 'ALFREDO PACHECO M', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (132, 44, 'GUIRIPA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (135, 44, 'VALLE MORIN', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (122, 40, 'CASTOR NIEVES RIOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (144, 48, 'BELLA VISTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (143, 47, 'TIARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (145, 48, 'CAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (147, 50, 'BARBACOAS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (146, 49, 'COLONIA TOVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (151, 51, 'AUGUSTO MIJARES', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (149, 50, 'SAN FRANCISCO DE CARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (150, 50, 'TAGUAY', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (152, 51, 'MAGDALENO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (21, 5, 'MAROA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (138, 46, 'AREVALO APONTE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (139, 46, 'CHUAO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (140, 46, 'SAMAN DE GUERE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (141, 46, 'TURMERO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (4, 1, 'MARAWAKA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (264, 79, 'AGUAS CALIENTES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (265, 79, 'MARIARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (300, 93, 'SUCRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (222, 67, 'ASCENSION FARRERAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (223, 67, 'CAICARA DEL ORINOCO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (227, 67, 'PIJIGUAOS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (221, 67, 'ALTAGRACIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (226, 67, 'CEDEÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (230, 69, 'SANTA ELENA DE UAIREN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (171, 57, 'BARINAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (163, 55, 'NICOLAS PULIDO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (162, 55, 'ANDRES BELLO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (272, 82, 'U TOCUYITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (261, 78, 'BELEN', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (165, 56, 'ARISMENDI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (166, 56, 'GUADARRAMA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (167, 56, 'LA UNION', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (168, 56, 'SAN ANTONIO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (266, 80, 'CIUDAD ALIANZA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (267, 80, 'GUACARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (229, 69, 'IKABARU', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (238, 70, 'VISTA HERMOSA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (305, 96, 'LIBERTAD DE COJEDES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (301, 94, 'LA AGUADITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (192, 60, 'SANTA BARBARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (185, 58, 'CALDERAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (180, 57, 'SANTA INES', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (176, 57, 'MANUEL P FAJARDO', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (169, 57, 'ALFREDO A LARRIVA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (184, 58, 'BARINITAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (178, 57, 'ROMULO BETANCOURT', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (173, 57, 'DOMINGA ORTIZ P', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (175, 57, 'JUAN A RODRIGUEZ D', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (170, 57, 'ALTO BARINAS', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (177, 57, 'RAMON I MENDEZ', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (181, 57, 'SANTA LUCIA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (182, 57, 'TORUNOS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (174, 57, 'EL CARMEN', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (231, 70, 'AGUA SALADA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (232, 70, 'CATEDRAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (234, 70, 'LA SABANITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (235, 70, 'MARHUANTA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (237, 70, 'PANAPANA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (240, 71, 'ANDRES ELOY BLANCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (236, 70, 'ORINOCO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (239, 70, 'ZEA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (280, 87, 'FRATERNIDAD', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (303, 95, 'EL PAO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (186, 59, 'BARRANCAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (187, 59, 'EL SOCORRO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (188, 59, 'MASPARRITO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (241, 71, 'PEDRO COVA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (243, 72, 'BARCELONETA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (304, 96, 'EL AMPARO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (191, 60, 'RAMON IGNACIO MENDEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (193, 61, 'EL REAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (189, 60, 'JOSE IGNACIO DEL PUMAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (247, 73, 'GUASIPATI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (244, 72, 'RAUL LEÓN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (245, 72, 'SAN FRANCISCO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (246, 72, 'SANTA BARBARA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (273, 83, 'U LOS GUAYOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (196, 61, 'OBISPOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (210, 65, 'SANTA CRUZ DE GUACAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (195, 61, 'LOS GUASIMITOS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (249, 74, 'DALLA COSTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (248, 73, 'SALOM', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (274, 84, 'MIRANDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (198, 62, 'IGNACIO BRICEÑO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (199, 62, 'JOSE FELIX RIBAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (200, 62, 'PAEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (253, 75, 'GUARATARO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (256, 75, 'MOITACO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (262, 78, 'GUIGUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (255, 75, 'MARIPA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (275, 85, 'MONTALBAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (202, 63, 'DOLORES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (216, 66, 'SIMON BOLIVAR', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (276, 86, 'NAGUANAGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (154, 51, 'VALLES DE TUCUTUNEMO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (156, 52, 'FRANCISCO DE MIRANDA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (157, 52, 'MONS FELICIANO G', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (158, 52, 'SANTA RITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (161, 54, 'SABANETA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (164, 55, 'TICOPORO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (160, 54, 'RODRIGUEZ DOMINGUEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (205, 64, 'EL REGALO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (206, 64, 'PUERTO DE NUTRIAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (207, 64, 'SANTA CATALINA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (211, 66, 'CACHAMAY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (212, 66, 'CHIRICA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (213, 66, 'DALLA COSTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (225, 67, 'LA URBANA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (217, 66, 'UNARE', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (218, 66, 'UNIVERSIDAD', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (219, 66, 'VISTA AL SOL', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (215, 66, 'POZO VERDE', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (220, 66, 'YOCOIMA', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (258, 77, 'BEJUMA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (259, 77, 'CANOABO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (260, 77, 'SIMON BOLIVAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (277, 87, 'BARTOLOME SALOM', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (281, 87, 'GOAIGOAZA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (278, 87, 'BORBURATA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (282, 87, 'JUAN JOSE FLORES', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (284, 87, 'UNION', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (293, 90, 'SAN BLAS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (283, 87, 'PATANEMO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (286, 89, 'SAN JOAQUIN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (287, 90, 'CANDELARIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (288, 90, 'CATEDRAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (289, 90, 'EL SOCORRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (290, 90, 'MIGUEL PEÑA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (302, 94, 'MACAPO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (294, 90, 'SAN JOSE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (295, 90, 'SANTA ROSA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (291, 90, 'NEGRO PRIMERO', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (298, 92, 'TINAQUILLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (159, 53, 'OCUMARE DE LA COSTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (208, 65, 'EL CANTON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (201, 63, 'LIBERTAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (250, 74, 'SAN ISIDRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (251, 74, 'TUMEREMO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (252, 75, 'ARIPAO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (296, 91, 'COJEDES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (269, 81, 'MORON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (270, 81, 'URAMA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (155, 51, 'VILLA DE CURA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (329, 103, 'SAN JOSE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (362, 107, 'BOROJO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (367, 108, 'YARACAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (364, 107, 'GUAJIRO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (365, 107, 'SEQUE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (366, 107, 'ZAZARIDA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (309, 98, 'SAN CARLOS DE AUSTRIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (445, 135, 'CABRUTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (439, 131, 'CHAGUARAMAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (359, 106, 'LA PEÑA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (361, 107, 'BARIRO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (358, 106, 'ARACUA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (444, 134, 'VALLE DE LA PASCUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (446, 135, 'LAS MERCEDES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (368, 109, 'CARIRUBANA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (369, 109, 'NORTE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (371, 109, 'SANTA ANA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (325, 103, 'JUAN MILLAN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (326, 103, 'LEONARDO RUIZ PINEDA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (328, 103, 'MONS. ARGIMIRO GARCIA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (354, 105, 'CAPADARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (324, 103, 'JOSE VIDAL MARCANO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (330, 103, 'SAN RAFAEL', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (331, 103, 'VIRGEN DEL VALLE', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (355, 105, 'LA PASTORA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (356, 105, 'LIBERTADOR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (360, 106, 'SAN LUIS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (373, 110, 'GUAIBACOA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (380, 112, 'PEDREGAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (372, 110, 'ACURIGUA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (375, 110, 'LAS CALDERAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (376, 110, 'MACORUCA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (448, 136, 'EL SOMBRERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (449, 136, 'SOSA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (377, 111, 'DABAJURO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (308, 98, 'MANUEL MANRIQUE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (311, 100, 'ALMIRANTE LUIS BRION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (307, 98, 'JUAN ANGEL BRAVO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (379, 112, 'AVARIA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (390, 113, 'MORUY', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (378, 112, 'AGUA CLARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (382, 112, 'PURURECHE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (450, 137, 'CALABOZO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (451, 137, 'EL CALVARIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (452, 137, 'EL RASTRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (453, 137, 'GUARDATINAJAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (347, 104, 'SAN BERNARDINO', '0', '0', NULL, NULL, '15  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (350, 104, 'SAN PEDRO', '0', '0', NULL, NULL, '18  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (394, 114, 'EL PAUJI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (395, 114, 'INDEPENDENCIA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (396, 114, 'MAPARARI', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (454, 138, 'ALTAGRACIA DE ORITUCO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (455, 138, 'LEZAMA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (457, 138, 'PASO REAL DE MACAIRA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (458, 138, 'SAN FCO DE MACAIRA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (318, 101, 'IMATACA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (323, 102, 'PEDERNALES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (319, 101, 'JUAN BAUTISTA ARISMEN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (320, 101, 'MANUEL PIAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (321, 101, 'ROMULO GALLEGOS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (387, 113, 'EL HATO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (385, 113, 'BARAIVED', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (386, 113, 'BUENA VISTA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (388, 113, 'EL VINCULO', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (391, 113, 'PUEBLO NUEVO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (383, 113, 'ADAURE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (399, 115, 'JACURA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (400, 116, 'JUDIBANA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (398, 115, 'ARAURIMA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (402, 117, 'CASIGUA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (406, 118, 'MITARE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (407, 118, 'RIO SECO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (408, 118, 'SABANETA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (412, 119, 'BOCA DE TOCUYO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (411, 118, 'SANTA ANA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (405, 118, 'GUZMAN GUILLERMO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (413, 119, 'CHICHIRIVICHE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (421, 123, 'SAN FRANCISCO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (414, 119, 'TOCUYO DE LA COSTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (415, 120, 'PALMA SOLA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (416, 121, 'CABURE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (417, 121, 'COLINA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (419, 122, 'PIRITU', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (420, 122, 'SAN JOSE DE LA COSTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (422, 124, 'BOCA DE AROA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (423, 124, 'TUCACAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (425, 125, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (429, 127, 'STA.CRUZ DE BUCARAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (427, 127, 'EL CHARAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (430, 128, 'BRUZUAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (431, 128, 'URUMACO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (435, 129, 'ZAZARIDA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (434, 129, 'PUEBLO CUMAREBO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (433, 129, 'LA SOLEDAD', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (442, 133, 'SAN GERONIMO DE GUAYABAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (436, 130, 'CAMAGUAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (438, 130, 'UVERITO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (333, 104, 'ALTAGRACIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (334, 104, 'ANTIMANO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (335, 104, 'CANDELARIA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (336, 104, 'CARICUAO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (338, 104, 'COCHE', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (339, 104, 'EL JUNQUITO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (340, 104, 'EL PARAISO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (341, 104, 'EL RECREO', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (342, 104, 'EL VALLE', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (343, 104, 'LA PASTORA', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (345, 104, 'MACARAO', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (346, 104, 'SAN AGUSTIN', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (392, 114, 'AGUA LARGA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (348, 104, 'SAN JOSE', '0', '0', NULL, NULL, '16  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (393, 114, 'CHURUGUARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (351, 104, 'SANTA ROSALIA', '0', '0', NULL, NULL, '19  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (352, 104, 'SANTA TERESA', '0', '0', NULL, NULL, '20  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (353, 104, 'SUCRE', '0', '0', NULL, NULL, '21  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (397, 115, 'AGUA LINDA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (312, 100, 'ANICETO LUGO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (317, 101, '5 DE JULIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (314, 100, 'MANUEL RENAUD', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (315, 100, 'PADRE BARRAL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (316, 100, 'SANTOS DE ABELGAS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (403, 117, 'MENE DE MAUROA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (409, 118, 'SAN ANTONIO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (443, 134, 'ESPINO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (441, 133, 'CAZORLA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (374, 110, 'LA VELA DE CORO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (428, 127, 'LAS VEGAS DEL TUY', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (424, 125, 'PECAYA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (332, 104, '23 DE ENERO', '0', '0', NULL, NULL, '22  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (486, 147, 'JUAREZ', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (487, 147, 'LA CONCEPCION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (488, 147, 'SANTA ROSA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (495, 148, 'JUAN B RODRIGUEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (485, 147, 'JUAN DE VILLEGAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (489, 147, 'TAMACA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (490, 147, 'UNION', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (482, 147, 'BUENA VISTA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (492, 148, 'CUARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (493, 148, 'DIEGO DE LOZADA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (500, 149, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (496, 148, 'PARAISO DE SAN JOSE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (497, 148, 'SAN MIGUEL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (494, 148, 'JOSE BERNARDO DURANTE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (511, 151, 'GUSTAVO VEGAS LEON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (528, 152, 'TRINIDAD SAMUEL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (510, 151, 'BURIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (479, 146, 'FREITEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (480, 146, 'JOSE MARIA BLANCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (542, 156, 'MESA DE LAS PALMAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (508, 150, 'CABUDARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (501, 149, 'GUARICO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (502, 149, 'HILARIO LUNA Y LUNA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (503, 149, 'HUMOCARO ALTO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (505, 149, 'LA CANDELARIA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (506, 149, 'MORAN', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (531, 153, 'SIQUISIQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (514, 152, 'ANTONIO DIAZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (515, 152, 'CAMACARO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (516, 152, 'CASTAÑEDA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (518, 152, 'CHIQUINQUIRA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (519, 152, 'EL BLANCO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (520, 152, 'ESPINOZA LOS MONTEROS', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (527, 152, 'REYES VARCAS TORRES', '0', '0', NULL, NULL, '16  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (523, 152, 'LAS MERCEDES', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (524, 152, 'MANUEL MORILLO', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (526, 152, 'MONTES DE OCA', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (521, 152, 'HERIBERTO ARROYO', '0', '0', NULL, NULL, '15  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (513, 152, 'ALTAGRACIA', '0', '0', NULL, NULL, '17  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (522, 152, 'LARA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (464, 139, 'SAN FCO. DE TIZNADOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (465, 139, 'SAN JOSE DE TIZNADOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (460, 138, 'SAN RAFAEL DE ORITUCO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (536, 154, 'PRESIDENTE BETANCOURT', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (530, 153, 'SAN MIGUEL', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (532, 153, 'XAGUAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (462, 139, 'ORTIZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (466, 140, 'SAN RAFAEL DE LAYA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (467, 140, 'TUCUPIDO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (534, 154, 'HECTOR AMABLE MORA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (535, 154, 'JOSE NUCETE SARDI', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (540, 155, 'ANDRÉS BELLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (537, 154, 'PRESIDENTE PAEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (538, 154, 'PTE. ROMULO GALLEGOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (533, 154, 'GABRIEL PICON G.', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (539, 154, 'PULIDO MENDEZ', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (472, 143, 'ALTAMIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (469, 141, 'PARAPARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (471, 142, 'SAN JOSE DE GUARIBE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (474, 144, 'SAN JOSE DE UNARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (475, 144, 'ZARAZA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (483, 147, 'CATEDRAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (476, 145, 'PIO TAMAYO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (477, 145, 'QBDA. HONDA DE GUACHE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (478, 145, 'YACAMBU', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (555, 159, 'JAJI', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (557, 159, 'MATRIZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (563, 161, 'CAPITAL CARDENAL QUINTERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (558, 159, 'MONTALBAN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (553, 159, 'ACEQUIAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (559, 159, 'SAN JOSE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (544, 157, 'ARICAGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (545, 157, 'SAN ANTONIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (561, 160, 'CAPITAL CARACCIOLO PARRA OLMEDO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (567, 163, 'CAPITAL JULIO CESAR SALAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (562, 161, 'LAS PIEDRAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (564, 162, 'GUARAQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (565, 162, 'MESA DE QUINTERO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (566, 162, 'RIO NEGRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (569, 164, 'SAN CRISTOBAL DE TORONDOY', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (551, 158, 'MUCUCHACHI', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (543, 156, 'CAPITAL PINO SALINAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (541, 156, 'MESA BOLIVAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (570, 164, 'CAPITAL JUSTO BRICEÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (577, 165, 'GONZALO PICON FEBRES', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (572, 165, 'ARIAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (573, 165, 'CARACCIOLO PARRA P', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (574, 165, 'DOMINGO PEÑA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (575, 165, 'EL LLANO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (581, 165, 'LOS NEVADOS', '0', '0', NULL, NULL, '15  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (578, 165, 'JACINTO PLAZA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (580, 165, 'LASSO DE LA VEGA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (582, 165, 'MARIANO PICON SALAS', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (587, 166, 'LA VENTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (583, 165, 'MILLA', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (584, 165, 'OSUNA RODRIGUEZ', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (585, 165, 'SAGRARIO', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (576, 165, 'EL MORRO', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (588, 166, 'PIÑANGO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (593, 168, 'PADRE NOGUERA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (589, 166, 'CAPITAL MIRANDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (595, 170, 'CACUTE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (594, 169, 'PUEBLO LLANO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (599, 170, 'SAN RAFAEL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (600, 171, 'CAPITAL RIVAS DÁVILA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (598, 170, 'MUCURUBA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (597, 170, 'CAPITAL RANGEL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (602, 172, 'SANTOS MARQUINA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (601, 171, 'GERONIMO MALDONADO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (604, 173, 'ESTANQUES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (606, 173, 'LA TRAMPA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (605, 173, 'CAPITAL SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (607, 173, 'PUEBLO NUEVO DEL SUR', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (470, 141, 'SAN JUAN DE LOS MORROS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (507, 150, 'AGUA VIVA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (591, 167, 'SAN RAFAEL DE ALCAZAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (554, 159, 'FERNANDEZ PEÑA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (547, 158, 'CAPURI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (548, 158, 'CHACANTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (549, 158, 'EL MOLINO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (552, 158, 'MUCUTUY', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (546, 158, 'CAPITAL ARZOBISPO CHACON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (512, 151, 'SARARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (461, 138, 'SOUBLETTE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (633, 180, 'HIGUEROTE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (629, 179, 'BARUTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (630, 179, 'EL CAFETAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (631, 179, 'LAS MINAS DE BARUTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (684, 202, 'AREO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (720, 213, 'ZABALA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (745, 225, 'GUANARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (743, 224, 'UVERAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (676, 199, 'AGUASAY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (644, 186, 'LOS TEQUES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (632, 180, 'CURIEPE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (749, 226, 'DIVINA PASTORA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (744, 225, 'CORDOBA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (746, 225, 'SAN JOSE DE LA MONTAÑA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (748, 225, 'VIRGEN DE LA COROMOTO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (722, 214, 'CAPITAL GARCIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (721, 214, 'FRANCISCO FAJARDO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (678, 201, 'CARIPE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (679, 201, 'EL GUACHARO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (680, 201, 'LA GUANOTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (681, 201, 'SABANA DE PIEDRA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (683, 201, 'TERESEN', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (635, 181, 'MAMPORAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (686, 202, 'SAN FELIX', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (685, 202, 'CAPITAL CEDEÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (689, 203, 'CAPITAL EZEQUIEL ZAMORA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (724, 215, 'GUEVARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (725, 215, 'MATASIETE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (728, 216, 'AGUIRRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (726, 215, 'CAPITAL GÓMEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (727, 215, 'SUCRE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (751, 226, 'TRINIDAD DE LA CAPILLA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (753, 227, 'PEÑAS BLANCA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (636, 182, 'CARRIZAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (691, 204, 'LAS ALHUACAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (692, 204, 'TABASCA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (695, 205, 'BOQUERON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (729, 216, 'CAPITAL MANEIRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (731, 217, 'CAPITAL MARCANO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (755, 228, 'LA ESTACION', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (757, 229, 'CAPITAL PÁEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (754, 228, 'APARICION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (637, 183, 'CHACAO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (732, 218, 'MARIÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (638, 184, 'CHARALLAVE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (639, 184, 'LAS BRISAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (696, 205, 'EL COROZO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (697, 205, 'EL FURRIAL', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (700, 205, 'LAS COCUIZAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (699, 205, 'LA PICA', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (703, 205, 'SAN VICENTE', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (701, 205, 'SAN SIMON', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (698, 205, 'JUSEPIN', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (705, 206, 'CAPITAL PIAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (733, 219, 'CAPITAL PENINSULA DE MACANAO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (758, 229, 'PAYARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (759, 229, 'PIMPINELA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (640, 185, 'EL HATILLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (711, 207, 'CACHIPO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (704, 206, 'APARICIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (706, 206, 'CHAGUARAMAL', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (707, 206, 'EL PINTO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (708, 206, 'GUANAGUANA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (709, 206, 'LA TOSCANA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (735, 220, 'LOS BARALES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (734, 219, 'SAN FRANCISCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (650, 188, 'LA DEMOCRACIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (648, 187, 'EL CARTANAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (714, 209, 'CAPITAL SOTILLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (737, 221, 'CAPITAL VILLALBA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (742, 224, 'CAPITAL ESTELLER', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (608, 173, 'SAN JUAN', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (609, 174, 'EL AMPARO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (610, 174, 'EL LLANO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (612, 174, 'TOVAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (618, 176, 'ZEA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (619, 177, 'ARAGUITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (620, 177, 'AREVALO GONZALEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (621, 177, 'CAPAYA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (649, 187, 'STA TERESA DEL TUY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (623, 177, 'EL CAFE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (624, 177, 'MARIZAPA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (625, 177, 'PANAQUIRE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (626, 177, 'RIBAS', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (656, 190, 'RIO CHICO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (652, 188, 'SANTA BARBARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (653, 189, 'SAN ANTONIO LOS ALTOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (658, 190, 'TACARIGUA DE LA LAGUNA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (665, 195, 'CAUCAGUITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (654, 190, 'EL GUAPO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (655, 190, 'PAPARO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (659, 191, 'SANTA LUCIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (660, 192, 'CUPIRA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (661, 192, 'MACHURUCUTO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (662, 193, 'GUARENAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (669, 195, 'PETARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (667, 195, 'LA DOLORITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (670, 196, 'CUA NUEVA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (666, 195, 'FILAS DE MARICHES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (671, 196, 'CUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (672, 197, 'BOLIVAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (673, 197, 'GUATIRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (677, 200, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (675, 198, 'SAN FRANCISCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (713, 208, 'SANTA BARBARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (718, 212, 'ARISMENDI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (715, 209, 'LOS BARRANCOS DE FAJARDO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (716, 210, 'URACOA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (723, 215, 'BOLIVAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (741, 223, 'RIO ACARIGUA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (752, 227, 'MONSEÑOR JOSÉ VICENTE DE UNDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (738, 221, 'VICENTE FUENTES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (614, 175, 'MARIA C PALACIOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (616, 175, 'SANTA APOLONIA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (617, 176, 'CAÑO EL TIGRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (615, 175, 'CAPITAL TULIO  FEBRES CORDERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (642, 186, 'CECILIO ACOSTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (643, 186, 'EL JARILLO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (641, 186, 'ALTAGRACIA DE LA MONTAÑA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (688, 203, 'EL TEJERO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (645, 186, 'PARACOTOS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (646, 186, 'SAN PEDRO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (663, 194, 'SAN FCO DE YARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (664, 194, 'SAN ANTONIO DE YARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (690, 204, 'CHAGUARAMAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (756, 228, 'OSPINO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (613, 175, 'INDEPENDENCIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (786, 238, 'PUERTO SANTO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (800, 241, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (785, 238, 'EL MORRO DE PTO SANTO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (788, 238, 'SAN JUAN GALDONAS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (844, 254, 'PALOTAL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (840, 253, 'RIVAS BERTI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (782, 237, 'SAN JOSE DE AREOCUAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (783, 237, 'TAVERA ACOSTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (839, 253, 'AYACUCHO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (795, 240, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (796, 240, 'MACARAPANA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (797, 240, 'SANTA CATALINA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (798, 240, 'SANTA ROSA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (845, 254, 'BOLÍVAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (842, 254, 'ISAIAS MEDINA ANGARITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (843, 254, 'JUAN VICENTE GOMEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (846, 255, 'AMENODORO RANGEL LAMU', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (803, 242, 'YAGUARAPARO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (808, 244, 'TUNAPUY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (802, 242, 'PAUJIL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (801, 242, 'LIBERTAD', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (851, 257, 'FERNÁNDEZ FEO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (853, 258, 'FRANCISCO DE MIRANDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (852, 257, 'SANTO DOMINGO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (804, 243, 'ARAYA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (806, 243, 'MANICUARE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (854, 259, 'BOCA DE GRITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (764, 231, 'BOCONOITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (761, 230, 'CAÑO DELGADITO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (810, 245, 'IRAPA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (855, 259, 'JOSE ANTONIO PAEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (857, 260, 'GUASIMOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (856, 259, 'GARCIA DE HEVIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (768, 233, 'SANTA ROSALIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (814, 246, 'MEJIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (809, 245, 'CAMPO CLARO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (811, 245, 'MARABAL', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (812, 245, 'SAN ANTONIO DE IRAPA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (813, 245, 'SORO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (858, 261, 'INDEPENDENCIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (766, 232, 'SANTA FE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (767, 232, 'THERMO MORLES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (773, 234, 'SAN RAFAEL PALO ALZADO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (769, 233, 'FLORIDA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (776, 235, 'CANELONES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (771, 234, 'CONCEPCION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (774, 234, 'UVENCIO A VELASQUEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (770, 234, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (775, 234, 'VILLA ROSA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (777, 235, 'SAN ISIDRO LABRADOR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (787, 238, 'RIO CARIBE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (778, 235, 'SANTA CRUZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (780, 236, 'MARIÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (781, 236, 'ROMULO GALLEGOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (815, 247, 'ARENAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (816, 247, 'ARICAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (817, 247, 'COCOLLAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (819, 247, 'SAN FERNANDO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (831, 249, 'SANTA INES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (820, 247, 'SAN LORENZO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (826, 249, 'ALTAGRACIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (827, 249, 'AYACUCHO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (835, 250, 'GUIRIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (828, 249, 'SANTA FÉ', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (832, 249, 'VALENTIN VALIENTE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (829, 249, 'RAUL LEONI', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (834, 250, 'CRISTOBAL COLON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (837, 251, 'ANDRÉS BELLO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (833, 250, 'BIDEAU', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (838, 252, 'ANTONIO RÓMULO COSTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (861, 262, 'EMILIO C. GUERRERO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (859, 261, 'JUAN GERMAN ROSCIO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (860, 261, 'ROMAN CARDENAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (862, 262, 'JAUREGUI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (864, 263, 'JOSÉ MARÍA VARGAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (868, 264, 'JUNIN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (866, 264, 'LA PETROLEA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (867, 264, 'QUINIMARI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (869, 265, 'LIBERTAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (821, 248, 'CARIACO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (822, 248, 'CATUARO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (823, 248, 'RENDON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (825, 248, 'SANTA MARIA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (865, 264, 'BRAMON', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (789, 239, 'EL PILAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (790, 239, 'EL RINCON', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (792, 239, 'GUARAUNOS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (793, 239, 'TUNAPUICITO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (794, 239, 'UNION', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (848, 255, 'CARDENAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (850, 257, 'ALBERTO ADRIANI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (847, 255, 'LA FLORIDA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (874, 266, 'EMETERIO OCHOA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (871, 265, 'MANUEL FELIPE RUGELES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (876, 267, 'CONSTITUCION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (872, 266, 'LIBERTADOR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (873, 266, 'DORADAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (875, 266, 'SAN JOAQUIN DE NAVAY', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (879, 269, 'PANAMERICANO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (878, 268, 'MICHELENA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (882, 270, 'UREÑA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (880, 269, 'LA PALMITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (883, 271, 'RAFAEL URDANETA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (881, 270, 'NUEVA ARCADIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (884, 272, 'BOCONO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (888, 273, 'LA CONCORDIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (889, 273, 'PEDRO MARIA MORANTES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (893, 275, 'SIMÓN RODRÍGUEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (887, 273, 'DR. FCO. ROMERO LOBO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (894, 276, 'ELEAZAR LOPEZ CONTRERA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (890, 273, 'SAN SEBASTIAN', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (892, 274, 'SEBORUCO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (895, 276, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (897, 277, 'TORBES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (898, 278, 'CARDENAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (896, 276, 'SAN PABLO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (900, 278, 'POTOSI', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (901, 278, 'URIBANTE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (902, 279, 'SAN JUDAS TADEO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (906, 280, 'SANTA ISABEL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (903, 280, 'ARAGUANEY', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (904, 280, 'EL JAGUITO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (905, 280, 'LA ESPERANZA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (910, 281, 'EL CARMEN', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (907, 281, 'AYACUCHO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (909, 281, 'BURBUSAY', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (762, 230, 'PAPELON', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1022, 316, 'MANUEL GUANIPA MATOS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1023, 316, 'MARCELINO BRICEÑO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1024, 316, 'PUEBLO NUEVO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1029, 317, 'GERMAN RIOS LINARES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (929, 284, 'CARACHE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (930, 284, 'CUICAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (931, 284, 'LA CONCEPCION', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (932, 284, 'PANAMERICANA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (933, 284, 'SANTA CRUZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1002, 305, 'SABANA DE PARRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1019, 315, 'MONAGAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (999, 302, 'CHIVACOA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (996, 300, 'SAN PABLO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1026, 317, 'AMBROSIO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1032, 317, 'PUNTA GORDA', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1031, 317, 'LA ROSA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1030, 317, 'JORGE HERNANDEZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1034, 317, 'SAN BENITO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1037, 319, 'MORALITO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1027, 317, 'ARISTIDES CALVANI', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1035, 318, 'ENCONTRADOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1036, 318, 'UDON PEREZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1000, 303, 'COROTE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1001, 304, 'INDEPENDENCIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1039, 319, 'SANTA BARBARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1044, 320, 'SIMON RODRIGUEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1040, 319, 'SANTA CRUZ DEL ZULIA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1041, 319, 'URRIBARRI', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1003, 306, 'BORAURE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (934, 285, 'ESCUQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (935, 285, 'LA UNION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (936, 285, 'SABANA LIBRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (937, 285, 'SANTA RITA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1046, 321, 'LA CONCEPCION', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1043, 320, 'FRANCISCO J PULGAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1004, 307, 'YUMARE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (942, 287, 'CAMPO ELIAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (938, 286, 'ANTONIO JOSE DE SUCRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1050, 322, 'JESUS M SEMPRUN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1045, 321, 'JOSE RAMON YEPEZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1047, 321, 'MARIANO PARRA LEON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1048, 321, 'SAN JOSE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1008, 309, 'SAN ANDRES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (943, 288, 'EL PROGRESO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (941, 287, 'ARNOLDO GABALDON', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1053, 323, 'CONCEPCION', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (944, 288, 'LA CEIBA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (945, 288, 'SANTA APOLONIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1005, 308, 'NIRGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1006, 308, 'SALOM', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1007, 308, 'TEMERLA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1052, 323, 'CHIQUINQUIRA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1059, 324, 'LIBERTAD', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1051, 323, 'ANDRES BELLO (KM 48)', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1055, 323, 'POTRERITOS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (957, 291, 'MOTATAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (952, 290, 'BUENA VISTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (954, 290, 'STA MARIA DEL HORCON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1009, 309, 'YARITAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1011, 310, 'SAN FELIPE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1058, 324, 'ELEAZAR LOPEZ C', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1061, 325, 'BARTOLOME DE LAS CASAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1057, 324, 'CAMPO LARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1060, 324, 'VENEZUELA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (920, 282, 'GRANADOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (926, 283, 'CHEJENDE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (923, 283, 'BOLIVIA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (924, 283, 'CARRILLO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (925, 283, 'CEGARRA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (928, 283, 'SAN JOSÉ', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (922, 283, 'ARNOLDO GABALDON', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (939, 286, 'EL SOCORRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (949, 289, 'EL CENIZO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (948, 289, 'AGUA SANTA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (953, 290, 'MONTE CARMELO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (947, 289, 'AGUA CALIENTE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (951, 289, 'VALERITA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (913, 281, 'LA VEGA DE GUARAMACAL', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (914, 281, 'MONSEÑOR JAUREGUI', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (918, 281, 'SAN MIGUEL', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (911, 281, 'GENERAL RIVAS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (916, 281, 'RAFAEL RANGEL', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (919, 282, 'CHEREGUE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (917, 281, 'SAN JOSÉ', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (958, 292, 'FLOR DE PATRIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (956, 291, 'JALISCO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (959, 292, 'LA PAZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (962, 293, 'LA CONCEPCION', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (960, 292, 'PAMPAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (963, 293, 'PAMPANITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (968, 294, 'LA PUEBLITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (964, 293, 'PAMPANITO II', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (965, 294, 'BETIJOQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (971, 295, 'CARVAJAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (966, 294, 'EL CEDRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (970, 295, 'CAMPO ALEGRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (973, 296, 'EL PARAISO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (969, 295, 'ANTONIO N BRICEÑO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (972, 295, 'JOSE LEONARDO SUAREZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (974, 296, 'JUNIN', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (987, 298, 'LA QUEBRADA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (976, 296, 'VALMORE RODRIGUEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (977, 297, 'ANDRES LINARES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (978, 297, 'CHIQUINQUIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (979, 297, 'CRISTOBAL MENDOZA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (980, 297, 'CRUZ CARRILLO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (981, 297, 'MATRIZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (983, 297, 'TRES ESQUINAS', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (985, 298, 'JAJO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (986, 298, 'LA MESA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (994, 299, 'MERCEDES DIAZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (984, 298, 'CABIMBU', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (988, 298, 'SANTIAGO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (989, 298, 'TUÑAME', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (991, 299, 'LA BEATRIZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (995, 299, 'SAN LUIS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (998, 302, 'CAMPO ELIAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (992, 299, 'LA PUERTA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (993, 299, 'MENDOZA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (997, 301, 'AROA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1013, 311, 'GUAMA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1012, 310, 'SAN JAVIER', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1015, 313, 'EL GUAYABO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1014, 312, 'URACHICHE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1016, 313, 'FARRIAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1021, 316, 'LIBERTADOR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (915, 281, 'MOSQUEY', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (950, 289, 'EL DIVIDIVE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (504, 149, 'HUMOCARO BAJO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (233, 70, 'JOSE ANTONIO PAEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1127, 314, 'CARAYACA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (95, 31, 'SAN VICENTE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (299, 93, 'EL BAUL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (447, 135, 'STA RITA DE MANAPIRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (841, 253, 'SAN PEDRO DEL RIO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (16, 4, 'ISLA DE RATON', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (38, 12, 'ATAPIRIRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (32, 8, 'SAN JOAQUIN', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1124, 11, 'VALLE DE GUANAPE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1125, 11, 'SANTA BARBARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (45, 14, 'SOLEDAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (52, 17, 'SANTA CLARA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (70, 23, 'BOCA UCHIRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (58, 18, 'SANTA INES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (84, 29, 'ACHAGUAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (89, 29, 'QUESERAS DEL MEDIO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (263, 78, 'TACARIGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (268, 80, 'YAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (370, 109, 'PUNTA CARDON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (517, 152, 'CECILIO ZUBILLAGA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (306, 97, 'ROMULO GALLEGOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (381, 112, 'PIEDRA GRANDE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (197, 62, 'CIUDAD BOLIVIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (310, 99, 'GRL/JEFE JOSE L SILVA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (456, 138, 'LIBERTAD DE ORITUCO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (136, 45, 'SAN SEBASTIAN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (384, 113, 'ADICORA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (148, 50, 'LAS PEÑITAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (153, 51, 'SAN FRANCISCO DE ASIS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (204, 64, 'CIUDAD DE NUTRIAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (24, 6, 'BAJO VENTUARI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1128, 314, 'CARUAO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1129, 314, 'CATIA LA MAR', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1130, 314, 'EL JUNKO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1131, 314, 'LA GUAIRA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1132, 314, 'MACUTO', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1134, 314, 'NAIGUATÁ', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1135, 314, 'RAUL LEONI', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1136, 314, 'CARLOS SOUBLETTE', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1070, 326, 'SAN RAFAEL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1063, 325, 'RIO NEGRO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1066, 326, 'LAS PARCELAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1067, 326, 'LUIS DE VICENTE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1069, 326, 'RICAURTE', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1077, 327, 'CHIQUINQUIRA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1068, 326, 'MONS.MARCOS SERGIO G', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1088, 327, 'SANTA LUCIA', '0', '0', NULL, NULL, '16  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1071, 326, 'TAMARE', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1073, 327, 'BOLIVAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1074, 327, 'CACIQUE MARA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1075, 327, 'CARACCIOLO PARRA PEREZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1076, 327, 'CECILIO ACOSTA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1089, 327, 'VENANCIO PULGAR', '0', '0', NULL, NULL, '17  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1078, 327, 'COQUIVACOA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1080, 327, 'FRANCISCO EUGENIO B', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1081, 327, 'IDELFONZO VASQUEZ', '0', '0', NULL, NULL, '10  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1082, 327, 'JUANA DE AVILA', '0', '0', NULL, NULL, '11  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1083, 327, 'LUIS HURTADO HIGUERA', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1084, 327, 'MANUEL DAGNINO', '0', '0', NULL, NULL, '13  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1085, 327, 'OLEGARIO VILLALOBOS', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1086, 327, 'RAUL LEONI', '0', '0', NULL, NULL, '15  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1098, 329, 'SINAMAICA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1095, 329, 'ALTA GUAJIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1090, 328, 'ALTAGRACIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1091, 328, 'ANA MARIA CAMPOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1092, 328, 'FARIA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1094, 328, 'SAN JOSE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1096, 329, 'ELIAS SANCHEZ RUBIO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1097, 329, 'GOAJIRA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1100, 330, 'EL ROSARIO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1107, 331, 'SAN FRANCISCO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1103, 331, 'EL BAJO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1101, 330, 'SIXTO ZAMBRANO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1105, 331, 'LOS CORTIJOS', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1102, 331, 'DOMITILA FLORES', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1106, 331, 'MARCIAL HERNANDEZ', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1111, 332, 'SANTA RITA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1108, 332, 'EL MENE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1109, 332, 'JOSE CENOVIO URRIBARR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1110, 332, 'PEDRO LUCAS URRIBARRI', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1126, 314, 'CARABALLEDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1113, 333, 'RAFAEL MARIA BARALT', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1114, 333, 'RAFAEL URDANETA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1115, 334, 'BOBURES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1116, 334, 'EL BATEY', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1117, 334, 'GIBRALTAR', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1118, 334, 'HERAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1120, 334, 'ROMULO GALLEGOS', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1121, 335, 'LA VICTORIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1122, 335, 'RAFAEL URDANETA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1123, 335, 'RAUL CUENCA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (77, 25, 'NARICUAL', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (463, 139, 'SAN LORENZO DE TIZNADOS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (102, 33, 'CUNAVICHE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (108, 35, 'SAN FERNANDO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (484, 147, 'EL CUJI', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (481, 147, 'AGUEDO F. ALVARADO', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (498, 148, 'TINTORERO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (118, 38, 'LOS TACARIGUAS', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (491, 148, 'CRNEL. MARIANO PERAZA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (499, 149, 'ANZOATEGUI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (525, 152, 'MONTA A VERDE', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (124, 40, 'LA VICTORIA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (529, 153, 'MOROTURO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (131, 43, 'EL LIMON', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (172, 57, 'CORAZON DE JESUS', '0', '0', NULL, NULL, '09  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (183, 58, 'ALTAMIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (190, 60, 'PEDRO BRICEÑO MENDEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (194, 61, 'LA LUZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (627, 178, 'CUMBO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (203, 63, 'PALACIO FAJARDO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (224, 67, 'GUANIAMO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (228, 68, 'EL CALLAO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (242, 71, 'UPATA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (254, 75, 'LAS MAJADAS', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (271, 82, 'U INDEPENDENCIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (719, 213, 'CAPITAL DÍAZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (322, 102, 'LUIS B PRIETO FIGUERO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (327, 103, 'MCL.ANTONIO J DE SUCRE', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (357, 105, 'SAN JUAN DE LOS CAYOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (363, 107, 'CAPATARIDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (784, 238, 'ANTONIO JOSE DE SUCRE', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (389, 113, 'JADACAQUIVA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1062, 325, 'LIBERTAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (214, 66, 'ONCE DE ABRIL', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (285, 88, 'URB SAN DIEGO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (418, 121, 'CURIMAGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (426, 126, 'TOCOPERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (437, 130, 'PUERTO MIRANDA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (634, 180, 'TACARIGUA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (799, 240, 'SANTA TERESA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (747, 225, 'SAN JUAN GUANAGUANARE', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (682, 201, 'SAN AGUSTIN', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (687, 202, 'VIENTO FRESCO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (760, 229, 'RAMON PERAZA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (805, 243, 'CHACOPATA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (710, 206, 'TAGUAYA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (568, 163, 'PALMIRA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (571, 165, 'ANTONIO SPINETTI DINI', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (611, 174, 'SAN FRANCISCO', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (740, 223, 'ARAURE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (765, 232, 'SAN RAFAEL DE ONOTO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (830, 249, 'SAN JUAN', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (836, 250, 'PUNTA DE PIEDRA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (863, 262, 'MONS. MIGUEL A SALAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1018, 315, 'ISLA DE TOAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (404, 117, 'SAN FELIX', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (824, 248, 'SANTA CRUZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (297, 91, 'JUAN DE MATA SUAREZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (550, 158, 'GUAIMARAL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (791, 239, 'GRAL FCO. A VASQUEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (940, 286, 'LOS CAPRICHOS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (946, 288, 'TRES DE FEBRERO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1054, 323, 'EL CARMELO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1056, 324, 'ALONSO DE OJEDA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (440, 132, 'EL SOCORRO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (647, 186, 'TACATA', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (739, 222, 'AGUA BLANCA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (870, 265, 'CIPRIANO CASTRO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (927, 283, 'MANUEL SALVADOR ULLOA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (982, 297, 'MONSEÑOR CARRILLO', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (990, 299, 'JUAN IGNACIO MONTILLA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1064, 325, 'SAN JOSE DE PERIJA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1072, 327, 'ANTONIO BORJAS ROMERO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1093, 328, 'SAN ANTONIO', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1112, 333, 'MANUEL MANRIQUE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1119, 334, 'M.ARTURO CELESTINO A', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (3, 1, 'LA ESMERALDA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1, 1, 'MAVACA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (5, 1, 'SIERRA PARIMA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (337, 104, 'CATEDRAL', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (344, 104, 'LA VEGA', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (349, 104, 'SAN JUAN', '0', '0', NULL, NULL, '17  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (401, 116, 'LOS TAQUES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (410, 118, 'SAN GABRIEL', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1137, 12, 'MACURA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (64, 20, 'SANTA ROSA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (432, 129, 'LA CIENAGA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1138, 129, 'PUERTO CUMAREBO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1144, 42, 'LIBERTADOR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1140, 26, 'MIGUEL CERO SILVA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1139, 26, 'EDMUNDO BARRIOS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (468, 141, 'CANTAGALLO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (473, 143, 'SANTA MARIA DE IPIRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (509, 150, 'JOSE G. BASTIDAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1141, 38, 'GIRARDOT', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (459, 152, 'TORRES', '0', '0', NULL, NULL, '14  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1142, 40, 'JOSE FELIX RIBAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1143, 41, 'JOSE RAFAEL REVENGA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1145, 43, 'MARIO BRICEÑO IRAGORRY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1146, 46, 'SANTIAGO MARIÑO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1147, 47, 'SANTOS MICHELENA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1148, 48, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (556, 159, 'LA MESA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1149, 50, 'URDANETA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (560, 160, 'FLORENCIO RAMIREZ', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1150, 51, 'ZAMORA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (579, 165, 'JUAN RODRIGUEZ SUAREZ', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1151, 52, 'FRANCISCO LINARES ALCANTARA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (586, 166, 'ANDRES ELOY BLANCO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (590, 167, 'ELOY PAREDES', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (179, 57, 'SAN SILVESTRE', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (592, 167, 'CAPITAL OBISPO RAMOS DE LORA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (596, 170, 'LA TOMA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (603, 173, 'CHIGUARA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (209, 65, 'PUERTO VIVAS', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (622, 177, 'CAUCAGUA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (628, 178, 'SAN JOSE DE BARLOVENTO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1152, 63, 'SANTA ROSA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (651, 188, 'OCUMARE DEL TUY', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (657, 190, 'SAN FERNANDO DEL GUAPO', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (668, 195, 'LEONCIO MARTINEZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (674, 198, 'CAPITAL ACOSTA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1153, 69, 'GRAN SABANA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (694, 205, 'ALTO DE LOS GODOS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (702, 205, 'SANTA CRUZ', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (257, 76, 'EL PALMAR', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (279, 87, 'DEMOCRACIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (717, 211, 'ANTOLIN DEL CAMPO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (292, 90, 'RAFAEL URDANETA', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (730, 217, 'ADRIAN', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (313, 100, 'CURIAPO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (750, 226, 'GUANARITO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (763, 231, 'ANTOLIN TOVAR AQUINO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (772, 234, 'SAN JOSE DE SAGUAZ', '0', '0', NULL, NULL, '05  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (779, 235, 'TUREN', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (955, 291, 'EL BAÑO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (967, 294, 'JOSE G HERNANDEZ', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (961, 292, 'SANTA ANA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (975, 296, 'SABANA DE MENDOZA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1010, 310, 'ALBARICO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1025, 316, 'SAN TIMOTEO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1020, 316, 'GENERAL URDANETA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1028, 317, 'CARMEN HERRERA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1033, 317, 'ROMULO BETANCOURT', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1042, 320, 'CARLOS QUEVEDO', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1049, 322, 'BARI', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1079, 327, 'CRISTO DE ARANZA', '0', '0', NULL, NULL, '06  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1087, 327, 'SAN ISIDRO', '0', '0', NULL, NULL, '18  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1099, 330, 'DONALDO GARCIA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1104, 331, 'FRANCISCO OCHOA', '0', '0', NULL, NULL, '04  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1133, 314, 'MAIQUETIA', '0', '0', NULL, NULL, '08  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1017, 314, 'VARGAS', '0', '0', NULL, NULL, '12  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (807, 244, 'CAMPO ELIAS', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (818, 247, 'CUMANACOA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (849, 256, 'CORDOBA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (877, 267, 'LOBATERA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (885, 272, 'HERNANDEZ', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (891, 273, 'SAN JUAN BAUTISTA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (899, 278, 'JUAN PABLO PEÑALOZA', '0', '0', NULL, NULL, '03  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (908, 281, 'BOCONO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (912, 281, 'GUARAMACAL', '0', '0', NULL, NULL, '07  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (921, 282, 'SABANA GRANDE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1154, 71, 'PIAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1155, 73, 'ROSCIO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1156, 74, 'SIFONTES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1157, 75, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1158, 76, 'PADRE PEDRO CH', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1160, 108, 'CACIQUE MANUARE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (693, 204, 'CAPITAL LIBERTADOR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1159, 205, 'CAPITAL MATURIN', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (712, 207, 'CAPITAL PUNCERES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (736, 220, 'CAPITAL TUBORES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1161, 300, 'ARISTIDES BASTIDAS', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1162, 301, 'BOLIVAR', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1163, 302, 'BRUZUAL', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1164, 305, 'JOSE ANTONIO PAEZ', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1165, 306, 'TRINIDAD', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1166, 307, 'MANUEL MORGE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1167, 309, 'PEÑA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1168, 311, 'SUCRE', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1169, 313, 'VEROES', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1038, 319, 'SAN CARLOS DEL ZULIA', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (1065, 326, 'LA SIERRITA', '0', '0', NULL, NULL, '02  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (886, 272, 'SAMUEL DARIO MALDONADO', '0', '0', NULL, NULL, '01  ')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.parishes VALUES (9999, 999, 'Sin descripción',        '', '', NULL, NULL, '')");
    DB::connection('pgsql_common')->statement(
        "UPDATE public.parishes
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
    );
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/CommonDatabaseSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;

class CommonDatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Model::unguard();

        $this->call([
            //OthersTableSeeder:class,
            StatesTableSeeder::class,
            MunicipalitiesTableSeeder::class,
            ParishesTableSeeder::class,
            CitiesTableSeeder::class,
            ZoneTypesTableSeeder::class,
            RouteTypesTableSeeder::class,
            DomicileTypesTableSeeder::class,
            MuContainerSeeder::class,
            MuMeasureUnitTypeSeeder::class,
            MuMeasureUnitSeeder::class
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/MuMeasureUnitSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class MuMeasureUnitSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {        
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (1, 1, 'Kilómetro(s)', 'km', '1000 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (2, 1, 'Hectómetro(s)', 'hm', '100 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (3, 1, 'Decámetro(s)', 'dam', '10 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (4, 1, 'Metro(s)', 'm', '1 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (5, 1, 'Decímetro(s)', 'dm', '0.1 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (6, 1, 'Centímetro(s)', 'cm', '0.01 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (7, 1, 'Milímetro(s)', 'mm', '0.001 m')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (8, 1, 'Pulgada(s)', 'pul', '1 pul')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (9, 1, 'Pie(s)', 'pie', '12 pulgadas = 30.48 cm.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (10, 1, 'Yarda(s)', 'yar', 'Yarda = 3 pies = 91.44 cm.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (11, 1, 'Braza(s)', 'bz', 'Braza = dos yardas = 1. 829 m.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (12, 1, 'Milla(s) Terrestre', 'mllt', 'Milla terrestre = 880 brazas = 1.609 kilómetros.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (13, 1, 'Milla(s) Náutica', 'mlln', 'Milla náutica = 1.853 m.')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (14, 2, 'Kilogramo(s)', 'kg', '1000 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (15, 2, 'Hectogramo(s)', 'hg', '100 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (16, 2, 'Decagramo(s)', 'dag', '10 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (17, 2, 'Gramo(s)', 'g', '1 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (18, 2, 'Decigramo(s)', 'dg', '0.1 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (19, 2, 'Centigramo(s)', 'cg', '0.01 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (20, 2, 'Miligramo(s)', 'mg', '0.001 g')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (21, 2, 'Tonelada(s) Métrica', 't', '1 t = 1000 kg')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (22, 2, 'Quintal Métrico', 'qm', '1 q = 100 kg')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (23, 3, 'Kilolitro(s)', 'kl', '1000 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (24, 3, 'Hectolitro(s)', 'hl', '100 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (25, 3, 'Decalitro(s)', 'dal', '10 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (26, 3, 'Litro(s)', 'l', '1 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (27, 3, 'Decilitro(s)', 'dl', '0.1 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (28, 3, 'Centilitro(s)', 'cl', '0.01 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (29, 3, 'Mililitro(s)', 'ml', '0.001 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (30, 3, 'Barril', 'b', '159 l')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (31, 4, 'Kilómetro(s) Cuadrado', 'km2', '1 000 000 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (32, 4, 'Hectómetro(s) Cuadrado', 'hm2', '10 000 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (33, 4, 'Decámetro(s) Cuadrado', 'dam2', '100 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (34, 4, 'Metro(s) Cuadrado', 'm2', '1 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (35, 4, 'Decímetro(s) Cuadrado', 'dm2', '0.01 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (36, 4, 'Centímetro(s) Cuadrado', 'cm2', '0.0001 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (37, 4, 'Milímetro(s) Cuadrado', 'mm2', '0.000001 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (38, 5, 'Hectárea', 'h', '1 Ha = 1 Hm2 = 10 000 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (39, 5, 'Área', 'a', '1 a = 1 dam2 = 100 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (40, 5, 'Centiárea', 'ca', '1 ca = 1 m2')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (41, 6, 'Kilómetro(s) Cúbico', 'km3', '1 000 000 000 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (42, 6, 'Hectómetro(s) Cúbico', 'hm3', '1 000 000m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (43, 6, 'Decámetro(s) Cúbico', 'dam3', '1 000 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (44, 6, 'Metro(s) Cúbico', 'm3', '1 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (45, 6, 'Decímetro(s) Cúbico', 'dm3', '0.001 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (46, 6, 'Centímetro(s) Cúbico', 'cm3', '0.000001 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (47, 6, 'Milímetro(s) Cúbico', 'mm3', '0.000000001 m3')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_units VALUES (48, 7, 'Unidades', 'Unid', '1')");
        DB::connection('pgsql_common')->statement(
            "UPDATE public.mu_measure_units
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
        );
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/CitiesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class CitiesTableSeeder extends Seeder
{
  /**
  * Run the database seeds.
  *
  * @return void
  */
  public function run()
  {
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (2, 'SAN FERNANDO DE ATABAPO', 2, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (3, 'PUERTO AYACUCHO', 2, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (4, 'LA ESMERALDA', 2, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (5, 'ISLA RATÓN', 2, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (6, 'MAROA', 2, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (7, 'SAN JUAN DE MANAPIARE', 2, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (8, 'SAN CARLOS DE RÍO NEGRO', 2, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (9, 'ANACO', 1, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (10, 'ARAGUA DE BARCELONA', 1, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (11, 'PUERTO PÍRITU', 1, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (12, 'VALLE DE GUANAPE', 1, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (13, 'PARIAGUÁN', 1, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (14, 'GUANTA', 1, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (15, 'SOLEDAD', 1, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (17, 'ONOTO', 1, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (18, 'MAPIRE', 1, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (19, 'SAN MATEO', 1, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (20, 'CLARINES', 1, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (21, 'CANTAURA', 1, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (22, 'PÍRITU', 1, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (23, 'SAN JOSÉ DE GUANIPA (EL TIGRITO)', 1, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (24, 'BOCA DE UCHIRE', 1, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (37, 'SAN MATEO', 4, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (26, 'BARCELONA', 1, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (27, 'EL TIGRE', 1, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (28, 'EL CHAPARRO', 1, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (29, 'LECHERÍAS', 1, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (31, 'BIRUACA', 3, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (32, 'BRUZUAL', 3, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (33, 'GUASDUALITO', 3, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (34, 'SAN JUAN DE PAYARA', 3, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (35, 'ELORZA', 3, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (36, 'SAN FERNANDO DE APURE', 3, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (25, 'SANTA ANA', 1, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (38, 'CAMATAGUA', 4, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (39, 'MARACAY', 4, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (40, 'SANTA CRUZ', 4, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (41, 'LA VICTORIA', 4, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (42, 'EL CONSEJO', 4, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (43, 'PALO NEGRO', 4, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (45, 'SAN CASIMIRO', 4, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (46, 'SAN SEBASTIÁN', 4, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (47, 'TURMERO', 4, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (48, 'LAS TEJERÍAS', 4, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (49, 'CAGUA', 4, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (50, 'LA COLONIA TOVAR', 4, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (51, 'BARBACOAS', 4, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (52, 'VILLA DE CURA', 4, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (53, 'SANTA RITA', 4, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (54, 'OCUMARE DE LA COSTA', 4, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (55, 'SABANETA', 5, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (56, 'SOCOPÓ', 5, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (57, 'ARISMENDI', 5, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (58, 'BARINAS', 5, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (60, 'BARRANCAS', 5, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (61, 'SANTA BÁRBARA', 5, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (62, 'OBISPOS', 5, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (63, 'CIUDAD BOLIVIA', 5, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (64, 'LIBERTAD', 5, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (65, 'CIUDAD DE NUTRIAS', 5, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (66, 'EL CANTÓN', 5, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (67, 'CIUDAD GUAYANA', 16, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (68, 'CIUDAD BOLÍVAR', 16, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (69, 'CAICARA DEL ORINOCO', 16, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (70, 'EL CALLAO', 16, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (72, 'UPATA', 16, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (73, 'CIUDAD PIAR', 16, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (74, 'GUASIPATI', 16, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (75, 'TUMEREMO', 16, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (76, 'MARIPA', 16, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (77, 'EL PALMAR', 16, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (79, 'GÜIGÜE', 17, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (78, 'BEJUMA', 17, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (80, 'MARIARA', 17, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (81, 'GUACARA', 17, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (82, 'MORÓN', 17, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (83, 'TOCUYITO', 17, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (84, 'LOS GUAYOS', 17, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (85, 'MIRANDA', 17, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (86, 'MONTALBÁN', 17, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (87, 'NAGUANAGUA', 17, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (89, 'SAN DIEGO', 17, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (90, 'SAN JOAQUÍN', 17, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (91, 'VALENCIA', 17, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (92, 'COJEDES', 18, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (93, 'TINAQUILLO', 18, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (94, 'EL BAÚL', 18, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (95, 'MACAPO', 18, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (96, 'EL PAO', 18, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (97, 'LIBERTAD', 18, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (98, 'LAS VEGAS', 18, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (99, 'SAN CARLOS', 18, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (100, 'TINACO', 18, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (101, 'CURIAPO', 19, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (102, 'SIERRA IMATACA', 19, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (103, 'PEDERNALES', 19, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (105, 'SAN JUAN DE LOS CAYOS', 7, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (106, 'SAN LUIS', 7, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (107, 'CAPATÁRIDA', 7, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (108, 'YARACAL', 7, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (109, 'PUNTO FIJO', 7, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (110, 'LA VELA DE CORO', 7, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (111, 'DABAJURO', 7, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (112, 'PEDREGAL', 7, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (113, 'PUEBLO NUEVO', 7, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (114, 'CHURUGUARA', 7, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (115, 'JACURA', 7, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (117, 'MENE DE MAUROA', 7, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (118, 'SANTA ANA DE CORO', 7, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (119, 'CHICHIRIVICHE', 7, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (120, 'PALMASOLA', 7, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (121, 'CABURE', 7, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (122, 'PÍRITU', 7, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (123, 'MIRIMIRE', 7, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (124, 'TUCACAS', 7, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (125, 'LA CRUZ DE TARATARA', 7, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (126, 'TOCÓPERO', 7, true, false, '22')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (127, 'SANTA CRUZ DE BUCARAL', 7, true, false, '23')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (128, 'URUMACO', 7, true, false, '24')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (129, 'PUERTO CUMAREBO', 7, true, false, '25')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (130, 'CAMAGUÁN', 8, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (131, 'CHAGUARAMAS', 8, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (132, 'EL SOCORRO', 8, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (133, 'GUAYABAL', 8, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (135, 'LAS MERCEDES', 8, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (136, 'EL SOMBRERO', 8, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (137, 'CALABOZO', 8, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (138, 'ALTAGRACIA DE ORITUCO', 8, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (139, 'ORTIZ', 8, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (140, 'TUCUPIDO', 8, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (141, 'SAN JUAN DE LOS MORROS', 8, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (142, 'SAN JOSÉ DE GUARIBE', 8, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (236, 'CASANAY', 19, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (237, 'SAN JOSÉ DE AEROCUAR', 19, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (144, 'ZARAZA', 8, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (145, 'SANARE', 9, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (146, 'DUACA', 9, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (147, 'BARQUISIMETO', 9, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (148, 'QUÍBOR', 9, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (149, 'EL TOCUYO', 9, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (150, 'CABUDARE', 9, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (151, 'SARARE', 9, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (152, 'CARORA', 9, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (154, 'EL VIGÍA', 10, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (155, 'LA AZULITA', 10, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (156, 'SANTA CRUZ DE MORA', 10, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (157, 'ARICAGUA', 10, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (158, 'CANAGUÁ', 10, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (159, 'EJIDO', 10, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (160, 'TUCANÍ', 10, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (161, 'SANTO DOMINGO', 10, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (162, 'GUARAQUE', 10, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (163, 'ARAPUEY', 10, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (164, 'TORONDOY', 10, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (165, 'MÉRIDA', 10, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (166, 'TIMOTES', 10, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (168, 'SANTA MARÍA DE CAPARO', 10, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (169, 'PUEBLO LLANO', 10, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (170, 'MUCUCHÍES', 10, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (171, 'BAILADORES', 10, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (172, 'TABAY', 10, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (173, 'LAGUNILLAS', 10, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (174, 'TOVAR', 10, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (175, 'NUEVA BOLIVIA', 10, true, false, '22')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (176, 'ZEA', 10, true, false, '23')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (197, 'GUATIRE', 11, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (196, 'CÚA', 11, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (194, 'SAN FRANCISCO DE YARE', 11, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (193, 'GUARENAS', 11, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (192, 'CÚPIRA', 11, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (191, 'SANTA LUCÍA', 11, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (190, 'RÍO CHICO', 11, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (188, 'OCUMARE DEL TUY', 11, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (187, 'SANTA TERESA DEL TUY', 11, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (186, 'LOS TEQUES', 11, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (184, 'CHARALLAVE', 11, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (182, 'CARRIZAL', 11, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (181, 'MAMPORAL', 11, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (180, 'HIGUEROTE', 11, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (198, 'SAN ANTONIO', 20, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (199, 'AGUASAY', 20, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (200, 'CARIPITO', 20, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (202, 'CAICARA', 20, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (201, 'CARIPE', 20, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (203, 'PUNTA DE MATA', 20, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (204, 'TEMBLADOR', 20, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (205, 'MATURÍN', 20, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (206, 'ARAGUA', 20, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (207, 'QUIRIQUIRE', 20, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (209, 'BARRANCAS', 20, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (210, 'URACOA', 20, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (221, 'SAN PEDRO DE COCHE', 21, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (220, 'PUNTA DE PIEDRAS', 21, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (219, 'BOCA DEL RÍO', 21, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (218, 'PORLAMAR', 21, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (217, 'JUANGRIEGO', 21, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (216, 'PAMPATAR', 21, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (215, 'SANTA ANA', 21, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (213, 'SAN JUAN BAUTISTA', 21, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (212, 'LA ASUNCIÓN', 21, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (234, 'BISCUCUY', 12, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (211, 'PLAZA PARAGUACHÍ', 21, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (235, 'VILLA BRUZUAL', 12, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (233, 'EL PLAYÓN', 12, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (232, 'SAN RAFAEL DE ONOTO', 12, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (231, 'BOCONOITO', 12, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (230, 'PAPELÓN', 12, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (229, 'ACARIGUA', 12, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (228, 'OSPINO', 12, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (227, 'PARAÍSO DE CHABASQUÉN', 12, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (226, 'GUANARITO', 12, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (225, 'GUANARE', 12, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (224, 'PÍRITU', 12, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (223, 'ARAURE', 12, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (222, 'AGUA BLANCA', 12, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (250, 'GÜIRIA', 22, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (249, 'CUMANÁ', 22, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (248, 'CARIACO', 22, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (247, 'CUMANACOA', 22, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (245, 'IRAPA', 22, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (244, 'TUNAPUY', 22, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (243, 'ARAYA', 22, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (242, 'YAGUARAPARO', 22, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (241, 'MARIGÜITAR', 22, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (240, 'CARÚPANO', 22, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (239, 'EL PILAR', 22, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (238, 'RÍO CARIBE', 22, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (279, 'UMUQUENA', 13, true, false, '29')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (278, 'PREGONERO', 13, true, false, '28')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (276, 'QUENIQUEA', 13, true, false, '26')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (277, 'SAN JOSECITO', 13, true, false, '27')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (275, 'SAN SIMÓN', 13, true, false, '25')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (274, 'SEBORUCO', 13, true, false, '24')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (273, 'SAN CRISTÓBAL', 13, true, false, '23')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (272, 'LA TENDIDA', 13, true, false, '22')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (271, 'DELICIAS', 13, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (270, 'UREÑA', 13, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (268, 'MICHELENA', 13, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (267, 'LOBATERA', 13, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (266, 'ABEJALES', 13, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (265, 'CAPACHO VIEJO', 13, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (264, 'RUBIO', 13, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (263, 'EL COBRE', 13, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (262, 'LA GRITA', 13, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (261, 'CAPACHO NUEVO', 13, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (260, 'PALMIRA', 13, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (259, 'LA FRÍA', 13, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (257, 'SAN RAFAEL DEL PIÑAL', 13, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (256, 'SANTA ANA', 13, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (255, 'TÁRIBA', 13, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (254, 'SAN ANTONIO DEL TÁCHIRA', 13, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (253, 'COLÓN', 13, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (252, 'LAS MESAS', 13, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (251, 'CORDERO', 13, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (289, 'PAMPÁN', 14, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (288, 'EL DIVIDIVE', 14, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (287, 'MOTATÁN', 14, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (286, 'MONTE CARMELO', 14, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (285, 'SANTA APOLONIA', 14, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (284, 'CAMPO ELÍAS', 14, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (283, 'CARACHE', 14, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (282, 'EL PARADERO', 14, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (281, 'ESCUQUE', 14, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (280, 'SANTA ISABEL', 14, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (1, 'CARACAS', 6, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (16, 'PUERTO LA CRUZ', 1, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (30, 'ACHAGUAS', 3, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (44, 'EL LIMÓN', 4, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (59, 'BARINITAS', 5, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (71, 'SANTA ELENA DE UAIRÉN', 16, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (88, 'PUERTO CABELLO', 17, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (104, 'TUCUPITA', 19, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (116, 'SANTA CRUZ DE LOS TAQUES', 7, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (134, 'VALLE DE LA PASCUA', 8, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (143, 'SANTA MARÍA DE IPIRE', 8, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (153, 'SIQUISIQUE', 9, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (167, 'SANTA ELENA DE ARENALES', 10, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (195, 'PETARE', 11, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (189, 'SAN ANTONIO DE LOS ALTOS', 11, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (185, 'EL HATILLO', 11, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (183, 'CHACAO', 11, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (208, 'SANTA BÁRBARA', 20, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (214, 'EL VALLE DEL ESPÍRITU SANTO', 21, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (246, 'SAN ANTONIO DEL GOLFO', 22, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (269, 'COLONCITO', 13, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (258, 'SAN JOSÉ DE BOLÍVAR', 13, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (296, 'LA QUEBRADA', 14, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (295, 'VALERA', 14, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (294, 'TRUJILLO', 14, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (293, 'SABANA DE MENDOZA', 14, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (292, 'CARVAJAL', 14, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (291, 'BETIJOQUE', 14, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (290, 'PAMPANITO', 14, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (310, 'FARRIAR', 23, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (311, 'EL TORO', 24, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (309, 'URACHICHE', 23, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (308, 'GUAMA', 23, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (307, 'SAN FELIPE', 23, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (306, 'YARITAGUA', 23, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (305, 'NIRGUA', 23, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (304, 'YUMARE', 23, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (303, 'BORAURE', 23, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (302, 'SABANA DE PARRA', 23, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (301, 'INDEPENDENCIA', 23, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (300, 'COCOROTE', 23, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (299, 'CHIVACOA', 23, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (298, 'AROA', 23, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (297, 'SAN PABLO', 23, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (332, 'LA GUAIRA', 15, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (331, 'BACHAQUERO', 24, true, false, '21')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (330, 'BOBURES', 24, true, false, '20')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (329, 'TÍA JUANA', 24, true, false, '19')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (328, 'SANTA RITA', 24, true, false, '18')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (327, 'SAN FRANCISCO', 24, true, false, '17')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (326, 'LA VILLA DEL ROSARIO', 24, true, false, '16')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (325, 'SINAMAICA', 24, true, false, '15')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (324, 'LOS PUERTOS DE ALTAGRACIA', 24, true, false, '14')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (323, 'MARACAIBO', 24, true, false, '13')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (322, 'SAN RAFAEL DE EL MOJÁN', 24, true, false, '12')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (321, 'MACHIQUES', 24, true, false, '11')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (320, 'CIUDAD  OJEDA', 24, true, false, '10')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (319, 'CONCEPCIÓN', 24, true, false, '09')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (318, 'CASIGUA (EL CUBO)', 24, true, false, '08')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (317, 'LA CONCEPCIÓN', 24, true, false, '07')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (316, 'PUEBLO NUEVO (EL CHIVO)', 24, true, false, '06')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (315, 'SAN CARLOS DEL ZULIA', 24, true, false, '05')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (314, 'ENCONTRADOS', 24, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (313, 'CABIMAS', 24, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (312, 'SAN TIMOTEO', 24, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (177, 'CAUCAGUA', 11, true, false, '01')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (178, 'SAN JOSÉ DE BARLOVENTO', 11, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (179, 'NUESTRA SEÑORA DEL ROSARIO', 11, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (333, 'BOCONÓ', 14, true, false, '02')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (335, 'CHEJENDÉ', 14, true, false, '04')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (334, 'SABANA GRANDE', 14, true, false, '03')");
    DB::connection('pgsql_common')->statement("INSERT INTO public.cities VALUES (999, 'Sin descripción', 99, true, false, '')");
    DB::connection('pgsql_common')->statement(
        "UPDATE public.cities
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
    );
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/MuMeasureUnitTypeSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class MuMeasureUnitTypeSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (1, 'Longitud')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (2, 'Masa')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (3, 'Capacidad')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (4, 'Superficie')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (5, 'Superficie Agrarias')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (6, 'Volumen')");
        DB::connection('pgsql_common')->statement("INSERT INTO public.mu_measure_unit_types VALUES (7, 'Cantidad')");       
        DB::connection('pgsql_common')->statement(
            "UPDATE public.mu_measure_unit_types
            SET created_at = now()::timestamp(0) without time zone,
                updated_at = now()::timestamp(0) without time zone"
        );
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/ZoneTypesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Modules\Common\Entities\GeoLocation\ZoneType;

class ZoneTypesTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {        
        ZoneType::create(['id' => 1,  'description' => 'SECTOR'      ]);
        ZoneType::create(['id' => 2,  'description' => 'CASERIO'     ]);
        ZoneType::create(['id' => 3,  'description' => 'POBLADO'     ]);
        ZoneType::create(['id' => 4,  'description' => 'ZONA'        ]);
        ZoneType::create(['id' => 5,  'description' => 'PARCELA'     ]);
        ZoneType::create(['id' => 6,  'description' => 'TRAMO'       ]);
        ZoneType::create(['id' => 7,  'description' => 'SECCIÓN'     ]);
        ZoneType::create(['id' => 8,  'description' => 'URBANISMO'   ]);
        ZoneType::create(['id' => 9,  'description' => 'DESARROLLO'  ]);
        ZoneType::create(['id' => 10, 'description' => 'COMARCA'     ]);
        ZoneType::create(['id' => 11, 'description' => 'CONDADO'     ]);
        ZoneType::create(['id' => 12, 'description' => 'REGIÓN'      ]);
        ZoneType::create(['id' => 13, 'description' => 'PUEBLO'      ]);
        ZoneType::create(['id' => 14, 'description' => 'VILLA'       ]);
        ZoneType::create(['id' => 15, 'description' => 'CONJUNTO'    ]);
        ZoneType::create(['id' => 16, 'description' => 'URBANIZACIÓN']);
        ZoneType::create(['id' => 17, 'description' => 'ÁREA'        ]);
        ZoneType::create(['id' => 18, 'description' => 'ALDEA'       ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/StatesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Modules\Common\Entities\GeoLocation\State;

class StatesTableSeeder extends Seeder
{
    /**
    * Run the database seeds.
    *
    * @return void
    */
    public function run()
    {
        State::create([
            'id' => 1,
            'description' => 'ANZOATEGUI',
            'latitud' => '10.13',
            'longitud' => '-64.72',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '8;16;20;22',
            'siex_estado' => '03  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 2,
            'description' => 'AMAZONAS',
            'latitud' => '5.21',
            'longitud' => '-66.23',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '3;16',
            'siex_estado' => '02  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 3,
            'description' => 'APURE',
            'latitud' => '7.6',
            'longitud' => '-67.43',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '2;5;8;13;16',
            'siex_estado' => '04  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 4,
            'description' => 'ARAGUA',
            'latitud' => '10.33',
            'longitud' => '-67.47',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '8;11;15;17',
            'siex_estado' => '05  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 5,
            'description' => 'BARINAS',
            'latitud' => '8.60',
            'longitud' => '-70.25',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '3;8;10;12;13;14;18',
            'siex_estado' => '06  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 6,
            'description' => 'DISTRITO CAPITAL',
            'latitud' => '10.50',
            'longitud' => '-66.90',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '11;15',
            'siex_estado' => '01  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 7,
            'description' => 'FALCON',
            'latitud' => '11.42',
            'longitud' => '-69.68',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '9;17;23;24',
            'siex_estado' => '11  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 8,
            'description' => 'GUARICO',
            'latitud' => '9.45',
            'longitud' => '-67.33',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '1;3;4;5;11;16;17;18',
            'siex_estado' => '12  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 9,
            'description' => 'LARA',
            'latitud' => '10.03',
            'longitud' => '-69.34',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '7;12;14;23;24',
            'siex_estado' => '13  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 10,
            'description' => 'MERIDA',
            'latitud' => '8.59',
            'longitud' => '-71.14',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '5;13;14;24',
            'siex_estado' => '14  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 11,
            'description' => 'MIRANDA',
            'latitud' => '10.34',
            'longitud' => '-67.02',
            'egoogle' => '', 'coordinates' => '',
            'colindante' => '4;6;1;8;15',
            'siex_estado' => '15  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 12,
            'description' => 'PORTUGUESA',
            'latitud' => '9.05',
            'longitud' => '-69.75',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '5;9;14;18',
            'siex_estado' => '18  ',
            'geo_country_id' => 206
        ]);
        
        State::create([
            'id' => 13,
            'description' => 'TACHIRA',
            'latitud' => '7.792',
            'longitud' => '-72.20',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '3;5;10;24',
            'siex_estado' => '20  ',
            'geo_country_id' => 206]
        );

        State::create([
            'id' => 14,
            'description' => 'TRUJILLO',
            'latitud' => '9.31',
            'longitud' => '-70.60',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '5;9;10;12;24',
            'siex_estado' => '21  ',
            'geo_country_id' => 206]
        );

        State::create([
            'id' => 15,
            'description' => 'VARGAS',
            'latitud' => '10.59',
            'longitud' => '-66.94',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '4;6;11',
            'siex_estado' => '24  ',
            'geo_country_id' => 206]
        );

        State::create([
            'id' => 16,
            'description' => 'BOLIVAR',
            'latitud' => '7.50',
            'longitud' => '-64.43',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '1;2;3;18;19;20',
            'siex_estado' => '07  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 17,
            'description' => 'CARABOBO',
            'latitud' => '10.16',
            'longitud' => '-67.98',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '4;7;8;18;23',
            'siex_estado' => '08  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 18,
            'description' => 'COJEDES',
            'latitud' => '9.64',
            'longitud' => '-68.58',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '5;8;9;12;17;23',
            'siex_estado' => '09  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 19,
            'description' => 'DELTA AMACURO',
            'latitud' => '9.06',
            'longitud' => '-62.05',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '16;20',
            'siex_estado' => '10  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 20,
            'description' => 'MONAGAS',
            'latitud' => '9.74',
            'longitud' => '-63.18',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '16;19',
            'siex_estado' => '16  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 21,
            'description' => 'NUEVA ESPARTA',
            'latitud' => '10.96',
            'longitud' => '-64.02',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '1;4;7;11;15;17;19;20;22;24;14',
            'siex_estado' => '17  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 22,
            'description' => 'SUCRE',
            'latitud' => '10.47',
            'longitud' => '-63.43',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '1;20;21',
            'siex_estado' => '19  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 23,
            'description' => 'YARACUY',
            'latitud' => '10.23',
            'longitud' => '-68.70',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '7;9;18;17',
            'siex_estado' => '22  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 24,
            'description' => 'ZULIA',
            'latitud' => '9.85',
            'longitud' => '-71.55',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '7;9;10;13;14',
            'siex_estado' => '23  ',
            'geo_country_id' => 206
        ]);

        State::create([
            'id' => 99,
            'description' => 'Sin descripción',
            'latitud' => '0',
            'longitud' => '0',
            'egoogle' => '',
            'coordinates' => '',
            'colindante' => '0',
            'siex_estado' => '0   ',
            'geo_country_id' => 0
        ]);
        
    }
    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Seeders/DomicileTypesTableSeeder.php`:

```php
<?php

namespace Modules\Common\Database\Seeders;

use Illuminate\Database\Seeder;
use Modules\Common\Entities\GeoLocation\DomicileType;

class DomicileTypesTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DomicileType::create(['id' => 1, 'description' => 'CASA'      ]);
        DomicileType::create(['id' => 2, 'description' => 'EDIFICIO'  ]);        
        DomicileType::create(['id' => 3, 'description' => 'TOWNHOUSE' ]);
        DomicileType::create(['id' => 4, 'description' => 'RESIDENCIA']);
        DomicileType::create(['id' => 5, 'description' => 'CHALÉ'     ]);
        DomicileType::create(['id' => 6, 'description' => 'FINCA'     ]);
        DomicileType::create(['id' => 7, 'description' => 'PENSIÓN'   ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_10_19_181949_create_states_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateStatesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('parishes');
        Schema::connection('pgsql_common')->dropIfExists('municipalities');
        Schema::connection('pgsql_common')->dropIfExists('cities');
        Schema::connection('pgsql_common')->dropIfExists('states');
        Schema::connection('pgsql_common')->create('states', function (Blueprint $table) {            
            $table->id();
            $table->string('description', 60)->unique();
            $table->string('latitud', 20);
            $table->string('longitud', 20);
            $table->string('egoogle', 30);            
            $table->string('coordinates', 30);
            $table->string('colindante', 50);
            $table->string('siex_estado', 4);
            $table->integer('geo_country_id');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('parishes');
        Schema::connection('pgsql_common')->dropIfExists('municipalities');
        Schema::connection('pgsql_common')->dropIfExists('cities');
        Schema::connection('pgsql_common')->dropIfExists('states');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_11_10_210636_create_mu_measure_units_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMuMeasureUnitsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_units');
        Schema::connection('pgsql_common')->create('mu_measure_units', function (Blueprint $table) {
            $table->id();
            $table->integer('mu_measure_unit_types_id')->unsignedInteger();
            $table->string('description');
            $table->string('abbreviate');
            $table->string('comment');
            $table->timestamps();
            $table->foreign('mu_measure_unit_types_id')->references('id')->on('mu_measure_unit_types');
            $table->unique('description');            
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_units');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_10_19_211621_create_municipalities_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMunicipalitiesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('municipalities');
        Schema::connection('pgsql_common')->create('municipalities', function (Blueprint $table) {
            $table->id();          
            $table->integer('state_id')->unsignedInteger();                        
            $table->string('description', 60);
            $table->string('longitud', 20);
            $table->string('latitud', 20);
            $table->string('egoogle', 30)->nullable();
            $table->string('coordinates', 30)->nullable();
            $table->string('siex_municipality', 4);
            $table->integer('city_id');
            $table->timestamps();
            $table->foreign('state_id')->references('id')->on('states');    
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('municipalities');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_11_10_210517_create_mu_measure_unit_types_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMuMeasureUnitTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_units');
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_unit_types');
        Schema::connection('pgsql_common')->create('mu_measure_unit_types', function (Blueprint $table) {
            $table->id();
            $table->string('description');
            $table->timestamps();
            $table->unique('description');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_units');
        Schema::connection('pgsql_common')->dropIfExists('mu_measure_unit_types');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_10_20_165454_create_domicile_types_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateDomicileTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('domicile_types');
        Schema::connection('pgsql_common')->create('domicile_types', function (Blueprint $table) {
            $table->id();
            $table->string('description', 50)->unique();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('domicile_types');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_10_20_165412_create_zone_types_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateZoneTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('zone_types');
        Schema::connection('pgsql_common')->create('zone_types', function (Blueprint $table) {
            $table->id();
            $table->string('description', 50)->unique();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('zone_types');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_10_20_165432_create_route_types_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateRouteTypesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('route_types');
        Schema::connection('pgsql_common')->create('route_types', function (Blueprint $table) {
            $table->id();
            $table->string('description', 50)->unique();               
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('route_types');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_11_10_205407_create_mu_containers_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMuContainersTable extends Migration
{
    // protected $connection = 'pgsql_common';
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {   // https://github.com/nWidart/laravel-modules/issues/1520
        Schema::connection('pgsql_common')->dropIfExists('mu_containers');
        Schema::connection('pgsql_common')->create('mu_containers', function (Blueprint $table) {
            $table->id();           
            $table->string('description');
            $table->timestamps();
            $table->unique('description');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('mu_containers');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_10_19_211743_create_parishes_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateParishesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('parishes');
        Schema::connection('pgsql_common')->create('parishes', function (Blueprint $table) {
            $table->id();
            $table->integer('municipality_id')->unsignedInteger();            
            $table->string('description', 60);
            $table->string('latitud', 20);
            $table->string('longitud', 20);            
            $table->string('egoogle', 30)->nullable();
            $table->string('coordinates', 30)->nullable();
            $table->string('siex_parish', 4);           
            $table->foreign('municipality_id')->references('id')->on('municipalities');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('parishes');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Database/Migrations/2020_10_20_163038_create_cities_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateCitiesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::connection('pgsql_common')->dropIfExists('cities');
        Schema::connection('pgsql_common')->create('cities', function (Blueprint $table) {
            $table->id();
            $table->string('description', 100);   
            $table->integer('state_id')->unsignedInteger();     
            $table->boolean('status')->default(true);
            $table->boolean('borr')->default(false);
            $table->string('cod_city', 2);
            $table->foreign('state_id')->references('id')->on('states');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::connection('pgsql_common')->dropIfExists('cities');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Routes/api.php`:

```php
<?php

use Illuminate\Http\Request;
use Modules\Common\Http\Controllers\GeoLocation\{
    StateController,
    MunicipalityController,
    ParishController,
    CityController,
    ZoneTypeController,
    RouteTypeController,
    DomicileTypeController,
    GeoLocationController
};
use Modules\Common\Http\Controllers\MeasureUnit\{
  MuContainerController,
  MuMeasureUnitTypeController,
  MuMeasureUnitController
};

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group. Enjoy building your API!
|
*/

//Route::middleware('auth:api')->get('/common', function (Request $request) {
//    return $request->user();
//});

Route::group(['prefix' => 'geo-location'], function() {
    Route::get('state', [StateController::class, 'get']);
    Route::get('municipality/{stateId}', [MunicipalityController::class, 'get']);
    Route::get('parish/{municipalityId}', [ParishController::class, 'get']);
    Route::get('city/{municipalityId}', [CityController::class, 'get']);
    Route::get('zone-type', [ZoneTypeController::class, 'get']);
    Route::get('route-type', [RouteTypeController::class, 'get']);
    Route::get('domicile-type', [DomicileTypeController::class, 'get']);
    Route::get('{ids}', [GeoLocationController::class, 'get']);    
});


Route::group(['prefix' => 'common'], function() {
    Route::group(['prefix' => 'measure-unit'], function() {
      Route::get('containers', [MuContainerController::class, 'get']);      
      Route::get('type', [MuMeasureUnitTypeController::class, 'get']);
      Route::get('/{muMeasureUnitTypeId}',  [MuMeasureUnitController::class, 'get']);  
   });
});



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Routes/web.php`:

```php
<?php

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::prefix('common')->group(function() {
    Route::get('/', 'CommonController@index');
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/composer.json`:

```json
{
    "name": "nwidart/common",
    "description": "",
    "authors": [
        {
            "name": "Nicolas Widart",
            "email": "n.widart@gmail.com"
        }
    ],
    "extra": {
        "laravel": {
            "providers": [],
            "aliases": {

            }
        }
    },
    "autoload": {
        "psr-4": {
            "Modules\\Common\\": ""
        }
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/package.json`:

```json
{
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "devDependencies": {
    "axios": "^0.21.4",
    "dotenv": "^10.0.0",
    "dotenv-expand": "^5.1.0",
    "laravel-vite-plugin": "^0.6.0",
    "lodash": "^4.17.21",
    "postcss": "^8.3.7",
    "vite": "^3.0.9"
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/MeasureUnit/MuContainerController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\MeasureUnit;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\MeasureUnit\MuContainer;

class MuContainerController extends Controller
{
    public function get()
    {        
        return MuContainer::select('id', 'description')
               ->get(); 
    }
}



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/MeasureUnit/MuMeasureUnitController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\MeasureUnit;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\MeasureUnit\MuMeasureUnit;

class MuMeasureUnitController extends Controller
{
    public function get(Request $request)
    {        
        return MuMeasureUnit::select('id', 'description')
               ->where('mu_measure_unit_types_id', $request->muMeasureUnitTypeId)
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/MeasureUnit/MuMeasureUnitTypeController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\MeasureUnit;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\MeasureUnit\MuMeasureUnitType;

class MuMeasureUnitTypeController extends Controller
{
    public function get()
    {        
        return MuMeasureUnitType::select('id', 'description')
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/GeoLocation/GeoLocationController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\{
  State,
  Municipality,
  Parish,
  ZoneType,
  RouteType,
  DomicileType
};

class GeoLocationController extends Controller
{
    public function get(Request $request)
    {
        $ids = explode(",", $request->ids);
        $geoLocation = [];
        $geoLocation['state'] = State::select('description')->where('id', $ids[0])->first()->description;
        $geoLocation['municipality'] = Municipality::select('description')->where('id', $ids[1])->first()->description;
        $geoLocation['parish'] = Parish::select('description')->where('id', $ids[2])->first()->description;
        $geoLocation['zone_type'] = ZoneType::select('description')->where('id', $ids[3])->first()->description;
        $geoLocation['route_type'] = RouteType::select('description')->where('id', $ids[4])->first()->description;
        $geoLocation['domicile_type'] = DomicileType::select('description')->where('id', $ids[5])->first()->description;
        return response($geoLocation, 200);               
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/GeoLocation/ZoneTypeController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\ZoneType;

class ZoneTypeController extends Controller
{
    public function get()
    {        
        return ZoneType::select('id', 'description')
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/GeoLocation/ParishController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\Parish;

class ParishController extends Controller
{
    public function get(Request $request)
    {          
        return Parish::select('id', 'description')
            ->where('municipality_id', $request->municipalityId)
            ->get();        
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/GeoLocation/MunicipalityController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\Municipality;

class MunicipalityController extends Controller
{
    public function get(Request $request)
    {       
        return Municipality::select('id', 'description')
            ->where('state_id', $request->stateId)
            ->get();        
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/GeoLocation/StateController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\State;

class StateController extends Controller
{
    public function get()
    {        
        $states = State::select('id', 'description')->get();
        return response($states, 200);               
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/GeoLocation/DomicileTypeController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\DomicileType;

class DomicileTypeController extends Controller
{
    public function get()
    {        
        return DomicileType::select('id', 'description')
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/GeoLocation/CityController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Support\Facades\DB;
use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\City;
use Modules\Common\Entities\GeoLocation\Municipality;

class CityController extends Controller
{
    public function get(Request $request)
    {            
      $citiId = Municipality::select('city_id')
          ->find( $request->municipalityId )
          ->city_id;

      return City::select('id', 'description')
          ->where('id', $citiId)
          ->get();
     
    }    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/GeoLocation/RouteTypeController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\RouteType;

class RouteTypeController extends Controller
{
    public function get()
    {        
        return RouteType::select('id', 'description')
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Http/Controllers/CommonController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers;

use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;

class CommonController extends Controller
{
    /**
     * Display a listing of the resource.
     * @return Renderable
     */
    public function index()
    {
        return view('common::index');
    }

    /**
     * Show the form for creating a new resource.
     * @return Renderable
     */
    public function create()
    {
        return view('common::create');
    }

    /**
     * Store a newly created resource in storage.
     * @param Request $request
     * @return Renderable
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Show the specified resource.
     * @param int $id
     * @return Renderable
     */
    public function show($id)
    {
        return view('common::show');
    }

    /**
     * Show the form for editing the specified resource.
     * @param int $id
     * @return Renderable
     */
    public function edit($id)
    {
        return view('common::edit');
    }

    /**
     * Update the specified resource in storage.
     * @param Request $request
     * @param int $id
     * @return Renderable
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     * @param int $id
     * @return Renderable
     */
    public function destroy($id)
    {
        //
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Providers/RouteServiceProvider.php`:

```php
<?php

namespace Modules\Common\Providers;

use Illuminate\Support\Facades\Route;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The module namespace to assume when generating URLs to actions.
     *
     * @var string
     */
    protected $moduleNamespace = 'Modules\Common\Http\Controllers';

    /**
     * Called before routes are registered.
     *
     * Register any model bindings or pattern based filters.
     *
     * @return void
     */
    public function boot()
    {
        parent::boot();
    }

    /**
     * Define the routes for the application.
     *
     * @return void
     */
    public function map()
    {
        $this->mapApiRoutes();

        $this->mapWebRoutes();
    }

    /**
     * Define the "web" routes for the application.
     *
     * These routes all receive session state, CSRF protection, etc.
     *
     * @return void
     */
    protected function mapWebRoutes()
    {
        Route::middleware('web')
            ->namespace($this->moduleNamespace)
            ->group(module_path('Common', '/Routes/web.php'));
    }

    /**
     * Define the "api" routes for the application.
     *
     * These routes are typically stateless.
     *
     * @return void
     */
    protected function mapApiRoutes()
    {
        Route::prefix('api')
            ->middleware('api')
            ->namespace($this->moduleNamespace)
            ->group(module_path('Common', '/Routes/api.php'));
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Providers/CommonServiceProvider.php`:

```php
<?php

namespace Modules\Common\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Eloquent\Factory;

class CommonServiceProvider extends ServiceProvider
{
    /**
     * @var string $moduleName
     */
    protected $moduleName = 'Common';

    /**
     * @var string $moduleNameLower
     */
    protected $moduleNameLower = 'common';

    /**
     * Boot the application events.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadMigrationsFrom(module_path($this->moduleName, 'Database/Migrations'));
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register config.
     *
     * @return void
     */
    protected function registerConfig()
    {
        $this->publishes([
            module_path($this->moduleName, 'Config/config.php') => config_path($this->moduleNameLower . '.php'),
        ], 'config');
        $this->mergeConfigFrom(
            module_path($this->moduleName, 'Config/config.php'), $this->moduleNameLower
        );
    }

    /**
     * Register views.
     *
     * @return void
     */
    public function registerViews()
    {
        $viewPath = resource_path('views/modules/' . $this->moduleNameLower);

        $sourcePath = module_path($this->moduleName, 'Resources/views');

        $this->publishes([
            $sourcePath => $viewPath
        ], ['views', $this->moduleNameLower . '-module-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->moduleNameLower);
    }

    /**
     * Register translations.
     *
     * @return void
     */
    public function registerTranslations()
    {
        $langPath = resource_path('lang/modules/' . $this->moduleNameLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $this->moduleNameLower);
            $this->loadJsonTranslationsFrom($langPath, $this->moduleNameLower);
        } else {
            $this->loadTranslationsFrom(module_path($this->moduleName, 'Resources/lang'), $this->moduleNameLower);
            $this->loadJsonTranslationsFrom(module_path($this->moduleName, 'Resources/lang'), $this->moduleNameLower);
        }
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (\Config::get('view.paths') as $path) {
            if (is_dir($path . '/modules/' . $this->moduleNameLower)) {
                $paths[] = $path . '/modules/' . $this->moduleNameLower;
            }
        }
        return $paths;
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/MeasureUnit/MuMeasureUnitType.php`:

```php
<?php

namespace Modules\Common\Entities\MeasureUnit;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
//use Modules\Common\Entities\MeasureUnit\MuMeasureUnit;

class MuMeasureUnitType extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\MuMeasureUnitTypeFactory::new();
    }
}





```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/MeasureUnit/MuMeasureUnit.php`:

```php
<?php

namespace Modules\Common\Entities\MeasureUnit;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
//use Modules\Common\Entities\MeasureUnit\MuMeasureUnit;

class MuMeasureUnit extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\MuMeasureUnitFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/MeasureUnit/MuContainer.php`:

```php
<?php

namespace Modules\Common\Entities\MeasureUnit;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class MuContainer extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\MuContainerFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/GeoLocation/ZoneType.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class ZoneType extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\ZoneTypeFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/GeoLocation/DomicileType.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class DomicileType extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\DomicileTypeFactory::new();
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/GeoLocation/Municipality.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Municipality extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\MunicipalityFactory::new();
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/GeoLocation/Parish.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Parish extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\ParishFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/GeoLocation/City.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class City extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\CityFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/GeoLocation/State.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class State extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\StateFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Entities/GeoLocation/RouteType.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class RouteType extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\RouteTypeFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Resources/views/index.blade.php`:

```php
@extends('common::layouts.master')

@section('content')
    <h1>Hello World</h1>

    <p>
        This view is loaded from module: {!! config('common.name') !!}
    </p>
@endsection

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/Resources/views/layouts/master.blade.php`:

```php
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Module Common</title>

       {{-- Laravel Vite - CSS File --}}
       {{-- {{ module_vite('build-common', 'Resources/assets/sass/app.scss') }} --}}

    </head>
    <body>
        @yield('content')

        {{-- Laravel Vite - JS File --}}
        {{-- {{ module_vite('build-common', 'Resources/assets/js/app.js') }} --}}
    </body>
</html>

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/vite.config.js`:

```js
const dotenvExpand = require('dotenv-expand');
dotenvExpand(require('dotenv').config({ path: '../../.env'/*, debug: true*/}));

import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    build: {
        outDir: '../../public/build-common',
        emptyOutDir: true,
        manifest: true,
    },
    plugins: [
        laravel({
            publicDirectory: '../../public',
            buildDirectory: 'build-common',
            input: [
                __dirname + '/Resources/assets/sass/app.scss',
                __dirname + '/Resources/assets/js/app.js'
            ],
            refresh: true,
        }),
    ],
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/zCommon/module.json`:

```json
{
    "name": "Common",
    "alias": "common",
    "description": "",
    "keywords": [],
    "priority": 0,
    "providers": [
        "Modules\\Common\\Providers\\CommonServiceProvider"
    ],
    "files": []    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/composer.json`:

```json
{
    "name": "nwidart/common",
    "description": "",
    "authors": [
        {
            "name": "Nicolas Widart",
            "email": "n.widart@gmail.com"
        }
    ],
    "extra": {
        "laravel": {
            "providers": [],
            "aliases": {

            }
        }
    },
    "autoload": {
        "psr-4": {
            "Modules\\Common\\": "app/",
            "Modules\\Common\\Database\\Factories\\": "database/factories/",
            "Modules\\Common\\Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Modules\\Common\\Tests\\": "tests/"
        }
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/MeasureUnit/MuContainerController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\MeasureUnit;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\MeasureUnit\MuContainer;

class MuContainerController extends Controller
{
    public function get()
    {        
        return MuContainer::select('id', 'description')
               ->get(); 
    }
}



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/MeasureUnit/MuMeasureUnitController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\MeasureUnit;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\MeasureUnit\MuMeasureUnit;

class MuMeasureUnitController extends Controller
{
    public function get(Request $request)
    {        
        return MuMeasureUnit::select('id', 'description')
               ->where('mu_measure_unit_types_id', $request->muMeasureUnitTypeId)
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/MeasureUnit/MuMeasureUnitTypeController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\MeasureUnit;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\MeasureUnit\MuMeasureUnitType;

class MuMeasureUnitTypeController extends Controller
{
    public function get()
    {        
        return MuMeasureUnitType::select('id', 'description')
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/GeoLocation/GeoLocationController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\{
  State,
  Municipality,
  Parish,
  ZoneType,
  RouteType,
  DomicileType
};

class GeoLocationController extends Controller
{
    public function get(Request $request)
    {
        $ids = explode(",", $request->ids);
        $geoLocation = [];
        $geoLocation['state'] = State::select('description')->where('id', $ids[0])->first()->description;
        $geoLocation['municipality'] = Municipality::select('description')->where('id', $ids[1])->first()->description;
        $geoLocation['parish'] = Parish::select('description')->where('id', $ids[2])->first()->description;
        $geoLocation['zone_type'] = ZoneType::select('description')->where('id', $ids[3])->first()->description;
        $geoLocation['route_type'] = RouteType::select('description')->where('id', $ids[4])->first()->description;
        $geoLocation['domicile_type'] = DomicileType::select('description')->where('id', $ids[5])->first()->description;
        return response($geoLocation, 200);               
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/GeoLocation/ZoneTypeController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\ZoneType;

class ZoneTypeController extends Controller
{
    public function get()
    {        
        return ZoneType::select('id', 'description')
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/GeoLocation/ParishController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\Parish;

class ParishController extends Controller
{
    public function get(Request $request)
    {          
        return Parish::select('id', 'description')
            ->where('municipality_id', $request->municipalityId)
            ->get();        
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/GeoLocation/MunicipalityController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\Municipality;

class MunicipalityController extends Controller
{
    public function get(Request $request)
    {       
        return Municipality::select('id', 'description')
            ->where('state_id', $request->stateId)
            ->get();        
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/GeoLocation/StateController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\State;

class StateController extends Controller
{
    public function get()
    {        
        $states = State::select('id', 'description')->get();
        return response($states, 200);               
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/GeoLocation/DomicileTypeController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\DomicileType;

class DomicileTypeController extends Controller
{
    public function get()
    {        
        return DomicileType::select('id', 'description')
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/GeoLocation/CityController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Support\Facades\DB;
use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\City;
use Modules\Common\Entities\GeoLocation\Municipality;

class CityController extends Controller
{
    public function get(Request $request)
    {            
      $citiId = Municipality::select('city_id')
          ->find( $request->municipalityId )
          ->city_id;

      return City::select('id', 'description')
          ->where('id', $citiId)
          ->get();
     
    }    
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/GeoLocation/RouteTypeController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers\GeoLocation;

use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Modules\Common\Entities\GeoLocation\RouteType;

class RouteTypeController extends Controller
{
    public function get()
    {        
        return RouteType::select('id', 'description')
               ->get(); 
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Http/Controllers/CommonController.php`:

```php
<?php

namespace Modules\Common\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class CommonController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        return view('common::index');
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('common::create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Show the specified resource.
     */
    public function show($id)
    {
        return view('common::show');
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit($id)
    {
        return view('common::edit');
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy($id)
    {
        //
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Providers/RouteServiceProvider.php`:

```php
<?php

namespace Modules\Common\Providers;

use Illuminate\Support\Facades\Route;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;

class RouteServiceProvider extends ServiceProvider
{
    protected string $name = 'Common';

    /**
     * Called before routes are registered.
     *
     * Register any model bindings or pattern based filters.
     */
    public function boot(): void
    {
        parent::boot();
    }

    /**
     * Define the routes for the application.
     */
    public function map(): void
    {
        $this->mapApiRoutes();
        $this->mapWebRoutes();
    }

    /**
     * Define the "web" routes for the application.
     *
     * These routes all receive session state, CSRF protection, etc.
     */
    protected function mapWebRoutes(): void
    {
        Route::middleware('web')->group(module_path($this->name, '/routes/web.php'));
    }

    /**
     * Define the "api" routes for the application.
     *
     * These routes are typically stateless.
     */
    protected function mapApiRoutes(): void
    {
        Route::middleware('api')->prefix('api')->name('api.')->group(module_path($this->name, '/routes/api.php'));
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Providers/EventServiceProvider.php`:

```php
<?php

namespace Modules\Common\Providers;

use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event handler mappings for the application.
     *
     * @var array<string, array<int, string>>
     */
    protected $listen = [];

    /**
     * Indicates if events should be discovered.
     *
     * @var bool
     */
    protected static $shouldDiscoverEvents = true;

    /**
     * Configure the proper event listeners for email verification.
     */
    protected function configureEmailVerification(): void
    {
        //
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Providers/CommonServiceProvider.php`:

```php
<?php

namespace Modules\Common\Providers;

use Illuminate\Support\Facades\Blade;
use Illuminate\Support\ServiceProvider;
use Nwidart\Modules\Traits\PathNamespace;

class CommonServiceProvider extends ServiceProvider
{
    use PathNamespace;

    protected string $name = 'Common';

    protected string $nameLower = 'common';

    /**
     * Boot the application events.
     */
    public function boot(): void
    {
        $this->registerCommands();
        $this->registerCommandSchedules();
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadMigrationsFrom(module_path($this->name, 'database/migrations'));
    }

    /**
     * Register the service provider.
     */
    public function register(): void
    {
        $this->app->register(EventServiceProvider::class);
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register commands in the format of Command::class
     */
    protected function registerCommands(): void
    {
        // $this->commands([]);
    }

    /**
     * Register command Schedules.
     */
    protected function registerCommandSchedules(): void
    {
        // $this->app->booted(function () {
        //     $schedule = $this->app->make(Schedule::class);
        //     $schedule->command('inspire')->hourly();
        // });
    }

    /**
     * Register translations.
     */
    public function registerTranslations(): void
    {
        $langPath = resource_path('lang/modules/'.$this->nameLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $this->nameLower);
            $this->loadJsonTranslationsFrom($langPath);
        } else {
            $this->loadTranslationsFrom(module_path($this->name, 'lang'), $this->nameLower);
            $this->loadJsonTranslationsFrom(module_path($this->name, 'lang'));
        }
    }

    /**
     * Register config.
     */
    protected function registerConfig(): void
    {
        $this->publishes([module_path($this->name, 'config/config.php') => config_path($this->nameLower.'.php')], 'config');
        $this->mergeConfigFrom(module_path($this->name, 'config/config.php'), $this->nameLower);
    }

    /**
     * Register views.
     */
    public function registerViews(): void
    {
        $viewPath = resource_path('views/modules/'.$this->nameLower);
        $sourcePath = module_path($this->name, 'resources/views');

        $this->publishes([$sourcePath => $viewPath], ['views', $this->nameLower.'-module-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->nameLower);

        $componentNamespace = $this->module_namespace($this->name, $this->app_path(config('modules.paths.generator.component-class.path')));
        Blade::componentNamespace($componentNamespace, $this->nameLower);
    }

    /**
     * Get the services provided by the provider.
     */
    public function provides(): array
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (config('view.paths') as $path) {
            if (is_dir($path.'/modules/'.$this->nameLower)) {
                $paths[] = $path.'/modules/'.$this->nameLower;
            }
        }

        return $paths;
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/MeasureUnit/MuMeasureUnitType.php`:

```php
<?php

namespace Modules\Common\Entities\MeasureUnit;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
//use Modules\Common\Entities\MeasureUnit\MuMeasureUnit;

class MuMeasureUnitType extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\MuMeasureUnitTypeFactory::new();
    }
}





```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/MeasureUnit/MuMeasureUnit.php`:

```php
<?php

namespace Modules\Common\Entities\MeasureUnit;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
//use Modules\Common\Entities\MeasureUnit\MuMeasureUnit;

class MuMeasureUnit extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\MuMeasureUnitFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/MeasureUnit/MuContainer.php`:

```php
<?php

namespace Modules\Common\Entities\MeasureUnit;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class MuContainer extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\MuContainerFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/GeoLocation/ZoneType.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class ZoneType extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\ZoneTypeFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/GeoLocation/DomicileType.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class DomicileType extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\DomicileTypeFactory::new();
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/GeoLocation/Municipality.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Municipality extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\MunicipalityFactory::new();
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/GeoLocation/Parish.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Parish extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\ParishFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/GeoLocation/City.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class City extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\CityFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/GeoLocation/State.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class State extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\StateFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/app/Entities/GeoLocation/RouteType.php`:

```php
<?php

namespace Modules\Common\Entities\GeoLocation;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class RouteType extends Model
{
    use HasFactory;
    
    protected $connection = 'pgsql_common';

    protected $fillable = [];
    
    protected static function newFactory()
    {
        return \Modules\Common\Database\factories\RouteTypeFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/package.json`:

```json
{
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "devDependencies": {
    "axios": "^1.1.2",
    "laravel-vite-plugin": "^0.7.5",
    "sass": "^1.69.5",
    "postcss": "^8.3.7",
    "vite": "^4.0.0"
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/routes/api.php`:

```php
<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Http\Request;
//use Modules\Common\Http\Controllers\CommonController;


use Modules\Common\Http\Controllers\GeoLocation\{
    StateController,
    MunicipalityController,
    ParishController,
    CityController,
    ZoneTypeController,
    RouteTypeController,
    DomicileTypeController,
    GeoLocationController
};
use Modules\Common\Http\Controllers\MeasureUnit\{
  MuContainerController,
  MuMeasureUnitTypeController,
  MuMeasureUnitController
};

/*
 *--------------------------------------------------------------------------
 * API Routes
 *--------------------------------------------------------------------------
 *
 * Here is where you can register API routes for your application. These
 * routes are loaded by the RouteServiceProvider within a group which
 * is assigned the "api" middleware group. Enjoy building your API!
 *
*/

//Route::middleware(['auth:sanctum'])->prefix('v1')->group(function () {
//    Route::apiResource('common', CommonController::class)->names('common');
//});


//Route::middleware('auth:api')->get('/common', function (Request $request) {
//    return $request->user();
//});

Route::group(['prefix' => 'geo-location'], function() {
    Route::get('state', [StateController::class, 'get']);
    Route::get('municipality/{stateId}', [MunicipalityController::class, 'get']);
    Route::get('parish/{municipalityId}', [ParishController::class, 'get']);
    Route::get('city/{municipalityId}', [CityController::class, 'get']);
    Route::get('zone-type', [ZoneTypeController::class, 'get']);
    Route::get('route-type', [RouteTypeController::class, 'get']);
    Route::get('domicile-type', [DomicileTypeController::class, 'get']);
    Route::get('{ids}', [GeoLocationController::class, 'get']);    
});


Route::group(['prefix' => 'common'], function() {
    Route::group(['prefix' => 'measure-unit'], function() {
      Route::get('containers', [MuContainerController::class, 'get']);      
      Route::get('type', [MuMeasureUnitTypeController::class, 'get']);
      Route::get('/{muMeasureUnitTypeId}',  [MuMeasureUnitController::class, 'get']);  
   });
});



```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/routes/web.php`:

```php
<?php

use Illuminate\Support\Facades\Route;
use Modules\Common\Http\Controllers\CommonController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::group([], function () {
    Route::resource('common', CommonController::class)->names('common');
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/vite.config.js`:

```js
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    build: {
        outDir: '../../public/build-common',
        emptyOutDir: true,
        manifest: true,
    },
    plugins: [
        laravel({
            publicDirectory: '../../public',
            buildDirectory: 'build-common',
            input: [
                __dirname + '/resources/assets/sass/app.scss',
                __dirname + '/resources/assets/js/app.js'
            ],
            refresh: true,
        }),
    ],
});

//export const paths = [
//    'Modules/Common/resources/assets/sass/app.scss',
//    'Modules/Common/resources/assets/js/app.js',
//];
```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Common/module.json`:

```json
{
    "name": "Common",
    "alias": "common",
    "description": "",
    "keywords": [],
    "priority": 0,
    "providers": [
        "Modules\\Common\\Providers\\CommonServiceProvider"
    ],
    "files": []
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/resources/views/index.blade.php`:

```php
@extends('article::layouts.master')

@section('content')
    <h1>Hello World</h1>

    <p>Module: {!! config('article.name') !!}</p>
@endsection

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/resources/views/layouts/master.blade.php`:

```php
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>Article Module - {{ config('app.name', 'Laravel') }}</title>

    <meta name="description" content="{{ $description ?? '' }}">
    <meta name="keywords" content="{{ $keywords ?? '' }}">
    <meta name="author" content="{{ $author ?? '' }}">

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    {{-- Vite CSS --}}
    {{-- {{ module_vite('build-article', 'resources/assets/sass/app.scss') }} --}}
</head>

<body>
    @yield('content')

    {{-- Vite JS --}}
    {{-- {{ module_vite('build-article', 'resources/assets/js/app.js') }} --}}
</body>

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/database/factories/ArticleFactory.php`:

```php
<?php

namespace Modules\Article\Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
//use Illuminate\Support\Str;

class ArticleFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = \Modules\Article\Entities\Article::class;

    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [        
            'int_cod' => $this->faker->regexify('[A-Z]{5}[0-9]{10}'),
            'name' => strtoupper($this->faker->word())
        ];
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/database/factories/ArticleDetailFactory.php`:

```php
<?php

namespace Modules\Article\Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
//use Illuminate\Support\Str;

class ArticleDetailFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = \Modules\Article\Entities\ArticleDetail::class;

    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [        
            'presentation_id' => rand(1, 3),
        ];
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/database/seeders/ArticleDatabaseSeeder.php`:

```php
<?php

namespace Modules\Article\Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use Modules\Article\Entities\Article;

class ArticleDatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Model::unguard();
        
        for ($x = 0; $x < 10; $x++) {
            Article::factory()
                ->hasArticleDetails(1)
                ->create();
        }
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/database/migrations/2021_01_06_204637_create_article_details_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateArticleDetailsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('article_details', function (Blueprint $table) {
            $table->id();
            $table->integer('article_id');//bigInteger
            $table->integer('presentation_id');
            $table->integer('quantity')->default(1);            
            $table->integer('status')->default(1);                                  
            $table->integer('user_insert_id')->default(1);
            $table->integer('user_update_id')->default(1);
            $table->unique(['article_id', 'presentation_id']);
            $table->foreign('article_id')
                ->references('id')
                ->on('articles')
                ->onDelete('cascade')
                ->onUpdate('cascade');
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('article_details');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/database/migrations/2021_01_06_204553_create_articles_table.php`:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateArticlesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('articles', function (Blueprint $table) {
            $table->id();            
            $table->string('int_cod', 15);
            $table->string('name',50);
            $table->float('price')->nullable();
            $table->integer('stock_min')->default(5);
            $table->integer('stock_max')->default(5);
            $table->integer('status')->default(1);
            $table->string('photo')->default('');          
            $table->integer('id_user_insert')->default(1);
            $table->integer('id_user_update')->default(1);
            $table->timestamps();
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('articles');
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/config/config.php`:

```php
<?php

return [
    'name' => 'Article',
];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/Config/config.php`:

```php
<?php

return [
    'name' => 'Article'
];

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/Routes/apiArticleDetail.php`:

```php
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Modules\Article\Http\Controllers\ArticleDetailController;

Route::middleware(['auth:sanctum'])->group(function () {
    Route::prefix('article_details')->group(function () {  
        Route::get('/{articleId}', [ArticleDetailController::class, 'getAllByArticle']);
        Route::get('/{article_detail}', [ArticleDetailController::class, 'show']);
        Route::post('/', [ArticleDetailController::class, 'store']);
        Route::put('/{article_detail}', [ArticleDetailController::class, 'update']);
        Route::delete('/{id}', [ArticleDetailController::class,'destroy']);
    });
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/Routes/apiArticle.php`:

```php
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Modules\Article\Http\Controllers\ArticleController;

Route::middleware(['auth:sanctum'])->group(function () {
    Route::prefix('articles')->group(function () {
        Route::get('/', [ArticleController::class, 'index']);
        Route::get('/{article}', [ArticleController::class, 'show']);
        Route::post('/', [ArticleController::class, 'store']);
        Route::put('/{article}', [ArticleController::class, 'update']);
        Route::delete('/{id}', [ArticleController::class,'destroy']);
    });
    Route::get('/articles-help', [ArticleController::class, 'help']);
});


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/Routes/web.php`:

```php
<?php

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::prefix('article')->group(function() {
    Route::get('/', 'ArticleController@index');
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/composer.json`:

```json
{
    "name": "nwidart/article",
    "description": "",
    "authors": [
        {
            "name": "Nicolas Widart",
            "email": "n.widart@gmail.com"
        }
    ],
    "extra": {
        "laravel": {
            "providers": [],
            "aliases": {

            }
        }
    },
    "autoload": {
        "psr-4": {
            "Modules\\Article\\": ""
        }
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/package.json`:

```json
{
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "devDependencies": {
    "axios": "^0.21.4",
    "dotenv": "^10.0.0",
    "dotenv-expand": "^5.1.0",
    "laravel-vite-plugin": "^0.6.0",
    "lodash": "^4.17.21",
    "postcss": "^8.3.7",
    "vite": "^3.0.9"
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/Providers/RouteServiceProvider.php`:

```php
<?php

namespace Modules\Article\Providers;

use Illuminate\Support\Facades\Route;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The module namespace to assume when generating URLs to actions.
     *
     * @var string
     */
    protected $moduleNamespace = 'Modules\Article\Http\Controllers';

    /**
     * Called before routes are registered.
     *
     * Register any model bindings or pattern based filters.
     *
     * @return void
     */
    public function boot()
    {
        parent::boot();
    }

    /**
     * Define the routes for the application.
     *
     * @return void
     */
    public function map()
    {
        $this->mapApiRoutes();

        $this->mapWebRoutes();
    }

    /**
     * Define the "web" routes for the application.
     *
     * These routes all receive session state, CSRF protection, etc.
     *
     * @return void
     */
    protected function mapWebRoutes()
    {
        Route::middleware('web')
            ->namespace($this->moduleNamespace)
            ->group(module_path('Article', '/Routes/web.php'));
    }

    /**
     * Define the "api" routes for the application.
     *
     * These routes are typically stateless.
     *
     * @return void
     */
    protected function mapApiRoutes()
    {
        Route::prefix('api')
            ->middleware('api')
            ->namespace($this->moduleNamespace)
            ->group(module_path('Article', '/Routes/api.php'));
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/Providers/ArticleServiceProvider.php`:

```php
<?php

namespace Modules\Article\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Eloquent\Factory;

class ArticleServiceProvider extends ServiceProvider
{
    /**
     * @var string $moduleName
     */
    protected $moduleName = 'Article';

    /**
     * @var string $moduleNameLower
     */
    protected $moduleNameLower = 'article';

    /**
     * Boot the application events.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadMigrationsFrom(module_path($this->moduleName, 'Database/Migrations'));
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register config.
     *
     * @return void
     */
    protected function registerConfig()
    {
        $this->publishes([
            module_path($this->moduleName, 'Config/config.php') => config_path($this->moduleNameLower . '.php'),
        ], 'config');
        $this->mergeConfigFrom(
            module_path($this->moduleName, 'Config/config.php'), $this->moduleNameLower
        );
    }

    /**
     * Register views.
     *
     * @return void
     */
    public function registerViews()
    {
        $viewPath = resource_path('views/modules/' . $this->moduleNameLower);

        $sourcePath = module_path($this->moduleName, 'Resources/views');

        $this->publishes([
            $sourcePath => $viewPath
        ], ['views', $this->moduleNameLower . '-module-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->moduleNameLower);
    }

    /**
     * Register translations.
     *
     * @return void
     */
    public function registerTranslations()
    {
        $langPath = resource_path('lang/modules/' . $this->moduleNameLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $this->moduleNameLower);
            $this->loadJsonTranslationsFrom($langPath, $this->moduleNameLower);
        } else {
            $this->loadTranslationsFrom(module_path($this->moduleName, 'Resources/lang'), $this->moduleNameLower);
            $this->loadJsonTranslationsFrom(module_path($this->moduleName, 'Resources/lang'), $this->moduleNameLower);
        }
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (\Config::get('view.paths') as $path) {
            if (is_dir($path . '/modules/' . $this->moduleNameLower)) {
                $paths[] = $path . '/modules/' . $this->moduleNameLower;
            }
        }
        return $paths;
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/Repositories/ArticleDetailRepository.php`:

```php
<?php

namespace Modules\Article\Repositories;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
//use Illuminate\Support\Facades\Http;
use Modules\Article\Entities\ArticleDetail;
//use Modules\Article\Entities\Article;
use Modules\Product\Entities\Presentation;

class ArticleDetailRepository extends ArticleDetail
{
    
    static public function getAllByArticle($request)//: Collection
    {
        $articleDetails = ArticleDetail::where('article_id', $request->articleId)->get();

        foreach ($articleDetails as $key => $value) {
            //$response = Http::get("http://localhost:8000/api/" . 'presentations/' . $value['presentation_id'])[0];
            //$articleDetails[$key]['category'] = $response['category'];
            //$articleDetails[$key]['name'] = $response['name'];
            //$articleDetails[$key]['mark'] = $response['mark'];
            //$articleDetails[$key]['packing_deployment'] = $response['packing_deployment'];
            
            
  
            
            
            $response = Presentation::select(
            DB::raw("* ,presentation_deploy(presentations.id) as packing_deployed")
        )->find($value['presentation_id']);
            $articleDetails[$key]['bar_cod'] = $response['bar_cod'];
            $articleDetails[$key]['category'] = $response['product']['category']['name'];
            $articleDetails[$key]['product'] = $response['product']['name'];
            $articleDetails[$key]['mark'] = $response['product']['mark']['name'];
            $articleDetails[$key]['packing_deployed'] = $response['packing_deployed'];
        }


        return $articleDetails;
    }
    
}

//packing
//product

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/Resources/views/index.blade.php`:

```php
@extends('article::layouts.master')

@section('content')
    <h1>Hello World</h1>

    <p>
        This view is loaded from module: {!! config('article.name') !!}
    </p>
@endsection

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/Resources/views/layouts/master.blade.php`:

```php
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Module Article</title>

       {{-- Laravel Vite - CSS File --}}
       {{-- {{ module_vite('build-article', 'Resources/assets/sass/app.scss') }} --}}

    </head>
    <body>
        @yield('content')

        {{-- Laravel Vite - JS File --}}
        {{-- {{ module_vite('build-article', 'Resources/assets/js/app.js') }} --}}
    </body>
</html>

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/vite.config.js`:

```js
const dotenvExpand = require('dotenv-expand');
dotenvExpand(require('dotenv').config({ path: '../../.env'/*, debug: true*/}));

import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    build: {
        outDir: '../../public/build-article',
        emptyOutDir: true,
        manifest: true,
    },
    plugins: [
        laravel({
            publicDirectory: '../../public',
            buildDirectory: 'build-article',
            input: [
                __dirname + '/Resources/assets/sass/app.scss',
                __dirname + '/Resources/assets/js/app.js'
            ],
            refresh: true,
        }),
    ],
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/zArticleDelete/module.json`:

```json
{
    "name": "Article",
    "alias": "article",
    "description": "",
    "keywords": [],
    "priority": 0,
    "providers": [
        "Modules\\Article\\Providers\\ArticleServiceProvider"
    ],
    "files": []
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/composer.json`:

```json
{
    "name": "nwidart/article",
    "description": "",
    "authors": [
        {
            "name": "Nicolas Widart",
            "email": "n.widart@gmail.com"
        }
    ],
    "extra": {
        "laravel": {
            "providers": [],
            "aliases": {

            }
        }
    },
    "autoload": {
        "psr-4": {
            "Modules\\Article\\": "app/",
            "Modules\\Article\\Database\\Factories\\": "database/factories/",
            "Modules\\Article\\Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Modules\\Article\\Tests\\": "tests/"
        }
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Requests/ArticleDetail/StoreArticleDetailRequest.php`:

```php
<?php

namespace Modules\Article\Http\Requests\ArticleDetail;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StoreArticleDetailRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): Bool
    {
        return true; //auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     */
    public function rules(): Array
    {
        return  [
            'article_id' => ["required"],           
            'presentation_id' => ["required"],           
            'quantity' => ["required"],           
            'status' => ["required"],           
            'user_insert_id' => ["required"], 
            'user_update_id' => ["required"]           
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Requests/ArticleDetail/UpdateArticleDetailRequest.php`:

```php
<?php

namespace Modules\Article\Http\Requests\ArticleDetail;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdateArticleDetailRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): Bool
    {
        return true; //auth()->user()->role->name === "admin";
    }

    /**
     * Get the validation rules that apply to the request.
     */
    public function rules(): Array
    {
        return  [
            'article_id' => ["required"],             
            'presentation_id' => ["required"],             
            'quantity' => ["required"],             
            'status' => ["required"],             
            'user_insert_id' => ["required"],
            'user_update_id' => ["required"]             
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Requests/Article/UpdateArticleRequest.php`:

```php
<?php

namespace Modules\Article\Http\Requests\Article;

use Illuminate\Foundation\Http\FormRequest;

class UpdateArticleRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     */
    public function rules(): array
    {
        return [
            "int_cod" => ["required"],  
            "name" => ["required"],  
            "price" => ["required"],  
            "stock_min" => ["required"],  
            "stock_max" => ["required"],  
            "status" => ["required"],  
            "photo" => ["required"],  
            //"id_user_insert" => ["required"],  
            //"id_user_update" => ["required"] 
            
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Requests/Article/StoreArticleRequest.php`:

```php
<?php

namespace Modules\Article\Http\Requests\Article;

use Illuminate\Foundation\Http\FormRequest;

class StoreArticleRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     */
    public function rules(): array
    {
        return [
            "int_cod" => ["required"],  
            "name" => ["required"],  
            "price" => ["required"],  
            "stock_min" => ["required"],  
            "stock_max" => ["required"],  
            "status" => ["required"],  
            "photo" => ["required"],  
           // "id_user_insert" => ["required"],  
           // "id_user_update" => ["required"] 
            
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Controllers/ArticleDetailController.php`:

```php
<?php

namespace Modules\Article\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Routing\Controller;
use Illuminate\Database\Eloquent\Collection;
use Modules\Article\Entities\ArticleDetail;
use Modules\Article\Repositories\ArticleDetailRepository;
use Modules\Article\Http\Requests\ArticleDetail\{
    StoreArticleDetailRequest,
    UpdateArticleDetailRequest    
};
use Modules\Article\Http\Services\ArticleDetail\{
    StoreArticleDetailService,
    UpdateArticleDetailService
}; 

class ArticleDetailController extends Controller
{
    /**
     * Display a listing of the resource by parent.
     */
    public function getAllByArticle(Request $request)//: Collection
    {
        return ArticleDetailRepository::getAllByArticle($request);
    }

    /**
     * Store a newly created resource in storage.
     */    
    //public function store(StoreArticleDetailRequest $request): JsonResponse
    public function store(Request $request): JsonResponse
    {
        //return  response()->json($request, 201);
        return StoreArticleDetailService::execute($request);
    }
    
    /**
     * Update the specified resource in storage.
     */
    public function update(UpdateArticleDetailRequest $request, ArticleDetail $article_detail): JsonResponse
    {
        return UpdateArticleDetailService::execute($request, $article_detail);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Request $request): JsonResponse
    {
        ArticleDetail::destroy($request->id);

        return response()->json(204);            
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Controllers/ArticleController.php`:

```php
<?php

namespace Modules\Article\Http\Controllers;

use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\{Request, JsonResponse};
use Illuminate\Routing\Controller;
use Modules\Article\Http\Resources\ArticleResource;
use Modules\Article\Http\Requests\Article\{
    StoreArticleRequest,
    UpdateArticleRequest
};
use Modules\Article\Http\Services\Article\{
    StoreArticleService,
    IndexArticleService,
    UpdateArticleService
};
use Modules\Article\Entities\Article;
//use Modules\Product\Entities\Presentation;
use Illuminate\Support\Facades\DB;


class ArticleController extends Controller
{
    /*
     * Display a listing of the resource.
     */
    public function index(Request $request): JsonResponse
    {
        return IndexArticleService::execute($request);
    }

    /**
     * Store a newly created resource in storage.
     */ 
    public function store(StoreArticleRequest $request): JsonResponse
    {
        return StoreArticleService::execute($request);
    }

    /**
     * Display the specified resource.
    */
    public function show(Article $article): ArticleResource | JsonResponse
    {
        return new ArticleResource($article);
    }

    /**
     * Update the specified resource in storage.
     */     
    public function update(UpdateArticleRequest $request, Article $article): JsonResponse
    {
        return UpdateArticleService::execute($request, $article);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Request $request): JsonResponse
    {      
        Article::destroy($request->id);
        return response()->json(204);
    }

    /*
     * Display a listing of the resource to help.
     */
    public function help(): JsonResponse
    {
        return response()->json(Article::all());
    }

    public function search(Request $request): JsonResponse
    {
        // Initialize query
        $query = Article::query()
            ->selectRaw("
                    articles.id,
                    articles.int_cod,
                    articles.name,
                    articles.price,
                    articles.stock_min,
                    articles.stock_max,
                    articles.status,
                    articles.photo,
                    CASE WHEN view_stock_movement.total IS NULL THEN 0 ELSE view_stock_movement.total END as stock_existence")
                ->leftjoin("view_stock_movement"  , "articles.id"  , "=", "view_stock_movement.article_id");

        // search 
        $search = strtoupper($request->input("search"));
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                    ->where  (DB::raw("UPPER(articles.int_cod)"        ), "like", "%$search%")
                    ->orWhere(DB::raw("UPPER(articles.name)"  ), "like", "%$search%");
            });
        }

        // sort 
        $sort = $request->input("sort");
        $direction = $request->input("direction") === "desc" ? "desc" : "asc";        
        ($sort)
            ? $query->orderBy($sort, $direction) 
                : $query->orderBy("articles.id", "asc");

        // get paginated results 
        $presentations = $query
            ->paginate(5)
            ->appends(request()->query());

        return response()->json([
            "rows" => $presentations,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Resources/ArticleResource.php`:

```php
<?php

namespace Modules\Article\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class ArticleResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     */
    public function toArray(Request $request): array
    {
        return [
            'int_cod' => $this->int_cod,
            'name' => $this->name,
            'price' => $this->price,
            'stock_min' => $this->stock_min,
            'stock_max' => $this->stock_max,
            'status' => $this->status,
            'photo' => $this->photo,
            'id_user_insert' => $this->id_user_insert,
            'id_user_update' => $this->id_user_update,
            
        ];
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Services/ArticleDetail/UpdateArticleDetailService.php`:

```php
<?php
namespace Modules\Article\Http\Services\ArticleDetail;

use Illuminate\Http\JsonResponse;
use Modules\Article\Entities\ArticleDetail;
use Modules\Article\Http\Requests\ArticleDetail\UpdateArticleDetailRequest;

class UpdateArticleDetailService
{
  
    static public function execute(UpdateArticleDetailRequest $request, ArticleDetail $article_detail): JsonResponse
    {     
        
        $article_detail->article_id = $request->article_id;
        $article_detail->presentation_id = $request->presentation_id;
        $article_detail->quantity = $request->quantity;
        $article_detail->status = $request->status;
        $article_detail->user_insert_id = $request->user_insert_id;
        $article_detail->user_update_id = $request->user_update_id;

        $article_detail->save();        

        return response()->json([
            'message' => 'ArticleDetail updated'            
        ], 200);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Services/ArticleDetail/StoreArticleDetailService.php`:

```php
<?php
namespace Modules\Article\Http\Services\ArticleDetail;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Modules\Article\Entities\ArticleDetail;
use Modules\Article\Http\Requests\ArticleDetail\StoreArticleDetailRequest;

class StoreArticleDetailService
{
  
    //static public function execute(StoreArticleDetailRequest $request): JsonResponse
    static public function execute(Request $request): JsonResponse
    {

        //return response()->json($request[0]);

        ArticleDetail::where('article_id', intval($request[0]["article_id"]))->forceDelete();

        foreach ($request->all() as $rqst) {
            $articleDetail = new ArticleDetail();
            $articleDetail->article_id = $rqst["article_id"];
            $articleDetail->presentation_id = $rqst["id"];
            $articleDetail->quantity = $rqst["quantity"];
            //$articleDetail->status = $rqst["status;
            //$articleDetail->user_insert_id = $rqst["user_insert_id;
            //$articleDetail->user_update_id = $rqst["user_update_id;
            $articleDetail->save();            
        }

        return response()->json([
            'message' => 'Article detail created',
        ], 201);
    }

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Services/Article/IndexArticleService.php`:

```php
<?php

namespace Modules\Article\Http\Services\Article;

use Illuminate\Http\{
    Request,
    JsonResponse
};
use Modules\Article\Entities\Article;

class IndexArticleService
{

  /**
   * Display a listing of the resource.
   */
  static public function execute(Request $request): JsonResponse
  {
      /* Initialize query */
        $query = Article::query();

        /* search */
        $search = strtolower($request->input("search"));
        if ($search) {
            $query->where(function ($query) use ($search) {
                $query
                ->where(\DB::raw('lower(int_cod)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(name)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(price)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(stock_min)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(stock_max)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(status)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(photo)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(id_user_insert)') , "like", "%$search%")                
                ->orWhere(\DB::raw('lower(id_user_update)') , "like", "%$search%")                
                ;
            });
        }

        /* sort */
        $sort = $request->input("sort");
        $direction = $request->input("direction") == "desc" ? "desc" : "asc";
        if ($sort) {
            $query->orderBy($sort, $direction);
        }

        /* get paginated results */
        $articles = $query
            ->paginate(5)
            ->appends(request()->query());
            
        return response()->json([
            "rows" => $articles,
            "sort" => $request->query("sort"),
            "direction" => $request->query("direction"),
            "search" => $request->query("search")
        ]);

  }  

}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Services/Article/StoreArticleService.php`:

```php
<?php
namespace Modules\Article\Http\Services\Article;

use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Modules\Article\Http\Requests\Article\StoreArticleRequest;
use Modules\Article\Entities\Article;

class StoreArticleService
{
    static public function execute(StoreArticleRequest $request): JsonResponse
    {
        $article = new Article;

        $article->int_cod = $request->int_cod;
        $article->name = $request->name;
        $article->price = $request->price;
        $article->stock_min = $request->stock_min;
        $article->stock_max = $request->stock_max;
        $article->status = $request->status;
        $article->photo = $request->photo;
        $article->id_user_insert = Auth::user()->id;
        $article->id_user_update = Auth::user()->id;
        
        $article->save();

        $article->refresh();

        return response()->json([
            "message" => "New record created successfully", 
            "id" => $article->id
        ], 201);
  }

}
```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Http/Services/Article/UpdateArticleService.php`:

```php
<?php
namespace Modules\Article\Http\Services\Article;

use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Modules\Article\Http\Requests\Article\UpdateArticleRequest;
use Modules\Article\Entities\Article;

class UpdateArticleService
{
    static public function execute(UpdateArticleRequest $request, Article $article): JsonResponse
    {          
        // $article = Article::find($request->id);

        $article->int_cod = $request->int_cod;
        $article->name = $request->name;
        $article->price = $request->price;
        $article->stock_min = $request->stock_min;
        $article->stock_max = $request->stock_max;
        $article->status = $request->status;
        $article->photo = $request->photo;
        $article->id_user_update = Auth::user()->id;
        
        $article->save();

        return response()->json([
            "message"=> "Record updated successfully"
        ], 200);      
    }
}


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Providers/RouteServiceProvider.php`:

```php
<?php

namespace Modules\Article\Providers;

use Illuminate\Support\Facades\Route;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;

class RouteServiceProvider extends ServiceProvider
{
    protected string $name = 'Article';

    /**
     * Called before routes are registered.
     *
     * Register any model bindings or pattern based filters.
     */
    public function boot(): void
    {
        parent::boot();
    }

    /**
     * Define the routes for the application.
     */
    public function map(): void
    {
        $this->mapApiRoutes();
        $this->mapWebRoutes();
    }

    /**
     * Define the "web" routes for the application.
     *
     * These routes all receive session state, CSRF protection, etc.
     */
    protected function mapWebRoutes(): void
    {
        Route::middleware('web')->group(module_path($this->name, '/routes/web.php'));
    }

    /**
     * Define the "api" routes for the application.
     *
     * These routes are typically stateless.
     */
    protected function mapApiRoutes(): void
    {
        Route::middleware('api')->prefix('api')->name('api.')->group(module_path($this->name, '/routes/api.php'));
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Providers/EventServiceProvider.php`:

```php
<?php

namespace Modules\Article\Providers;

use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event handler mappings for the application.
     *
     * @var array<string, array<int, string>>
     */
    protected $listen = [];

    /**
     * Indicates if events should be discovered.
     *
     * @var bool
     */
    protected static $shouldDiscoverEvents = true;

    /**
     * Configure the proper event listeners for email verification.
     */
    protected function configureEmailVerification(): void
    {
        //
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Providers/ArticleServiceProvider.php`:

```php
<?php

namespace Modules\Article\Providers;

use Illuminate\Support\Facades\Blade;
use Illuminate\Support\ServiceProvider;
use Nwidart\Modules\Traits\PathNamespace;

class ArticleServiceProvider extends ServiceProvider
{
    use PathNamespace;

    protected string $name = 'Article';

    protected string $nameLower = 'article';

    /**
     * Boot the application events.
     */
    public function boot(): void
    {
        $this->registerCommands();
        $this->registerCommandSchedules();
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadMigrationsFrom(module_path($this->name, 'database/migrations'));
    }

    /**
     * Register the service provider.
     */
    public function register(): void
    {
        $this->app->register(EventServiceProvider::class);
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register commands in the format of Command::class
     */
    protected function registerCommands(): void
    {
        // $this->commands([]);
    }

    /**
     * Register command Schedules.
     */
    protected function registerCommandSchedules(): void
    {
        // $this->app->booted(function () {
        //     $schedule = $this->app->make(Schedule::class);
        //     $schedule->command('inspire')->hourly();
        // });
    }

    /**
     * Register translations.
     */
    public function registerTranslations(): void
    {
        $langPath = resource_path('lang/modules/'.$this->nameLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $this->nameLower);
            $this->loadJsonTranslationsFrom($langPath);
        } else {
            $this->loadTranslationsFrom(module_path($this->name, 'lang'), $this->nameLower);
            $this->loadJsonTranslationsFrom(module_path($this->name, 'lang'));
        }
    }

    /**
     * Register config.
     */
    protected function registerConfig(): void
    {
        $this->publishes([module_path($this->name, 'config/config.php') => config_path($this->nameLower.'.php')], 'config');
        $this->mergeConfigFrom(module_path($this->name, 'config/config.php'), $this->nameLower);
    }

    /**
     * Register views.
     */
    public function registerViews(): void
    {
        $viewPath = resource_path('views/modules/'.$this->nameLower);
        $sourcePath = module_path($this->name, 'resources/views');

        $this->publishes([$sourcePath => $viewPath], ['views', $this->nameLower.'-module-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->nameLower);

        $componentNamespace = $this->module_namespace($this->name, $this->app_path(config('modules.paths.generator.component-class.path')));
        Blade::componentNamespace($componentNamespace, $this->nameLower);
    }

    /**
     * Get the services provided by the provider.
     */
    public function provides(): array
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (config('view.paths') as $path) {
            if (is_dir($path.'/modules/'.$this->nameLower)) {
                $paths[] = $path.'/modules/'.$this->nameLower;
            }
        }

        return $paths;
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Repositories/ArticleDetailRepository.php`:

```php
<?php

namespace Modules\Article\Repositories;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
//use Illuminate\Support\Facades\Http;
use Modules\Article\Entities\ArticleDetail;
//use Modules\Article\Entities\Article;
use Modules\Product\Entities\Presentation;

class ArticleDetailRepository extends ArticleDetail
{
    
    static public function getAllByArticle($request)//: Collection
    {
        $articleDetails = ArticleDetail::where('article_id', $request->articleId)->get();

        foreach ($articleDetails as $key => $value) {
            //$response = Http::get("http://localhost:8000/api/" . 'presentations/' . $value['presentation_id'])[0];
            //$articleDetails[$key]['category'] = $response['category'];
            //$articleDetails[$key]['name'] = $response['name'];
            //$articleDetails[$key]['mark'] = $response['mark'];
            //$articleDetails[$key]['packing_deployment'] = $response['packing_deployment'];
            
            
  
            
            
            $response = Presentation::select(
            DB::raw("* ,presentation_deploy(presentations.id) as packing_deployed")
        )->find($value['presentation_id']);
            $articleDetails[$key]['bar_cod'] = $response['bar_cod'];
            $articleDetails[$key]['category'] = $response['product']['category']['name'];
            $articleDetails[$key]['product'] = $response['product']['name'];
            $articleDetails[$key]['mark'] = $response['product']['mark']['name'];
            $articleDetails[$key]['packing_deployed'] = $response['packing_deployed'];
        }


        return $articleDetails;
    }
    
}

//packing
//product

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Entities/ArticleDetail.php`:

```php
<?php

namespace Modules\Article\Entities;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Model;

class ArticleDetail extends Model
{
    use HasFactory, SoftDeletes;

    //protected $connection = 'pgsql_article';

    protected $fillable = [
        'id',     
        'article_id',     
        'presentation_id',     
        'quantity',     
        'status',     
        'user_insert_id',     
        'user_update_id',      
    ];

    protected $hidden = ['created_at', 'updated_at', 'deleted_at'];

    protected $casts = [ /* 'field_name' => 'field_type' */ ];
        
    public function article()
    {
        return $this->belongsTo(\Modules\Article\Entities\Article::class);
    }  

    protected static function newFactory()
    {
        return \Modules\Article\Database\Factories\ArticleDetailFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Entities/Article.php`:

```php
<?php

namespace Modules\Article\Entities;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Model;
use Modules\Article\Database\Factories\ArticleFactory;

class Article extends Model
{
    use HasFactory, SoftDeletes;

    //protected $connection = 'pgsql_article';

    protected $fillable = [
        'id',     
        'int_cod',     
        'name',     
        'price',     
        'stock_min',     
        'stock_max',     
        'status',     
        'photo',     
        'id_user_insert',     
        'id_user_update'     
    ];

    protected $hidden = ['created_at', 'updated_at', 'deleted_at'];

    protected $casts = [ /* 'field_name' => 'field_type' */ ];
    
        
    public function articleDetails()
    {        
        return $this->hasMany(\Modules\Article\Entities\ArticleDetail::class);
    }
    
    protected static function newFactory()
    {
        return ArticleFactory::new();
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Resources/views/index.blade.php`:

```php
@extends('article::layouts.master')

@section('content')
    <h1>Hello World</h1>

    <p>
        This view is loaded from module: {!! config('article.name') !!}
    </p>
@endsection

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/app/Resources/views/layouts/master.blade.php`:

```php
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Module Article</title>

       {{-- Laravel Vite - CSS File --}}
       {{-- {{ module_vite('build-article', 'Resources/assets/sass/app.scss') }} --}}

    </head>
    <body>
        @yield('content')

        {{-- Laravel Vite - JS File --}}
        {{-- {{ module_vite('build-article', 'Resources/assets/js/app.js') }} --}}
    </body>
</html>

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/package.json`:

```json
{
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "devDependencies": {
    "axios": "^1.1.2",
    "laravel-vite-plugin": "^0.7.5",
    "sass": "^1.69.5",
    "postcss": "^8.3.7",
    "vite": "^4.0.0"
  }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/routes/apiold.php`:

```php
<?php

use Illuminate\Support\Facades\Route;
use Modules\Article\Http\Controllers\ArticleController;

/*
 *--------------------------------------------------------------------------
 * API Routes
 *--------------------------------------------------------------------------
 *
 * Here is where you can register API routes for your application. These
 * routes are loaded by the RouteServiceProvider within a group which
 * is assigned the "api" middleware group. Enjoy building your API!
 *
*/

Route::middleware(['auth:sanctum'])->prefix('v1')->group(function () {
    Route::apiResource('article', ArticleController::class)->names('article');
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/routes/api.php`:

```php
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Modules\Article\Http\Controllers\ArticleController;
use Modules\Article\Http\Controllers\ArticleDetailController;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group. Enjoy building your API!
|
*/

//Route::middleware('auth:api')->get('/article', function (Request $request) {
//    return $request->user();
//});

/*
 *--------------------------------------------------------------------------
 * API Routes
 *--------------------------------------------------------------------------
 *
 * Here is where you can register API routes for your application. These
 * routes are loaded by the RouteServiceProvider within a group which
 * is assigned the "api" middleware group. Enjoy building your API!
 *
*/

//Route::middleware(['auth:sanctum'])->prefix('v1')->group(function () {
//    Route::apiResource('article', ArticleController::class)->names('article');
//});

Route::middleware(['auth:sanctum'])->group(function () {
    Route::get('/articles-search', [ArticleController::class,'search']);
    Route::prefix('articles')->group(function () {
        Route::get('/', [ArticleController::class, 'index']);
        Route::get('/{article}', [ArticleController::class, 'show']);
        Route::post('/', [ArticleController::class, 'store']);
        Route::put('/{article}', [ArticleController::class, 'update']);
        Route::delete('/{id}', [ArticleController::class,'destroy']);
    });
    Route::get('/articles-help', [ArticleController::class, 'help']);

    Route::prefix('article_details')->group(function () {  
        Route::get('/{articleId}', [ArticleDetailController::class, 'getAllByArticle']);
        Route::get('/{article_detail}', [ArticleDetailController::class, 'show']);
        Route::post('/', [ArticleDetailController::class, 'store']);
        Route::put('/{article_detail}', [ArticleDetailController::class, 'update']);
        Route::delete('/{id}', [ArticleDetailController::class,'destroy']);
    });
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/routes/web.php`:

```php
<?php

use Illuminate\Support\Facades\Route;
use Modules\Article\Http\Controllers\ArticleController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::group([], function () {
    Route::resource('article', ArticleController::class)->names('article');
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/vite.config.js`:

```js
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    build: {
        outDir: '../../public/build-article',
        emptyOutDir: true,
        manifest: true,
    },
    plugins: [
        laravel({
            publicDirectory: '../../public',
            buildDirectory: 'build-article',
            input: [
                __dirname + '/resources/assets/sass/app.scss',
                __dirname + '/resources/assets/js/app.js'
            ],
            refresh: true,
        }),
    ],
});

//export const paths = [
//    'Modules/Article/resources/assets/sass/app.scss',
//    'Modules/Article/resources/assets/js/app.js',
//];
```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/Modules/Article/module.json`:

```json
{
    "name": "Article",
    "alias": "article",
    "description": "",
    "keywords": [],
    "priority": 0,
    "providers": [
        "Modules\\Article\\Providers\\ArticleServiceProvider"
    ],
    "files": []
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/nginx/default.conf`:

```conf
# upstream php_service {
#  server auxilio_php:9000;
# }

server {
  listen 80;
  server_name localhost;
  index index.php index.html;
  error_log  /var/log/nginx/error.log;
  access_log /var/log/nginx/access.log;
  root /var/www/html/public;
  # autoindex on;

  location / {
      try_files $uri $uri/ /index.php?$query_string;
      gzip_static on;
  }

  location ~ \.php$ {
      #try_files $uri =404;
      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      #fastcgi_pass php_service;
      fastcgi_pass store_php:9000;
      fastcgi_index index.php;
      include fastcgi_params;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_param PATH_INFO $fastcgi_path_info;
  }

  #http {
  #  disable_symlinks off;
  #}
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/nginx/Dockerfile`:

```
FROM nginx:1.23.1
COPY ./default.conf /etc/nginx/conf.d/default.conf

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/package.json`:

```json
{
    "private": true,
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build"
    },
    "devDependencies": {
        "axios": "^1.7.4",
        "laravel-vite-plugin": "^1.0",
        "vite": "^5.0"
    }
}

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/routes/console.php`:

```php
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote')->hourly();

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/routes/api.php`:

```php
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;
use App\Http\Controllers\AuthMenuController;
use App\Http\Controllers\UserController;
use App\Http\Controllers\TokenController;
use App\Http\Controllers\AvatarController;
use App\Http\Controllers\MenuController;
use App\Http\Controllers\RoleController;

/*Route::get('/user', function (Request $request) {
    return $request->user();
})->middleware('auth:sanctum');*/


Route::post('/sanctum/token', TokenController::class);
Route::middleware(['auth:sanctum'])->group(function () {
    //Route::prefix('users')->middleware(['role:admin'])->group(function () {
    Route::prefix('users')->group(function () {
       Route::get('/auth', AuthController::class);
       Route::get('/auth-menu', AuthMenuController::class);
       Route::get('/{user}', [UserController::class, 'show']);        
       Route::get('/', [UserController::class, 'index']);
       Route::post('/', [UserController::class, 'store']);
       Route::post('/{user}', [UserController::class, 'update']);
       Route::delete('/{id}', [UserController::class,'destroy']);
       Route::post('/auth/avatar', [AvatarController::class, 'store']);
    });
       
    Route::prefix('menus')->group(function () {
        Route::get('/', [MenuController::class, 'index']);
        Route::get('/children/{menuId}', [MenuController::class, 'children']);
        Route::post('/', [MenuController::class, 'store']);  
        Route::put('/{menu}', [MenuController::class, 'update']);
        Route::delete('/{id}', [MenuController::class,'destroy']);
    });
   
    Route::prefix('roles')->group(function () {
        Route::get('/helperTables', fn() => response()->json([
            "roles" => \App\Models\Role::get()
        ], 200));
        Route::get('/{role}', [RoleController::class, 'show']);
        Route::get('/', [RoleController::class, 'index']);       
        Route::post('/', [RoleController::class, 'store']);        
        Route::put('/{role}', [RoleController::class, 'update']);
        Route::delete('/{id}', [RoleController::class,'destroy']);        
    });
});

Route::prefix('error')->group(function () {
    Route::get('/not-auth', function(){        
        abort(403, 'This action is not authorized.');        
    });

    Route::get('/not-found', function(){        
        abort(404, 'Page not found.');        
    });

    Route::get('/', function(){        
        abort(500, 'Something went wrong');        
    });
    /*Route::get('/custom', function(){
        throw new \App\Exceptions\CustomException('Error: Levi Strauss & CO.', 501);
    });*/
});
```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/routes/web.php`:

```php
<?php

use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    return view('welcome');
});

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/modules_statuses.json`:

```json
{
    "Article": true,
    "Store": true,
    "Product": true,
    "Common": true
}
```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/artisan`:

```
#!/usr/bin/env php
<?php

use Symfony\Component\Console\Input\ArgvInput;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
$status = (require_once __DIR__.'/bootstrap/app.php')
    ->handleCommand(new ArgvInput);

exit($status);

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/docs/closes.sql`:

```sql
--
/*
CREATE TABLE public.cierre_diario (
    id integer NOT NULL,
    id_presentacion integer NOT NULL,
    cantidad_entrante integer DEFAULT 0 NOT NULL,
    cantidad_saliente integer DEFAULT 0 NOT NULL,
    cantidad_reverso_entrante integer DEFAULT 0 NOT NULL,
    cantidad_reverso_saliente integer DEFAULT 0 NOT NULL,
    cierre_dia date NOT NULL,
    id_user_insert integer DEFAULT 1 NOT NULL,
    date_insert date DEFAULT ('now'::text)::date NOT NULL,
    time_insert time(0) without time zone DEFAULT ('now'::text)::time without time zone NOT NULL
);

CREATE TABLE public.cierre_mensual (
    id integer NOT NULL,
    id_presentacion integer NOT NULL,
    cantidad_entrante integer DEFAULT 0 NOT NULL,
    cantidad_saliente integer DEFAULT 0 NOT NULL,
    cantidad_reverso_entrante integer DEFAULT 0 NOT NULL,
    cantidad_reverso_saliente integer DEFAULT 0 NOT NULL,
    cierre_mes integer NOT NULL,
    id_user_insert integer DEFAULT 1 NOT NULL,
    date_insert date DEFAULT ('now'::text)::date NOT NULL,
    time_insert time(0) without time zone DEFAULT ('now'::text)::time without time zone NOT NULL
);
--
CREATE TABLE public.cierre_anual (
    id integer NOT NULL,
    id_presentacion integer NOT NULL,
    cantidad_entrante integer DEFAULT 0 NOT NULL,
    cantidad_saliente integer DEFAULT 0 NOT NULL,
    cantidad_reverso_entrante integer DEFAULT 0 NOT NULL,
    cantidad_reverso_saliente integer DEFAULT 0 NOT NULL,
    cierre_ano integer NOT NULL,
    id_user_insert integer DEFAULT 1 NOT NULL,
    date_insert date DEFAULT ('now'::text)::date NOT NULL,
    time_insert time(0) without time zone DEFAULT ('now'::text)::time without time zone NOT NULL
);

php artisan module:make-migration create_daily_closings Store
php artisan module:make-model DailyClosing Store

php artisan module:make-migration create_monthly_closings Store 
php artisan module:make-model MonthlyClosing Store

php artisan module:make-migration create_annual_closings Store 
php artisan module:make-model AnnualClosing Store

--
CREATE TABLE public.soporte_tipo (
    id integer NOT NULL,
    nombre character varying,
    id_movimiento_tipo integer
);

--

CREATE VIEW public.view_existencia_movimiento AS
 SELECT DISTINCT b.categoria,
    b.producto,
    b.marca,
    a.id_presentacion,
    ( SELECT public.view_presentacion_despliegue(a.id_presentacion) AS view_presentacion_despliegue) AS presentacion,
        CASE
            WHEN (e.cantidad IS NULL) THEN (0)::bigint
            ELSE e.cantidad
        END AS entradas,
        CASE
            WHEN (s.cantidad IS NULL) THEN (0)::bigint
            ELSE s.cantidad
        END AS salidas,
        CASE
            WHEN (re.cantidad IS NULL) THEN (0)::bigint
            ELSE re.cantidad
        END AS reverso_entradas,
        CASE
            WHEN (rs.cantidad IS NULL) THEN (0)::bigint
            ELSE rs.cantidad
        END AS reverso_salidas,
    ((COALESCE(e.cantidad, (0)::bigint) - COALESCE(re.cantidad, (0)::bigint)) - (COALESCE(s.cantidad, (0)::bigint) - COALESCE(rs.cantidad, (0)::bigint))) AS total
   FROM (((((public.movimiento_aux a
     JOIN public.view_presentacion b ON ((a.id_presentacion = b.id)))
     LEFT JOIN ( SELECT view_presentacion_cantidad_entrada.id_presentacion,
            view_presentacion_cantidad_entrada.cantidad
           FROM public.view_presentacion_cantidad_entrada) e ON ((a.id_presentacion = e.id_presentacion)))
     LEFT JOIN ( SELECT view_presentacion_cantidad_salida.id_presentacion,
            view_presentacion_cantidad_salida.cantidad
           FROM public.view_presentacion_cantidad_salida) s ON ((a.id_presentacion = s.id_presentacion)))
     LEFT JOIN ( SELECT view_presentacion_cantidad_reverso_entrada.id_presentacion,
            view_presentacion_cantidad_reverso_entrada.cantidad
           FROM public.view_presentacion_cantidad_reverso_entrada) re ON ((a.id_presentacion = re.id_presentacion)))
     LEFT JOIN ( SELECT view_presentacion_cantidad_reverso_salida.id_presentacion,
            view_presentacion_cantidad_reverso_salida.cantidad
           FROM public.view_presentacion_cantidad_reverso_salida) rs ON ((a.id_presentacion = rs.id_presentacion)))
  WHERE (a.cierre_fec IS NULL);
  
  
  --
  
  CREATE VIEW public.view_existencia AS
 SELECT alias.categoria,
    alias.producto,
    alias.marca,
    alias.id_presentacion,
    alias.presentacion,
    sum(alias.entradas) AS entradas,
    sum(alias.salidas) AS salidas,
    sum(alias.reverso_entradas) AS reverso_entradas,
    sum(alias.reverso_salidas) AS reverso_salidas,
    sum(alias.total) AS total
   FROM ( SELECT view_existencia_movimiento.categoria,
            view_existencia_movimiento.producto,
            view_existencia_movimiento.marca,
            view_existencia_movimiento.id_presentacion,
            view_existencia_movimiento.presentacion,
            view_existencia_movimiento.entradas,
            view_existencia_movimiento.salidas,
            view_existencia_movimiento.reverso_entradas,
            view_existencia_movimiento.reverso_salidas,
            view_existencia_movimiento.total
           FROM public.view_existencia_movimiento
        UNION ALL
         SELECT view_existencia_cierre_diario.categoria,
            view_existencia_cierre_diario.producto,
            view_existencia_cierre_diario.marca,
            view_existencia_cierre_diario.id_presentacion,
            view_existencia_cierre_diario.presentacion,
            view_existencia_cierre_diario.entradas,
            view_existencia_cierre_diario.salidas,
            view_existencia_cierre_diario.reverso_entradas,
            view_existencia_cierre_diario.reverso_salidas,
            view_existencia_cierre_diario.total
           FROM public.view_existencia_cierre_diario) alias
  GROUP BY alias.categoria, alias.producto, alias.marca, alias.id_presentacion, alias.presentacion;

---

/*-CREATE VIEW public.view_cierre_mov_fec_presentacion AS
 -SELECT DISTINCT b.movimiento_fec,
 -   a.id_presentacion
 -  FROM (public.movimiento_aux a
 -    LEFT JOIN public.movimiento b ON ((a.id_movimiento = b.id)))
 - WHERE ((a.cierre_fec IS NULL) AND (b.cierre_fec IS NULL))
 - ORDER BY b.movimiento_fec, a.id_presentacion;*/
  
 CREATE VIEW public.view_clousure_mov_date_time_article AS
 SELECT DISTINCT b.date_time,
    a.article_id
   FROM (public.movement_details a
     LEFT JOIN public.movements b ON ((a.movement_id = b.id)))
  WHERE ((a.close IS NULL) AND (b.close IS NULL))
  ORDER BY b.date_time, a.article_id;
  
--
 -- CREATE VIEW public.view_cierre_pre_insert_aux AS
 --SELECT b.movimiento_fec,
 --   a.id_presentacion,
 --   sum(a.cantidad) AS sum,
 --   b.id_movimiento_tipo
 --  FROM (public.movimiento_aux a
 --    JOIN public.movimiento b ON ((a.id_movimiento = b.id)))
 -- WHERE ((a.cierre_fec IS NULL) AND (b.cierre_fec IS NULL))
 -- GROUP BY b.movimiento_fec, a.id_presentacion, b.id_movimiento_tipo
 -- ORDER BY b.movimiento_fec, a.id_presentacion, b.id_movimiento_tipo;  
  
 CREATE VIEW public.view_closure_pre_insert_aux AS 
   SELECT b.date_time,
    a.article_id,
    sum(a.quantity) AS sum,
    b.type_id
   FROM (public.movement_details a
     JOIN public.movements b ON ((a.movement_id = b.id)))
  WHERE ((a.close IS NULL) AND (b.close IS NULL))
  GROUP BY b.date_time, a.article_id, b.type_id
  ORDER BY b.date_time, a.article_id, b.type_id;

--

-- CREATE VIEW public.view_cierre_pre_insert AS
-- SELECT a.movimiento_fec,
--     a.id_presentacion,
--         CASE
--             WHEN (sum(b.sum) IS NULL) THEN ((0)::bigint)::numeric
--             ELSE sum(b.sum)
--         END AS cantidad_entrante,
--         CASE
--             WHEN (sum(c.sum) IS NULL) THEN ((0)::bigint)::numeric
--             ELSE sum(c.sum)
--         END AS cantidad_saliente,
--         CASE
--             WHEN (sum(d.sum) IS NULL) THEN ((0)::bigint)::numeric
--             ELSE sum(d.sum)
--         END AS cantidad_reverso_entrante,
--         CASE
--             WHEN (sum(e.sum) IS NULL) THEN ((0)::bigint)::numeric
--             ELSE sum(e.sum)
--         END AS cantidad_reverso_saliente
--    FROM ((((public.view_cierre_mov_fec_presentacion a
--      LEFT JOIN public.view_cierre_pre_insert_aux b ON (((a.id_presentacion = b.id_presentacion) AND (b.id_movimiento_tipo = 1) AND (a.movimiento_fec = b.movimiento_fec))))
--      LEFT JOIN public.view_cierre_pre_insert_aux c ON (((a.id_presentacion = c.id_presentacion) AND (c.id_movimiento_tipo = 2) AND (a.movimiento_fec = c.movimiento_fec))))
--      LEFT JOIN public.view_cierre_pre_insert_aux d ON (((a.id_presentacion = d.id_presentacion) AND (d.id_movimiento_tipo = 3) AND (a.movimiento_fec = d.movimiento_fec))))
--      LEFT JOIN public.view_cierre_pre_insert_aux e ON (((a.id_presentacion = e.id_presentacion) AND (e.id_movimiento_tipo = 4) AND (a.movimiento_fec = e.movimiento_fec))))
--   GROUP BY a.movimiento_fec, a.id_presentacion
--   ORDER BY a.movimiento_fec, a.id_presentacion;
  
  
 CREATE VIEW public.view_closure_pre_insert AS
 SELECT a.date_time,
    a.article_id,
        CASE
            WHEN (sum(b.sum) IS NULL) THEN ((0)::bigint)::numeric
            ELSE sum(b.sum)
        END AS quantity_input,
        CASE
            WHEN (sum(c.sum) IS NULL) THEN ((0)::bigint)::numeric
            ELSE sum(c.sum)
        END AS quantity_output,
        CASE
            WHEN (sum(d.sum) IS NULL) THEN ((0)::bigint)::numeric
            ELSE sum(d.sum)
        END AS quantity_reverse_input,
        CASE
            WHEN (sum(e.sum) IS NULL) THEN ((0)::bigint)::numeric
            ELSE sum(e.sum)
        END AS quantity_reverse_output
   FROM ((((public.view_clousure_mov_date_time_article a
     LEFT JOIN public.view_closure_pre_insert_aux b ON (((a.article_id = b.article_id) AND (b.type_id = 1) AND (a.date_time = b.date_time))))
     LEFT JOIN public.view_closure_pre_insert_aux c ON (((a.article_id = c.article_id) AND (c.type_id = 2) AND (a.date_time = c.date_time))))
     LEFT JOIN public.view_closure_pre_insert_aux d ON (((a.article_id = d.article_id) AND (d.type_id = 3) AND (a.date_time = d.date_time))))
     LEFT JOIN public.view_closure_pre_insert_aux e ON (((a.article_id = e.article_id) AND (e.type_id = 4) AND (a.date_time = e.date_time))))
  GROUP BY a.date_time, a.article_id
  ORDER BY a.date_time, a.article_id;
  
  ---

 --CREATE VIEW public.view_presentacion_cantidad_entrada AS
 --SELECT a.id_presentacion,
 --   sum(a.cantidad) AS cantidad
 --  FROM (public.movimiento_aux a
 --    JOIN public.movimiento b ON (((a.id_movimiento = b.id) AND (b.cierre_fec IS NULL))))
 -- WHERE (b.id_movimiento_tipo = 1)
 -- GROUP BY a.id_presentacion;   
  
CREATE VIEW public.view_article_quantity_input AS
   SELECT a.article_id,
    sum(a.quantity) AS quantity
   FROM (public.movement_details a
     JOIN public.movements b ON (((a.movement_id = b.id) AND (b.close IS NULL))))
  WHERE (b.type_id = 1)
  GROUP BY a.article_id;
  
  --
  
  CREATE VIEW public.view_presentacion_cantidad_reverso_entrada AS
 SELECT a.id_presentacion,
    sum(a.cantidad) AS cantidad
   FROM (public.movimiento_aux a
     JOIN public.movimiento b ON (((a.id_movimiento = b.id) AND (b.cierre_fec IS NULL))))
  WHERE (b.id_movimiento_tipo = 3)
  GROUP BY a.id_presentacion;

--

CREATE VIEW public.view_presentacion_cantidad_reverso_salida AS
 SELECT a.id_presentacion,
    sum(a.cantidad) AS cantidad
   FROM (public.movimiento_aux a
     JOIN public.movimiento b ON (((a.id_movimiento = b.id) AND (b.cierre_fec IS NULL))))
  WHERE (b.id_movimiento_tipo = 4)
  GROUP BY a.id_presentacion;

--

CREATE VIEW public.view_presentacion_cantidad_salida AS
 SELECT a.id_presentacion,
    sum(a.cantidad) AS cantidad
   FROM (public.movimiento_aux a
     JOIN public.movimiento b ON (((a.id_movimiento = b.id) AND (b.cierre_fec IS NULL))))
  WHERE (b.id_movimiento_tipo = 2)
  GROUP BY a.id_presentacion;
  
  
--

/*--CREATE VIEW public.view_existencia_cierre_diario AS
 --SELECT b.categoria,
 --   b.producto,
 --   b.marca,
 --   a.id_presentacion,
 --   ( SELECT public.view_presentacion_despliegue(a.id_presentacion) AS view_presentacion_despliegue) AS presentacion,
 --       CASE
 --           WHEN (a.cantidad_entrante IS NULL) THEN 0
 --           ELSE a.cantidad_entrante
 --       END AS entradas,
 --       CASE
 --           WHEN (a.cantidad_saliente IS NULL) THEN 0
 --           ELSE a.cantidad_saliente
 --       END AS salidas,
 --       CASE
 --           WHEN (a.cantidad_reverso_entrante IS NULL) THEN 0
 --           ELSE a.cantidad_reverso_entrante
 --       END AS reverso_entradas,
 --       CASE
 --           WHEN (a.cantidad_reverso_saliente IS NULL) THEN 0
 --           ELSE a.cantidad_reverso_saliente
 --       END AS reverso_salidas,
 --   ((COALESCE(a.cantidad_entrante, 0) - COALESCE(a.cantidad_reverso_entrante, 0)) - (COALESCE(a.cantidad_saliente, 0) - COALESCE(a.cantidad_reverso_saliente, 0))) AS total
 --  FROM (public.cierre_diario a
 --    JOIN public.view_presentacion b ON ((a.id_presentacion = b.id)))
 -- WHERE true;*/

CREATE VIEW public.view_existence_daily_closing AS
 SELECT a.article_id,
        CASE
            WHEN (a.quantity_input IS NULL) THEN 0
            ELSE a.quantity_input
        END AS entradas,
        CASE
            WHEN (a.quantity_output IS NULL) THEN 0
            ELSE a.quantity_output
        END AS salidas,
        CASE
            WHEN (a.quantity_reverse_input IS NULL) THEN 0
            ELSE a.quantity_reverse_input
        END AS reverso_entradas,
        CASE
            WHEN (a.quantity_reverse_output IS NULL) THEN 0
            ELSE a.quantity_reverse_output
        END AS reverso_salidas,
    ((COALESCE(a.quantity_input, 0) - COALESCE(a.quantity_reverse_input, 0)) - (COALESCE(a.quantity_output, 0) - COALESCE(a.quantity_reverse_output, 0))) AS total
   FROM public.close_days a
  WHERE true;
  
  
  CREATE VIEW public.view_existence_close_days AS
 SELECT a.article_id,
        CASE
            WHEN (a.quantity_input IS NULL) THEN 0
            ELSE a.quantity_input
        END AS input,
        CASE
            WHEN (a.quantity_output IS NULL) THEN 0
            ELSE a.quantity_output
        END AS output,
        CASE
            WHEN (a.quantity_reverse_input IS NULL) THEN 0
            ELSE a.quantity_reverse_input
        END AS reverse_input,
        CASE
            WHEN (a.quantity_reverse_output IS NULL) THEN 0
            ELSE a.quantity_reverse_output
        END AS reverse_output,
    ((COALESCE(a.quantity_input, 0) - COALESCE(a.quantity_reverse_input, 0)) - (COALESCE(a.quantity_output, 0) - COALESCE(a.quantity_reverse_output, 0))) AS total
   FROM public.close_days a
    -- JOIN public.view_presentacion b ON ((a.id_presentacion = b.id)))
  WHERE true;
  
  



CREATE FUNCTION public.view_total_antes_cierre(i_id_presentacion integer, i_cierre_dia date) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
        o_return numeric;
        
BEGIN
       o_return =0;
       SELECT 
        sum(cantidad_entrante - cantidad_reverso_entrante - (cantidad_saliente - cantidad_reverso_saliente))
       
       INTO o_return
       FROM public.cierre_diario 
       WHERE id_presentacion = i_id_presentacion AND cierre_dia < i_cierre_dia
       GROUP BY id_presentacion;         
       RETURN COALESCE(o_return,0);
END;
$$;

---
---
---
---


--CREATE FUNCTION public.cierre_diario(i_fec_desde date, i_fec_hasta date, i_id_user integer) RETURNS character
--    LANGUAGE plpgsql
--    AS $$
--DECLARE
--        o_return character;
--        v_fecha date;        
--BEGIN
--	o_return:='Z';
--       IF (SELECT public.cierre_diario_fechas_validas(i_fec_desde, i_fec_hasta)) THEN
--		v_fecha = i_fec_desde;
--		WHILE v_fecha <= i_fec_hasta LOOP
--			IF  (SELECT public.cierre_diario_fecha_existe(v_fecha)) THEN
--			        SELECT public.cierre_diario_register(v_fecha, i_id_user) INTO o_return;				
--			END IF;
--			SELECT ( v_fecha + interval '1 day') INTO v_fecha; 
--		END LOOP;
--	END IF;  
--	
--	RETURN o_return;
--	
--END;
--$$;

--

--CREATE FUNCTION public.cierre_diario_fechas_validas(i_fecha_desde date, i_fecha_hasta date) RETURNS boolean
--    LANGUAGE plpgsql
--    AS $$
--BEGIN
--        RETURN (i_fecha_desde = (SELECT min(movimiento_fec) FROM public.movimiento WHERE cierre_fec IS NULL)) 
--               AND 
--               (i_fecha_hasta <= now());
--END;
--$$;

--

--CREATE FUNCTION public.cierre_diario_fecha_existe(i_fecha date) RETURNS boolean
--    LANGUAGE plpgsql
--    AS $$
--BEGIN
--
--        RETURN (SELECT CASE WHEN count(*)=0 THEN false ELSE true END 
--		FROM public.movimiento 
--			WHERE cierre_fec IS NULL AND movimiento_fec = i_fecha);
--
--END;
--$$;

--

CREATE FUNCTION public.cierre_diario_register(i_fecha date, i_id_user integer) RETURNS character
    LANGUAGE plpgsql
    AS $$
BEGIN
	INSERT INTO public.cierre_diario(
		id_presentacion, 
		cantidad_entrante, 
		cantidad_saliente, 
		cantidad_reverso_entrante, 
		cantidad_reverso_saliente, 
		cierre_dia, 
		id_user_insert
	) SELECT id_presentacion, 
		cantidad_entrante, 
		cantidad_saliente,
		cantidad_reverso_entrante, 
		cantidad_reverso_saliente, 
		i_fecha, 
		i_id_user
		FROM view_cierre_pre_insert
		WHERE movimiento_fec = i_fecha;
		
		
		/*
		  	INSERT INTO public.close_days(
		article_id, 
		quantity_input, 
		quantity_output, 
		quantity_reverse_input, 
		quantity_reverse_output, 
		close, 
		id_user_insert
	) SELECT article_id, 
		quantity_input, 
		quantity_output,
		quantity_reverse_input, 
		quantity_reverse_output, 
		now(), 
		1
		FROM view_closure_pre_insert
		WHERE movimiento_fec = i_fecha;
		*/
		
		
		
	UPDATE public.movimiento SET cierre_fec = now()
		WHERE movimiento_fec = i_fecha;
		
	UPDATE public.movimiento_aux SET cierre_fec = now()
		WHERE id_movimiento IN (SELECT id FROM public.movimiento WHERE movimiento_fec = i_fecha);
		
	RETURN 'C';
END;
$$;


-------------

select
  close,
  sum(quantity_input) as quantity_input,
  sum(quantity_output) as quantity_output,
  sum(quantity_reverse_input) as quantity_reverse_input,
  sum(quantity_reverse_output) as quantity_reverse_output  
from public.close_days
group by close;


---------------------
  

CREATE OR REPLACE FUNCTION public.daily_closing(i_date_from date, i_date_to date, i_user_id integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
        o_return boolean;
        v_date date;        
BEGIN
	o_return:=false;
        IF (SELECT public.daily_closing_valid_dates(i_date_from, i_date_to)) THEN
		v_date = i_date_from;
		WHILE v_date <= i_date_to LOOP
			IF  (SELECT public.daily_closing_date_exists(v_date)) THEN
			        SELECT public.daily_closing_register(v_date, i_user_id) INTO o_return;				
			END IF;
			SELECT ( v_date + interval '1 day') INTO v_date; 
		END LOOP;
	END IF;  
	
	RETURN o_return;
	
END;
$$;

CREATE OR REPLACE FUNCTION public.daily_closing_valid_dates(i_date_from date, i_date_to date) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
        RETURN (i_date_from = (SELECT min(date_time::date) FROM public.movements WHERE close IS NULL)) 
               AND 
               (i_date_to <= now());
END;
$$;


CREATE OR REPLACE FUNCTION public.daily_closing_date_exists(i_date date) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN

        RETURN (SELECT CASE WHEN count(*)=0 THEN false ELSE true END 
		FROM public.movements 
			WHERE close IS NULL AND date_time::date = i_date);

END;
$$;


CREATE OR REPLACE FUNCTION public.daily_closing_register(i_date date, i_user_id integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
	INSERT INTO public.close_days(
		article_id, 
		quantity_input, 
		quantity_output, 
		quantity_reverse_input, 
		quantity_reverse_output, 
		close, 
		id_user_insert
	) SELECT article_id, 
		quantity_input, 
		quantity_output,
		quantity_reverse_input, 
		quantity_reverse_output, 
		i_date, 
		i_user_id
		FROM view_closure_pre_insert
		WHERE date_time::date = i_date;		
		
	UPDATE public.movements SET close = now()
		WHERE date_time::date = i_date;
		
	UPDATE public.movement_details SET close = now()
		WHERE movement_id IN (SELECT id FROM public.movements WHERE date_time::date = i_date);
		
	RETURN true;
END;
$$;

select public.daily_closing_register('2024-11-22', 1) 

select public.daily_closing('2024-11-22', '2024-11-22', 1)






NEW

select 
  a.close, 
  a.article_id, 
  sum(a.total) as accumulator, 
  COALESCE(b.inputs, 0::bigint) as inputs, 
  COALESCE(b.outputs, 0::bigint) as outputs,
  (sum(a.total) + COALESCE(b.inputs, 0::bigint)) - COALESCE(b.outputs, 0::bigint) as total
from view_stock_close_day_by_day a 
left join view_stock_movement b
on b.article_id=a.article_id
group by a.close, a.article_id, b.inputs, b.outputs

select * from view_stock_movement


select * from view_stock_close_day_by_day


//////////

-- View: public.view_stock_close_day_by_day

-- DROP VIEW public.view_stock_close_day_by_day;

CREATE OR REPLACE VIEW public.view_stock_close_day_by_day
 AS
 SELECT a.close,
    a.article_id,
        CASE
            WHEN a.quantity_input IS NULL THEN 0
            ELSE a.quantity_input
        END AS inputs,
        CASE
            WHEN a.quantity_output IS NULL THEN 0
            ELSE a.quantity_output
        END AS outputs,
        CASE
            WHEN a.quantity_reverse_input IS NULL THEN 0
            ELSE a.quantity_reverse_input
        END AS reverse_inputs,
        CASE
            WHEN a.quantity_reverse_output IS NULL THEN 0
            ELSE a.quantity_reverse_output
        END AS reverse_outputs,
    COALESCE(a.quantity_input, 0) - COALESCE(a.quantity_reverse_input, 0) - (COALESCE(a.quantity_output, 0) - COALESCE(a.quantity_reverse_output, 0)) AS total
   FROM ( SELECT close_days.id,
            close_days.article_id,
            close_days.quantity_input,
            close_days.quantity_output,
            close_days.quantity_reverse_input,
            close_days.quantity_reverse_output,
            close_days.close
           FROM close_days) a
  WHERE true;

ALTER TABLE public.view_stock_close_day_by_day
    OWNER TO postgres;
    
    
    
    
    
    
    
    
    
    
    
    
    
    ---> let's go here
    
    SELECT article_id,
    sum(inputs) AS inputs,
    sum(outputs) AS outputs,
    sum(reverse_inputs) AS reverse_inputs,
    sum(reverse_outputs) AS reverse_outputs,
    sum(total) AS total
   FROM ( 
         SELECT view_stock_close_day.article_id,
            view_stock_close_day.inputs,
            view_stock_close_day.outputs,
            view_stock_close_day.reverse_inputs,
            view_stock_close_day.reverse_outputs,
            view_stock_close_day.total
           FROM view_stock_close_day) alias
  GROUP BY article_id;

  SELECT article_id,
    sum(inputs) AS inputs,
    sum(outputs) AS outputs,
    sum(reverse_inputs) AS reverse_inputs,
    sum(reverse_outputs) AS reverse_outputs,
    sum(total) AS total
   FROM ( SELECT view_stock_movement.article_id,
            view_stock_movement.inputs,
            view_stock_movement.outputs,
            view_stock_movement.reverse_inputs,
            view_stock_movement.reverse_outputs,
            view_stock_movement.total
           FROM view_stock_movement
         ) alias
  GROUP BY article_id;
  

-- View: public.view_total_articles_by_daily_closing

-- DROP VIEW public.view_total_articles_by_daily_closing;

CREATE OR REPLACE VIEW public.view_total_articles_by_daily_closing
 AS
 SELECT article_id,
    sum(total) AS total
   FROM ( SELECT view_stock_close_day.article_id,
            view_stock_close_day.total
           FROM view_stock_close_day) alias
  GROUP BY article_id;

ALTER TABLE public.view_total_articles_by_daily_closing
    OWNER TO postgres;


-- View: public.view_articles_sum_by_unclosed_movements

-- DROP VIEW public.view_articles_sum_by_unclosed_movements;

CREATE OR REPLACE VIEW public.view_articles_sum_by_unclosed_movements
 AS
 SELECT article_id,
    sum(inputs) AS inputs,
    sum(outputs) AS outputs,
    sum(reverse_inputs) AS reverse_inputs,
    sum(reverse_outputs) AS reverse_outputs,
    sum(total) AS total
   FROM ( SELECT view_stock_movement.article_id,
            view_stock_movement.inputs,
            view_stock_movement.outputs,
            view_stock_movement.reverse_inputs,
            view_stock_movement.reverse_outputs,
            view_stock_movement.total
           FROM view_stock_movement) alias
  GROUP BY article_id;

ALTER TABLE public.view_articles_sum_by_unclosed_movements
    OWNER TO postgres;


-- View: public.view_stocks_by_accumulated_plus_unclosed_movements

-- DROP VIEW public.view_stocks_by_accumulated_plus_unclosed_movements;

CREATE OR REPLACE VIEW public.view_stocks_by_accumulated_plus_unclosed_movements
 AS
 SELECT a.id,
    a.int_cod,
    a.name,
    COALESCE(b.total, 0::bigint) AS accumulated,
    COALESCE(c.inputs, 0::numeric) AS inputs,
    COALESCE(c.outputs, 0::numeric) AS outputs,
    COALESCE(c.reverse_inputs, 0::numeric) AS reverse_inputs,
    COALESCE(c.reverse_outputs, 0::numeric) AS reverse_outputs,
    COALESCE(b.total, 0::bigint)::numeric + (COALESCE(c.inputs, 0::numeric) - COALESCE(c.reverse_inputs, 0::numeric)) - (COALESCE(c.outputs, 0::numeric) - COALESCE(c.reverse_outputs, 0::numeric)) AS stock_current,
    a.stock_min,
    a.stock_max
   FROM articles a
     LEFT JOIN view_total_articles_by_daily_closing b ON b.article_id = a.id
     LEFT JOIN view_articles_sum_by_unclosed_movements c ON c.article_id = a.id
  ORDER BY a.id;

ALTER TABLE public.view_stocks_by_accumulated_plus_unclosed_movements
    OWNER TO postgres;


SELECT a.article_id,
    COALESCE(a.quantity_input, 0) AS inputs,
    COALESCE(a.quantity_output, 0) AS outputs,
    COALESCE(a.quantity_reverse_input, 0) AS reverse_inputs,
    COALESCE(a.quantity_reverse_output, 0) AS reverse_outputs,
    COALESCE(a.quantity_input, 0) - COALESCE(a.quantity_reverse_input, 0) - (COALESCE(a.quantity_output, 0) - COALESCE(a.quantity_reverse_output, 0)) AS total,
    a.close
   FROM ( SELECT close_days.id,
            close_days.article_id,
            close_days.quantity_input,
            close_days.quantity_output,
            close_days.quantity_reverse_input,
            close_days.quantity_reverse_output,
            close_days.close
           FROM close_days) a
  WHERE true;

 SELECT alias.article_id,
    sum(alias.total) AS total, close
   FROM ( SELECT view_stock_close_day_test.article_id,
            view_stock_close_day_test.total, close
           FROM view_stock_close_day_test) alias
		WHERE close='2024-12-16'
  GROUP BY alias.article_id, close;

   SELECT alias.article_id,
    sum(alias.total) AS total
   FROM ( SELECT view_stock_close_day_test.article_id,
            view_stock_close_day_test.total
           FROM view_stock_close_day_test WHERE close='2024-12-16') alias		 
  GROUP BY alias.article_id ;



17-12-2024

    select view_stock_close_day_test_2.article_id,
    sum(view_stock_close_day_test_2.total) AS total from view_stock_close_day_test_2 where close = '2024-12-14'
	GROUP BY view_stock_close_day_test_2.article_id

  select view_stock_close_day_test_2.article_id,
    sum(view_stock_close_day_test_2.total) AS total from view_stock_close_day_test_2 where close = '2024-12-15'
	GROUP BY view_stock_close_day_test_2.article_id

	  select view_stock_close_day_test_2.article_id,
    sum(view_stock_close_day_test_2.total) AS total from view_stock_close_day_test_2 where close = '2024-12-16'
	GROUP BY view_stock_close_day_test_2.article_id

    select alias.*, view_stock_close_day_test.*, alias.acumulado+view_stock_close_day_test.total as tt
	from view_stock_close_day_test
	left join (
      select view_stock_close_day_test_2.article_id,
      sum(view_stock_close_day_test_2.total) AS acumulado from view_stock_close_day_test_2 where
	  close >= '2024-12-14' and close < '2024-12-16'  
	  GROUP BY view_stock_close_day_test_2.article_id
	) alias on view_stock_close_day_test.article_id = alias.article_id
	where close = '2024-12-16'



	select * from articles
	inner join 
	(select alias.acumulado, view_stock_close_day_test.*, alias.acumulado+view_stock_close_day_test.total as tt
	from view_stock_close_day_test
	left join (
      select view_stock_close_day_test_2.article_id,
      sum(view_stock_close_day_test_2.total) AS acumulado from view_stock_close_day_test_2 where
	  close >= '2024-12-14' and close < '2024-12-16'  
	  GROUP BY view_stock_close_day_test_2.article_id
	) alias on view_stock_close_day_test.article_id = alias.article_id
	where close = '2024-12-16') as b
	on articles.id = b.article_id

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/docs/uuid_store.sql`:

```sql

select * from view_article_quantity_input order by store_uuid

select * from view_article_quantity_input where store_uuid = '44324059-154f-47a5-ba26-1a4d7ded9b89'

-- View: public.view_article_quantity_input

-- DROP VIEW public.view_article_quantity_input;

CREATE OR REPLACE VIEW public.view_article_quantity_input
 AS
 SELECT
    a.article_id,
    sum(a.quantity) AS quantity,
	b.store_uuid
   FROM movement_details a
     JOIN movements b ON a.movement_id = b.id AND b.close IS NULL
  WHERE b.type_id = 1
  GROUP BY a.article_id, b.store_uuid;

ALTER TABLE public.view_article_quantity_input
    OWNER TO postgres;


-- View: public.view_article_quantity_output

-- DROP VIEW public.view_article_quantity_output;

CREATE OR REPLACE VIEW public.view_article_quantity_output
 AS
 SELECT a.article_id,
    sum(a.quantity) AS quantity,
	b.store_uuid
   FROM movement_details a
     JOIN movements b ON a.movement_id = b.id AND b.close IS NULL
  WHERE b.type_id = 2
  GROUP BY a.article_id, b.store_uuid;

ALTER TABLE public.view_article_quantity_output
    OWNER TO postgres;

-- View: public.view_article_quantity_reverse_input

-- DROP VIEW public.view_article_quantity_reverse_input;

CREATE OR REPLACE VIEW public.view_article_quantity_reverse_input
 AS
 SELECT a.article_id,
    sum(a.quantity) AS quantity,
		b.store_uuid
   FROM movement_details a
     JOIN movements b ON a.movement_id = b.id AND b.close IS NULL
  WHERE b.type_id = 3
  GROUP BY a.article_id, b.store_uuid;

ALTER TABLE public.view_article_quantity_reverse_input
    OWNER TO postgres;

-- View: public.view_article_quantity_reverse_output

-- DROP VIEW public.view_article_quantity_reverse_output;

CREATE OR REPLACE VIEW public.view_article_quantity_reverse_output
 AS
 SELECT a.article_id,
    sum(a.quantity) AS quantity,
	b.store_uuid
   FROM movement_details a
     JOIN movements b ON a.movement_id = b.id AND b.close IS NULL
  WHERE b.type_id = 4
  GROUP BY a.article_id, b.store_uuid;

ALTER TABLE public.view_article_quantity_reverse_output
    OWNER TO postgres;


```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/phpunit.xml`:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="APP_MAINTENANCE_DRIVER" value="file"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_STORE" value="array"/>
        <!-- <env name="DB_CONNECTION" value="sqlite"/> -->
        <!-- <env name="DB_DATABASE" value=":memory:"/> -->
        <env name="MAIL_MAILER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/docker-compose.yml.back`:

```back
version: "3.9"
services:
  php_store:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: store_php
    restart: unless-stopped
    tty: true
    working_dir: /var/www/html/
    volumes:
      - ./:/var/www/html/
      - ./php/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
    networks:
      - store-network
  nginx_store:
    depends_on:
      - php_store
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: store_nginx
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
    networks:
      - store-network      
  pgsql_store:
    container_name: store_pgsql
    image: postgres:13
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - "./postgresql:/var/lib/postgresql/data"
    networks:
      - store-network
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]

networks:
  store-network:
    driver: bridge

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/storage/framework/views/.gitignore`:

```
*
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/storage/framework/testing/.gitignore`:

```
*
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/storage/framework/sessions/.gitignore`:

```
*
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/storage/framework/cache/data/.gitignore`:

```
*
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/storage/framework/cache/.gitignore`:

```
*
!data/
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/storage/logs/.gitignore`:

```
*
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/storage/app/.gitignore`:

```
*
!private/
!public/
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/storage/app/private/.gitignore`:

```
*
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/storage/app/public/.gitignore`:

```
*
!.gitignore

```

`/home/toor/Documentos/github/docker - version/Store-proyecto/store-laravel/vite.config.js`:

```js
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: true,
        }),
    ],
});

```